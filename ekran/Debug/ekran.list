
ekran.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a534  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015f4  0800a6d8  0800a6d8  0001a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bccc  0800bccc  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd4  0800bcd4  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800bcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000244  0800bf20  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  0800bf20  00020908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a6  00000000  00000000  000202b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028de  00000000  00000000  0003085d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00033140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d25  00000000  00000000  00034038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135e8  00000000  00000000  00037d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c26  00000000  00000000  0004b345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b86  00000000  00000000  000e3f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ecc  00000000  00000000  000e4af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e99c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6bc 	.word	0x0800a6bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	0800a6bc 	.word	0x0800a6bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fc91 	bl	80017e0 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8000ebe:	2011      	movs	r0, #17
 8000ec0:	f000 fd84 	bl	80019cc <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f000 fd7d 	bl	80019cc <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 fc84 	bl	80017e0 <LCD_IO_Bl_OnOff>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8000ee0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8000ef2:	23f0      	movs	r3, #240	; 0xf0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 8000f0a:	1d39      	adds	r1, r7, #4
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	20d3      	movs	r0, #211	; 0xd3
 8000f12:	f001 fd3d 	bl	8002990 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <ili9341_ReadID+0x30>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d102      	bne.n	8000f24 <ili9341_ReadID+0x24>
    return 0x9341;
 8000f1e:	f249 3341 	movw	r3, #37697	; 0x9341
 8000f22:	e000      	b.n	8000f26 <ili9341_ReadID+0x26>
  else
    return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	00419300 	.word	0x00419300

08000f34 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8000f3a:	4b52      	ldr	r3, [pc, #328]	; (8001084 <ili9341_Init+0x150>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d115      	bne.n	8000f72 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8000f46:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <ili9341_Init+0x150>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <ili9341_Init+0x150>)
 8000f52:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8000f54:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <ili9341_Init+0x150>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <ili9341_Init+0x30>
      LCD_IO_Init();
 8000f60:	f000 fc4a 	bl	80017f8 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8000f64:	4b47      	ldr	r3, [pc, #284]	; (8001084 <ili9341_Init+0x150>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b45      	ldr	r3, [pc, #276]	; (8001084 <ili9341_Init+0x150>)
 8000f70:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 fc29 	bl	80017ca <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fd27 	bl	80019cc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f000 fc23 	bl	80017ca <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8000f84:	2203      	movs	r2, #3
 8000f86:	4940      	ldr	r1, [pc, #256]	; (8001088 <ili9341_Init+0x154>)
 8000f88:	20ef      	movs	r0, #239	; 0xef
 8000f8a:	f001 f9bb 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8000f8e:	2203      	movs	r2, #3
 8000f90:	493e      	ldr	r1, [pc, #248]	; (800108c <ili9341_Init+0x158>)
 8000f92:	20cf      	movs	r0, #207	; 0xcf
 8000f94:	f001 f9b6 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8000f98:	2204      	movs	r2, #4
 8000f9a:	493d      	ldr	r1, [pc, #244]	; (8001090 <ili9341_Init+0x15c>)
 8000f9c:	20ed      	movs	r0, #237	; 0xed
 8000f9e:	f001 f9b1 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	493b      	ldr	r1, [pc, #236]	; (8001094 <ili9341_Init+0x160>)
 8000fa6:	20e8      	movs	r0, #232	; 0xe8
 8000fa8:	f001 f9ac 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8000fac:	2205      	movs	r2, #5
 8000fae:	493a      	ldr	r1, [pc, #232]	; (8001098 <ili9341_Init+0x164>)
 8000fb0:	20cb      	movs	r0, #203	; 0xcb
 8000fb2:	f001 f9a7 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4938      	ldr	r1, [pc, #224]	; (800109c <ili9341_Init+0x168>)
 8000fba:	20f7      	movs	r0, #247	; 0xf7
 8000fbc:	f001 f9a2 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4937      	ldr	r1, [pc, #220]	; (80010a0 <ili9341_Init+0x16c>)
 8000fc4:	20ea      	movs	r0, #234	; 0xea
 8000fc6:	f001 f99d 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <ili9341_Init+0x170>)
 8000fce:	20c0      	movs	r0, #192	; 0xc0
 8000fd0:	f001 f998 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4934      	ldr	r1, [pc, #208]	; (80010a8 <ili9341_Init+0x174>)
 8000fd8:	20c1      	movs	r0, #193	; 0xc1
 8000fda:	f001 f993 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8000fde:	2202      	movs	r2, #2
 8000fe0:	4932      	ldr	r1, [pc, #200]	; (80010ac <ili9341_Init+0x178>)
 8000fe2:	20c5      	movs	r0, #197	; 0xc5
 8000fe4:	f001 f98e 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4931      	ldr	r1, [pc, #196]	; (80010b0 <ili9341_Init+0x17c>)
 8000fec:	20c7      	movs	r0, #199	; 0xc7
 8000fee:	f001 f989 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	492f      	ldr	r1, [pc, #188]	; (80010b4 <ili9341_Init+0x180>)
 8000ff6:	2037      	movs	r0, #55	; 0x37
 8000ff8:	f001 f984 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	492e      	ldr	r1, [pc, #184]	; (80010b8 <ili9341_Init+0x184>)
 8001000:	203a      	movs	r0, #58	; 0x3a
 8001002:	f001 f97f 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8001006:	2202      	movs	r2, #2
 8001008:	492c      	ldr	r1, [pc, #176]	; (80010bc <ili9341_Init+0x188>)
 800100a:	20b1      	movs	r0, #177	; 0xb1
 800100c:	f001 f97a 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8001010:	2203      	movs	r2, #3
 8001012:	492b      	ldr	r1, [pc, #172]	; (80010c0 <ili9341_Init+0x18c>)
 8001014:	20b6      	movs	r0, #182	; 0xb6
 8001016:	f001 f975 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800101a:	2201      	movs	r2, #1
 800101c:	4925      	ldr	r1, [pc, #148]	; (80010b4 <ili9341_Init+0x180>)
 800101e:	20f2      	movs	r0, #242	; 0xf2
 8001020:	f001 f970 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8001024:	2201      	movs	r2, #1
 8001026:	4927      	ldr	r1, [pc, #156]	; (80010c4 <ili9341_Init+0x190>)
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f001 f96b 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800102e:	220f      	movs	r2, #15
 8001030:	4925      	ldr	r1, [pc, #148]	; (80010c8 <ili9341_Init+0x194>)
 8001032:	20e0      	movs	r0, #224	; 0xe0
 8001034:	f001 f966 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8001038:	220f      	movs	r2, #15
 800103a:	4924      	ldr	r1, [pc, #144]	; (80010cc <ili9341_Init+0x198>)
 800103c:	20e1      	movs	r0, #225	; 0xe1
 800103e:	f001 f961 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8001042:	2036      	movs	r0, #54	; 0x36
 8001044:	f000 fcc2 	bl	80019cc <LCD_IO_WriteCmd8>
 8001048:	20e8      	movs	r0, #232	; 0xe8
 800104a:	f000 fd77 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800104e:	2011      	movs	r0, #17
 8001050:	f000 fcbc 	bl	80019cc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f000 fbb8 	bl	80017ca <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	23f0      	movs	r3, #240	; 0xf0
 8001060:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001064:	2100      	movs	r1, #0
 8001066:	2000      	movs	r0, #0
 8001068:	f000 fa2c 	bl	80014c4 <ili9341_FillRect>
  LCD_Delay(10);
 800106c:	200a      	movs	r0, #10
 800106e:	f000 fbac 	bl	80017ca <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8001072:	2029      	movs	r0, #41	; 0x29
 8001074:	f000 fcaa 	bl	80019cc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001078:	200a      	movs	r0, #10
 800107a:	f000 fba6 	bl	80017ca <LCD_Delay>
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000260 	.word	0x20000260
 8001088:	0800a6d8 	.word	0x0800a6d8
 800108c:	0800a6dc 	.word	0x0800a6dc
 8001090:	0800a6e0 	.word	0x0800a6e0
 8001094:	0800a6e8 	.word	0x0800a6e8
 8001098:	0800a6ec 	.word	0x0800a6ec
 800109c:	0800a6f4 	.word	0x0800a6f4
 80010a0:	0800a6f8 	.word	0x0800a6f8
 80010a4:	0800a6fc 	.word	0x0800a6fc
 80010a8:	0800a700 	.word	0x0800a700
 80010ac:	0800a704 	.word	0x0800a704
 80010b0:	0800a708 	.word	0x0800a708
 80010b4:	0800a70c 	.word	0x0800a70c
 80010b8:	0800a710 	.word	0x0800a710
 80010bc:	0800a714 	.word	0x0800a714
 80010c0:	0800a718 	.word	0x0800a718
 80010c4:	0800a71c 	.word	0x0800a71c
 80010c8:	0800a720 	.word	0x0800a720
 80010cc:	0800a730 	.word	0x0800a730

080010d0 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	80fb      	strh	r3, [r7, #6]
 80010dc:	4613      	mov	r3, r2
 80010de:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80010e0:	202a      	movs	r0, #42	; 0x2a
 80010e2:	f000 fc73 	bl	80019cc <LCD_IO_WriteCmd8>
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fd24 	bl	8001b3c <LCD_IO_WriteData8>
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fd1f 	bl	8001b3c <LCD_IO_WriteData8>
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b29b      	uxth	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fd18 	bl	8001b3c <LCD_IO_WriteData8>
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fd13 	bl	8001b3c <LCD_IO_WriteData8>
 8001116:	202b      	movs	r0, #43	; 0x2b
 8001118:	f000 fc58 	bl	80019cc <LCD_IO_WriteCmd8>
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fd09 	bl	8001b3c <LCD_IO_WriteData8>
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fd04 	bl	8001b3c <LCD_IO_WriteData8>
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fcfd 	bl	8001b3c <LCD_IO_WriteData8>
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fcf8 	bl	8001b3c <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	460b      	mov	r3, r1
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001166:	202a      	movs	r0, #42	; 0x2a
 8001168:	f000 fc30 	bl	80019cc <LCD_IO_WriteCmd8>
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fce1 	bl	8001b3c <LCD_IO_WriteData8>
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fcdc 	bl	8001b3c <LCD_IO_WriteData8>
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fcd5 	bl	8001b3c <LCD_IO_WriteData8>
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fcd0 	bl	8001b3c <LCD_IO_WriteData8>
 800119c:	202b      	movs	r0, #43	; 0x2b
 800119e:	f000 fc15 	bl	80019cc <LCD_IO_WriteCmd8>
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fcc6 	bl	8001b3c <LCD_IO_WriteData8>
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fcc1 	bl	8001b3c <LCD_IO_WriteData8>
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fcba 	bl	8001b3c <LCD_IO_WriteData8>
 80011c8:	88bb      	ldrh	r3, [r7, #4]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fcb5 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 80011d2:	202c      	movs	r0, #44	; 0x2c
 80011d4:	f000 fbfa 	bl	80019cc <LCD_IO_WriteCmd8>
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fd5e 	bl	8001c9c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	80fb      	strh	r3, [r7, #6]
 80011f4:	4613      	mov	r3, r2
 80011f6:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 80011f8:	2201      	movs	r2, #1
 80011fa:	4925      	ldr	r1, [pc, #148]	; (8001290 <ili9341_ReadPixel+0xa8>)
 80011fc:	203a      	movs	r0, #58	; 0x3a
 80011fe:	f001 f881 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001202:	202a      	movs	r0, #42	; 0x2a
 8001204:	f000 fbe2 	bl	80019cc <LCD_IO_WriteCmd8>
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	b29b      	uxth	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fc93 	bl	8001b3c <LCD_IO_WriteData8>
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fc8e 	bl	8001b3c <LCD_IO_WriteData8>
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fc87 	bl	8001b3c <LCD_IO_WriteData8>
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fc82 	bl	8001b3c <LCD_IO_WriteData8>
 8001238:	202b      	movs	r0, #43	; 0x2b
 800123a:	f000 fbc7 	bl	80019cc <LCD_IO_WriteCmd8>
 800123e:	88bb      	ldrh	r3, [r7, #4]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	b29b      	uxth	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fc78 	bl	8001b3c <LCD_IO_WriteData8>
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fc73 	bl	8001b3c <LCD_IO_WriteData8>
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	b29b      	uxth	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fc6c 	bl	8001b3c <LCD_IO_WriteData8>
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fc67 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 800126e:	f107 010e 	add.w	r1, r7, #14
 8001272:	2301      	movs	r3, #1
 8001274:	2201      	movs	r2, #1
 8001276:	202e      	movs	r0, #46	; 0x2e
 8001278:	f001 fd94 	bl	8002da4 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 800127c:	2201      	movs	r2, #1
 800127e:	4905      	ldr	r1, [pc, #20]	; (8001294 <ili9341_ReadPixel+0xac>)
 8001280:	203a      	movs	r0, #58	; 0x3a
 8001282:	f001 f83f 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 8001286:	89fb      	ldrh	r3, [r7, #14]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0800a740 	.word	0x0800a740
 8001294:	0800a710 	.word	0x0800a710

08001298 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4623      	mov	r3, r4
 80012a8:	80fb      	strh	r3, [r7, #6]
 80012aa:	4603      	mov	r3, r0
 80012ac:	80bb      	strh	r3, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	807b      	strh	r3, [r7, #2]
 80012b2:	4613      	mov	r3, r2
 80012b4:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80012b6:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <ili9341_SetDisplayWindow+0xc8>)
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	8013      	strh	r3, [r2, #0]
 80012bc:	88ba      	ldrh	r2, [r7, #4]
 80012be:	883b      	ldrh	r3, [r7, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <ili9341_SetDisplayWindow+0xcc>)
 80012ca:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80012cc:	202a      	movs	r0, #42	; 0x2a
 80012ce:	f000 fb7d 	bl	80019cc <LCD_IO_WriteCmd8>
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fc2e 	bl	8001b3c <LCD_IO_WriteData8>
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fc29 	bl	8001b3c <LCD_IO_WriteData8>
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4413      	add	r3, r2
 80012f0:	3b01      	subs	r3, #1
 80012f2:	121b      	asrs	r3, r3, #8
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fc20 	bl	8001b3c <LCD_IO_WriteData8>
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3b01      	subs	r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fc15 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001312:	202b      	movs	r0, #43	; 0x2b
 8001314:	f000 fb5a 	bl	80019cc <LCD_IO_WriteCmd8>
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29b      	uxth	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fc0b 	bl	8001b3c <LCD_IO_WriteData8>
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fc06 	bl	8001b3c <LCD_IO_WriteData8>
 8001330:	88ba      	ldrh	r2, [r7, #4]
 8001332:	883b      	ldrh	r3, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	3b01      	subs	r3, #1
 8001338:	121b      	asrs	r3, r3, #8
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fbfd 	bl	8001b3c <LCD_IO_WriteData8>
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	883b      	ldrh	r3, [r7, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4413      	add	r3, r2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fbf2 	bl	8001b3c <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	20000262 	.word	0x20000262
 8001364:	20000264 	.word	0x20000264

08001368 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4604      	mov	r4, r0
 8001370:	4608      	mov	r0, r1
 8001372:	4611      	mov	r1, r2
 8001374:	461a      	mov	r2, r3
 8001376:	4623      	mov	r3, r4
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	4603      	mov	r3, r0
 800137c:	80bb      	strh	r3, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	807b      	strh	r3, [r7, #2]
 8001382:	4613      	mov	r3, r2
 8001384:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8001386:	202a      	movs	r0, #42	; 0x2a
 8001388:	f000 fb20 	bl	80019cc <LCD_IO_WriteCmd8>
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b29b      	uxth	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fbd1 	bl	8001b3c <LCD_IO_WriteData8>
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fbcc 	bl	8001b3c <LCD_IO_WriteData8>
 80013a4:	88ba      	ldrh	r2, [r7, #4]
 80013a6:	883b      	ldrh	r3, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	3b01      	subs	r3, #1
 80013ac:	121b      	asrs	r3, r3, #8
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fbc3 	bl	8001b3c <LCD_IO_WriteData8>
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	883b      	ldrh	r3, [r7, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fbb8 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 80013cc:	202b      	movs	r0, #43	; 0x2b
 80013ce:	f000 fafd 	bl	80019cc <LCD_IO_WriteCmd8>
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fbae 	bl	8001b3c <LCD_IO_WriteData8>
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fba9 	bl	8001b3c <LCD_IO_WriteData8>
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fba2 	bl	8001b3c <LCD_IO_WriteData8>
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fb9d 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8001402:	883a      	ldrh	r2, [r7, #0]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	4619      	mov	r1, r3
 8001408:	202c      	movs	r0, #44	; 0x2c
 800140a:	f000 fd87 	bl	8001f1c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}

08001416 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	4604      	mov	r4, r0
 800141e:	4608      	mov	r0, r1
 8001420:	4611      	mov	r1, r2
 8001422:	461a      	mov	r2, r3
 8001424:	4623      	mov	r3, r4
 8001426:	80fb      	strh	r3, [r7, #6]
 8001428:	4603      	mov	r3, r0
 800142a:	80bb      	strh	r3, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8001434:	202a      	movs	r0, #42	; 0x2a
 8001436:	f000 fac9 	bl	80019cc <LCD_IO_WriteCmd8>
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	b29b      	uxth	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fb7a 	bl	8001b3c <LCD_IO_WriteData8>
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fb75 	bl	8001b3c <LCD_IO_WriteData8>
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fb6e 	bl	8001b3c <LCD_IO_WriteData8>
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fb69 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 800146a:	202b      	movs	r0, #43	; 0x2b
 800146c:	f000 faae 	bl	80019cc <LCD_IO_WriteCmd8>
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fb5f 	bl	8001b3c <LCD_IO_WriteData8>
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fb5a 	bl	8001b3c <LCD_IO_WriteData8>
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	883b      	ldrh	r3, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	3b01      	subs	r3, #1
 8001490:	121b      	asrs	r3, r3, #8
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fb51 	bl	8001b3c <LCD_IO_WriteData8>
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	883b      	ldrh	r3, [r7, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fb46 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 80014b0:	883a      	ldrh	r2, [r7, #0]
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	4619      	mov	r1, r3
 80014b6:	202c      	movs	r0, #44	; 0x2c
 80014b8:	f000 fd30 	bl	8001f1c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}

080014c4 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4623      	mov	r3, r4
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4603      	mov	r3, r0
 80014d8:	80bb      	strh	r3, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	807b      	strh	r3, [r7, #2]
 80014de:	4613      	mov	r3, r2
 80014e0:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80014e2:	202a      	movs	r0, #42	; 0x2a
 80014e4:	f000 fa72 	bl	80019cc <LCD_IO_WriteCmd8>
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fb23 	bl	8001b3c <LCD_IO_WriteData8>
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fb1e 	bl	8001b3c <LCD_IO_WriteData8>
 8001500:	88fa      	ldrh	r2, [r7, #6]
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	4413      	add	r3, r2
 8001506:	3b01      	subs	r3, #1
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fb15 	bl	8001b3c <LCD_IO_WriteData8>
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4413      	add	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	3b01      	subs	r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fb0a 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8001528:	202b      	movs	r0, #43	; 0x2b
 800152a:	f000 fa4f 	bl	80019cc <LCD_IO_WriteCmd8>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fb00 	bl	8001b3c <LCD_IO_WriteData8>
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fafb 	bl	8001b3c <LCD_IO_WriteData8>
 8001546:	88ba      	ldrh	r2, [r7, #4]
 8001548:	883b      	ldrh	r3, [r7, #0]
 800154a:	4413      	add	r3, r2
 800154c:	3b01      	subs	r3, #1
 800154e:	121b      	asrs	r3, r3, #8
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 faf2 	bl	8001b3c <LCD_IO_WriteData8>
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	883b      	ldrh	r3, [r7, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3b01      	subs	r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fae7 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	883a      	ldrh	r2, [r7, #0]
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	461a      	mov	r2, r3
 8001578:	8b3b      	ldrh	r3, [r7, #24]
 800157a:	4619      	mov	r1, r3
 800157c:	202c      	movs	r0, #44	; 0x2c
 800157e:	f000 fccd 	bl	8001f1c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
	...

0800158c <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	603a      	str	r2, [r7, #0]
 8001596:	80fb      	strh	r3, [r7, #6]
 8001598:	460b      	mov	r3, r1
 800159a:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80015a2:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80015aa:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 80015be:	2036      	movs	r0, #54	; 0x36
 80015c0:	f000 fa04 	bl	80019cc <LCD_IO_WriteCmd8>
 80015c4:	20a8      	movs	r0, #168	; 0xa8
 80015c6:	f000 fab9 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 80015ca:	202b      	movs	r0, #43	; 0x2b
 80015cc:	f000 f9fe 	bl	80019cc <LCD_IO_WriteCmd8>
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <ili9341_DrawBitmap+0xb0>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80015d8:	121b      	asrs	r3, r3, #8
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 faad 	bl	8001b3c <LCD_IO_WriteData8>
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <ili9341_DrawBitmap+0xb0>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	f06f 0310 	mvn.w	r3, #16
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 faa3 	bl	8001b3c <LCD_IO_WriteData8>
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <ili9341_DrawBitmap+0xb4>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80015fe:	121b      	asrs	r3, r3, #8
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fa9a 	bl	8001b3c <LCD_IO_WriteData8>
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <ili9341_DrawBitmap+0xb4>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	f06f 0310 	mvn.w	r3, #16
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fa90 	bl	8001b3c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	202c      	movs	r0, #44	; 0x2c
 8001622:	f000 ffbf 	bl	80025a4 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8001626:	2036      	movs	r0, #54	; 0x36
 8001628:	f000 f9d0 	bl	80019cc <LCD_IO_WriteCmd8>
 800162c:	20e8      	movs	r0, #232	; 0xe8
 800162e:	f000 fa85 	bl	8001b3c <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000264 	.word	0x20000264
 8001640:	20000262 	.word	0x20000262

08001644 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	4603      	mov	r3, r0
 8001658:	80bb      	strh	r3, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	807b      	strh	r3, [r7, #2]
 800165e:	4613      	mov	r3, r2
 8001660:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8001662:	883b      	ldrh	r3, [r7, #0]
 8001664:	887a      	ldrh	r2, [r7, #2]
 8001666:	88b9      	ldrh	r1, [r7, #4]
 8001668:	88f8      	ldrh	r0, [r7, #6]
 800166a:	f7ff fe15 	bl	8001298 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	883a      	ldrh	r2, [r7, #0]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	461a      	mov	r2, r3
 8001678:	69b9      	ldr	r1, [r7, #24]
 800167a:	202c      	movs	r0, #44	; 0x2c
 800167c:	f000 ff92 	bl	80025a4 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4623      	mov	r3, r4
 8001698:	80fb      	strh	r3, [r7, #6]
 800169a:	4603      	mov	r3, r0
 800169c:	80bb      	strh	r3, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	807b      	strh	r3, [r7, #2]
 80016a2:	4613      	mov	r3, r2
 80016a4:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80016a6:	883b      	ldrh	r3, [r7, #0]
 80016a8:	887a      	ldrh	r2, [r7, #2]
 80016aa:	88b9      	ldrh	r1, [r7, #4]
 80016ac:	88f8      	ldrh	r0, [r7, #6]
 80016ae:	f7ff fdf3 	bl	8001298 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 80016b2:	2201      	movs	r2, #1
 80016b4:	490b      	ldr	r1, [pc, #44]	; (80016e4 <ili9341_ReadRGBImage+0x5c>)
 80016b6:	203a      	movs	r0, #58	; 0x3a
 80016b8:	f000 fe24 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	883a      	ldrh	r2, [r7, #0]
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	2301      	movs	r3, #1
 80016c8:	69b9      	ldr	r1, [r7, #24]
 80016ca:	202e      	movs	r0, #46	; 0x2e
 80016cc:	f001 fb6a 	bl	8002da4 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 80016d0:	2201      	movs	r2, #1
 80016d2:	4905      	ldr	r1, [pc, #20]	; (80016e8 <ili9341_ReadRGBImage+0x60>)
 80016d4:	203a      	movs	r0, #58	; 0x3a
 80016d6:	f000 fe15 	bl	8002304 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	0800a740 	.word	0x0800a740
 80016e8:	0800a710 	.word	0x0800a710

080016ec <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
 80016f6:	460b      	mov	r3, r1
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <ili9341_Scroll+0xb4>)
 8001700:	88db      	ldrh	r3, [r3, #6]
 8001702:	88ba      	ldrh	r2, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	d104      	bne.n	8001712 <ili9341_Scroll+0x26>
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <ili9341_Scroll+0xb4>)
 800170a:	885b      	ldrh	r3, [r3, #2]
 800170c:	887a      	ldrh	r2, [r7, #2]
 800170e:	429a      	cmp	r2, r3
 8001710:	d013      	beq.n	800173a <ili9341_Scroll+0x4e>
  {
    scrparam[3] = TopFix;
 8001712:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <ili9341_Scroll+0xb4>)
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	80d3      	strh	r3, [r2, #6]
    scrparam[1] = BottonFix;
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <ili9341_Scroll+0xb4>)
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	8053      	strh	r3, [r2, #2]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 800171e:	88ba      	ldrh	r2, [r7, #4]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <ili9341_Scroll+0xb4>)
 800172e:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 8001730:	2203      	movs	r2, #3
 8001732:	491c      	ldr	r1, [pc, #112]	; (80017a4 <ili9341_Scroll+0xb8>)
 8001734:	2033      	movs	r0, #51	; 0x33
 8001736:	f000 ff35 	bl	80025a4 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 800173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <ili9341_Scroll+0xb4>)
 8001740:	8892      	ldrh	r2, [r2, #4]
 8001742:	fb93 f1f2 	sdiv	r1, r3, r2
 8001746:	fb01 f202 	mul.w	r2, r1, r2
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	2b00      	cmp	r3, #0
 8001754:	da0a      	bge.n	800176c <ili9341_Scroll+0x80>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <ili9341_Scroll+0xb4>)
 8001758:	889a      	ldrh	r2, [r3, #4]
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4413      	add	r3, r2
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <ili9341_Scroll+0xb4>)
 8001762:	885b      	ldrh	r3, [r3, #2]
 8001764:	4413      	add	r3, r2
 8001766:	b29b      	uxth	r3, r3
 8001768:	80fb      	strh	r3, [r7, #6]
 800176a:	e005      	b.n	8001778 <ili9341_Scroll+0x8c>
  else
    Scroll = Scroll + scrparam[1];
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <ili9341_Scroll+0xb4>)
 800176e:	885a      	ldrh	r2, [r3, #2]
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	4413      	add	r3, r2
 8001774:	b29b      	uxth	r3, r3
 8001776:	80fb      	strh	r3, [r7, #6]
  #endif
  if(Scroll != scrparam[0])
 8001778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177c:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <ili9341_Scroll+0xb4>)
 800177e:	8812      	ldrh	r2, [r2, #0]
 8001780:	4293      	cmp	r3, r2
 8001782:	d009      	beq.n	8001798 <ili9341_Scroll+0xac>
  {
    scrparam[0] = Scroll;
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <ili9341_Scroll+0xb4>)
 8001788:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <ili9341_Scroll+0xb4>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2201      	movs	r2, #1
 8001790:	4619      	mov	r1, r3
 8001792:	2037      	movs	r0, #55	; 0x37
 8001794:	f000 fbc2 	bl	8001f1c <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000268 	.word	0x20000268
 80017a4:	2000026a 	.word	0x2000026a

080017a8 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  while(c--);
 80017b0:	bf00      	nop
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1fa      	bne.n	80017b2 <LCD_IO_Delay+0xa>
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f003 fb06 	bl	8004de4 <HAL_Delay>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB1ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 80017fc:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <LCD_IO_Init+0x1b0>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a69      	ldr	r2, [pc, #420]	; (80019a8 <LCD_IO_Init+0x1b0>)
 8001802:	f043 0307 	orr.w	r3, r3, #7
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          // RST = 1
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <LCD_IO_Init+0x1b4>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 800180e:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <LCD_IO_Init+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 030c 	bic.w	r3, r3, #12
 8001816:	4a66      	ldr	r2, [pc, #408]	; (80019b0 <LCD_IO_Init+0x1b8>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_ODR(LCD_CS) = 1;                /* CS = 1 */
 800181e:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <LCD_IO_Init+0x1bc>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]
  LCD_RS_DATA;                          /* RS = 1 */
 8001824:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <LCD_IO_Init+0x1c0>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_WR) = 1;                /* WR = 1 */
 800182a:	4b64      	ldr	r3, [pc, #400]	; (80019bc <LCD_IO_Init+0x1c4>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_RD) = 1;                /* RD = 1 */
 8001830:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <LCD_IO_Init+0x1c8>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0303 	bic.w	r3, r3, #3
 800183e:	4a61      	ldr	r2, [pc, #388]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8001846:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 030c 	bic.w	r3, r3, #12
 800185e:	4a5a      	ldr	r2, [pc, #360]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800187e:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <LCD_IO_Init+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800188e:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <LCD_IO_Init+0x1b8>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800189e:	4a4a      	ldr	r2, [pc, #296]	; (80019c8 <LCD_IO_Init+0x1d0>)
 80018a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018ae:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80018be:	4a41      	ldr	r2, [pc, #260]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ce:	4a3d      	ldr	r2, [pc, #244]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018de:	4a39      	ldr	r2, [pc, #228]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <LCD_IO_Init+0x1d0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018ee:	4a36      	ldr	r2, [pc, #216]	; (80019c8 <LCD_IO_Init+0x1d0>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <LCD_IO_Init+0x1cc>)
 80018fc:	f043 0303 	orr.w	r3, r3, #3
 8001900:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001908:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800190c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a2d      	ldr	r2, [pc, #180]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001914:	f043 030c 	orr.w	r3, r3, #12
 8001918:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <LCD_IO_Init+0x1d0>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001920:	f043 0303 	orr.w	r3, r3, #3
 8001924:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8001926:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <LCD_IO_Init+0x1d0>)
 800192c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001930:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <LCD_IO_Init+0x1b8>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <LCD_IO_Init+0x1b8>)
 8001938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001944:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001948:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <LCD_IO_Init+0x1cc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001950:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001954:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <LCD_IO_Init+0x1cc>)
 800195c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001960:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001968:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800196c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <LCD_IO_Init+0x1cc>)
 8001974:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001978:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <LCD_IO_Init+0x1d0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <LCD_IO_Init+0x1d0>)
 8001980:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001984:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f7ff ff1f 	bl	80017ca <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <LCD_IO_Init+0x1b4>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff ff19 	bl	80017ca <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <LCD_IO_Init+0x1b4>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff ff13 	bl	80017ca <LCD_Delay>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42410284 	.word	0x42410284
 80019b0:	40020800 	.word	0x40020800
 80019b4:	42408280 	.word	0x42408280
 80019b8:	42400290 	.word	0x42400290
 80019bc:	42400284 	.word	0x42400284
 80019c0:	42400280 	.word	0x42400280
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020000 	.word	0x40020000

080019cc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80019d6:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <LCD_IO_WriteCmd8+0x140>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <LCD_IO_WriteCmd8+0x144>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	7013      	strb	r3, [r2, #0]
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 80019ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80019ee:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 80019f0:	015b      	lsls	r3, r3, #5
 80019f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80019f6:	f023 031f 	bic.w	r3, r3, #31
 80019fa:	4313      	orrs	r3, r2
 80019fc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001a00:	4a45      	ldr	r2, [pc, #276]	; (8001b18 <LCD_IO_WriteCmd8+0x14c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a08:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001a14:	f023 031f 	bic.w	r3, r3, #31
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <LCD_IO_WriteCmd8+0x150>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a28:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a2e:	015b      	lsls	r3, r3, #5
 8001a30:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001a34:	f023 031f 	bic.w	r3, r3, #31
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	3308      	adds	r3, #8
 8001a40:	4a37      	ldr	r2, [pc, #220]	; (8001b20 <LCD_IO_WriteCmd8+0x154>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a48:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a4e:	015b      	lsls	r3, r3, #5
 8001a50:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001a54:	f023 031f 	bic.w	r3, r3, #31
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	330c      	adds	r3, #12
 8001a60:	4a30      	ldr	r2, [pc, #192]	; (8001b24 <LCD_IO_WriteCmd8+0x158>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a68:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001a74:	f023 031f 	bic.w	r3, r3, #31
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	3310      	adds	r3, #16
 8001a80:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <LCD_IO_WriteCmd8+0x15c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a88:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001a8e:	015b      	lsls	r3, r3, #5
 8001a90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001a94:	f023 031f 	bic.w	r3, r3, #31
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <LCD_IO_WriteCmd8+0x160>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001aa8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001aae:	015b      	lsls	r3, r3, #5
 8001ab0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001ab4:	f023 031f 	bic.w	r3, r3, #31
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001abe:	3318      	adds	r3, #24
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <LCD_IO_WriteCmd8+0x164>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001ac8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <LCD_IO_WriteCmd8+0x148>)
 8001ace:	015b      	lsls	r3, r3, #5
 8001ad0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001ad4:	f023 031f 	bic.w	r3, r3, #31
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ade:	331c      	adds	r3, #28
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <LCD_IO_WriteCmd8+0x168>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <LCD_IO_WriteCmd8+0x16c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	2008      	movs	r0, #8
 8001aee:	f7ff fe5b 	bl	80017a8 <LCD_IO_Delay>
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <LCD_IO_WriteCmd8+0x16c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <LCD_IO_WriteCmd8+0x144>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001afe:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <LCD_IO_WriteCmd8+0x140>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	42408280 	.word	0x42408280
 8001b10:	42400290 	.word	0x42400290
 8001b14:	20000270 	.word	0x20000270
 8001b18:	424002a4 	.word	0x424002a4
 8001b1c:	4241029c 	.word	0x4241029c
 8001b20:	424002a8 	.word	0x424002a8
 8001b24:	4240828c 	.word	0x4240828c
 8001b28:	42408294 	.word	0x42408294
 8001b2c:	42408290 	.word	0x42408290
 8001b30:	424082a8 	.word	0x424082a8
 8001b34:	424002a0 	.word	0x424002a0
 8001b38:	42400284 	.word	0x42400284

08001b3c <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <LCD_IO_WriteData8+0x134>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
  LCD_DATA8_WRITE(Data);
 8001b4c:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	7013      	strb	r3, [r2, #0]
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001b54:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001b5a:	015b      	lsls	r3, r3, #5
 8001b5c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001b60:	f023 031f 	bic.w	r3, r3, #31
 8001b64:	4313      	orrs	r3, r2
 8001b66:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	4a43      	ldr	r2, [pc, #268]	; (8001c78 <LCD_IO_WriteData8+0x13c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001b72:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001b78:	015b      	lsls	r3, r3, #5
 8001b7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001b7e:	f023 031f 	bic.w	r3, r3, #31
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4a3c      	ldr	r2, [pc, #240]	; (8001c7c <LCD_IO_WriteData8+0x140>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001b92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001b98:	015b      	lsls	r3, r3, #5
 8001b9a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001b9e:	f023 031f 	bic.w	r3, r3, #31
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	3308      	adds	r3, #8
 8001baa:	4a35      	ldr	r2, [pc, #212]	; (8001c80 <LCD_IO_WriteData8+0x144>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001bb2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001bbe:	f023 031f 	bic.w	r3, r3, #31
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	330c      	adds	r3, #12
 8001bca:	4a2e      	ldr	r2, [pc, #184]	; (8001c84 <LCD_IO_WriteData8+0x148>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001bd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001bd6:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001bd8:	015b      	lsls	r3, r3, #5
 8001bda:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001bde:	f023 031f 	bic.w	r3, r3, #31
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001be8:	3310      	adds	r3, #16
 8001bea:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <LCD_IO_WriteData8+0x14c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001bf2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001bfe:	f023 031f 	bic.w	r3, r3, #31
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001c08:	3314      	adds	r3, #20
 8001c0a:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <LCD_IO_WriteData8+0x150>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001c12:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001c18:	015b      	lsls	r3, r3, #5
 8001c1a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001c1e:	f023 031f 	bic.w	r3, r3, #31
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001c28:	3318      	adds	r3, #24
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <LCD_IO_WriteData8+0x154>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001c32:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <LCD_IO_WriteData8+0x138>)
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001c3e:	f023 031f 	bic.w	r3, r3, #31
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001c48:	331c      	adds	r3, #28
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <LCD_IO_WriteData8+0x158>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <LCD_IO_WriteData8+0x15c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	2008      	movs	r0, #8
 8001c58:	f7ff fda6 	bl	80017a8 <LCD_IO_Delay>
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <LCD_IO_WriteData8+0x15c>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <LCD_IO_WriteData8+0x134>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	42408280 	.word	0x42408280
 8001c74:	20000270 	.word	0x20000270
 8001c78:	424002a4 	.word	0x424002a4
 8001c7c:	4241029c 	.word	0x4241029c
 8001c80:	424002a8 	.word	0x424002a8
 8001c84:	4240828c 	.word	0x4240828c
 8001c88:	42408294 	.word	0x42408294
 8001c8c:	42408290 	.word	0x42408290
 8001c90:	424082a8 	.word	0x424082a8
 8001c94:	424002a0 	.word	0x424002a0
 8001c98:	42400284 	.word	0x42400284

08001c9c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 8001ca6:	4b92      	ldr	r3, [pc, #584]	; (8001ef0 <LCD_IO_WriteData16+0x254>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
  LCD_DATA16_WRITE(Data);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	4b8e      	ldr	r3, [pc, #568]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001cba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001cbe:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001cc0:	015b      	lsls	r3, r3, #5
 8001cc2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001cc6:	f023 031f 	bic.w	r3, r3, #31
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	4a89      	ldr	r2, [pc, #548]	; (8001ef8 <LCD_IO_WriteData16+0x25c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b87      	ldr	r3, [pc, #540]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001cd8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001cdc:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001cde:	015b      	lsls	r3, r3, #5
 8001ce0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001ce4:	f023 031f 	bic.w	r3, r3, #31
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4a82      	ldr	r2, [pc, #520]	; (8001efc <LCD_IO_WriteData16+0x260>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001cf8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001cfc:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001cfe:	015b      	lsls	r3, r3, #5
 8001d00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001d04:	f023 031f 	bic.w	r3, r3, #31
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	3308      	adds	r3, #8
 8001d10:	4a7b      	ldr	r2, [pc, #492]	; (8001f00 <LCD_IO_WriteData16+0x264>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b77      	ldr	r3, [pc, #476]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d18:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001d1c:	4b75      	ldr	r3, [pc, #468]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001d24:	f023 031f 	bic.w	r3, r3, #31
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	330c      	adds	r3, #12
 8001d30:	4a74      	ldr	r2, [pc, #464]	; (8001f04 <LCD_IO_WriteData16+0x268>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d38:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001d3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d3e:	015b      	lsls	r3, r3, #5
 8001d40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001d44:	f023 031f 	bic.w	r3, r3, #31
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	3310      	adds	r3, #16
 8001d50:	4a6d      	ldr	r2, [pc, #436]	; (8001f08 <LCD_IO_WriteData16+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d58:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001d5c:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d5e:	015b      	lsls	r3, r3, #5
 8001d60:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001d64:	f023 031f 	bic.w	r3, r3, #31
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	3314      	adds	r3, #20
 8001d70:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <LCD_IO_WriteData16+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001d7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d7e:	015b      	lsls	r3, r3, #5
 8001d80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001d84:	f023 031f 	bic.w	r3, r3, #31
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	3318      	adds	r3, #24
 8001d90:	4a5f      	ldr	r2, [pc, #380]	; (8001f10 <LCD_IO_WriteData16+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d98:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001da4:	f023 031f 	bic.w	r3, r3, #31
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001dae:	331c      	adds	r3, #28
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <LCD_IO_WriteData16+0x278>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <LCD_IO_WriteData16+0x27c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	2008      	movs	r0, #8
 8001dbe:	f7ff fcf3 	bl	80017a8 <LCD_IO_Delay>
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <LCD_IO_WriteData16+0x27c>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001dd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001dd8:	015b      	lsls	r3, r3, #5
 8001dda:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001dde:	f023 031f 	bic.w	r3, r3, #31
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001de8:	4a43      	ldr	r2, [pc, #268]	; (8001ef8 <LCD_IO_WriteData16+0x25c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001df0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001df6:	015b      	lsls	r3, r3, #5
 8001df8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001dfc:	f023 031f 	bic.w	r3, r3, #31
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e06:	3304      	adds	r3, #4
 8001e08:	4a3c      	ldr	r2, [pc, #240]	; (8001efc <LCD_IO_WriteData16+0x260>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e10:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e14:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e16:	015b      	lsls	r3, r3, #5
 8001e18:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e1c:	f023 031f 	bic.w	r3, r3, #31
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e26:	3308      	adds	r3, #8
 8001e28:	4a35      	ldr	r2, [pc, #212]	; (8001f00 <LCD_IO_WriteData16+0x264>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e30:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e3c:	f023 031f 	bic.w	r3, r3, #31
 8001e40:	4313      	orrs	r3, r2
 8001e42:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e46:	330c      	adds	r3, #12
 8001e48:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <LCD_IO_WriteData16+0x268>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e50:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e56:	015b      	lsls	r3, r3, #5
 8001e58:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e5c:	f023 031f 	bic.w	r3, r3, #31
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e66:	3310      	adds	r3, #16
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <LCD_IO_WriteData16+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e70:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e7c:	f023 031f 	bic.w	r3, r3, #31
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e86:	3314      	adds	r3, #20
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <LCD_IO_WriteData16+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e9c:	f023 031f 	bic.w	r3, r3, #31
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <LCD_IO_WriteData16+0x274>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001eb0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <LCD_IO_WriteData16+0x258>)
 8001eb6:	015b      	lsls	r3, r3, #5
 8001eb8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001ebc:	f023 031f 	bic.w	r3, r3, #31
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	331c      	adds	r3, #28
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <LCD_IO_WriteData16+0x278>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <LCD_IO_WriteData16+0x27c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	2008      	movs	r0, #8
 8001ed6:	f7ff fc67 	bl	80017a8 <LCD_IO_Delay>
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <LCD_IO_WriteData16+0x27c>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <LCD_IO_WriteData16+0x254>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	42408280 	.word	0x42408280
 8001ef4:	20000270 	.word	0x20000270
 8001ef8:	424002a4 	.word	0x424002a4
 8001efc:	4241029c 	.word	0x4241029c
 8001f00:	424002a8 	.word	0x424002a8
 8001f04:	4240828c 	.word	0x4240828c
 8001f08:	42408294 	.word	0x42408294
 8001f0c:	42408290 	.word	0x42408290
 8001f10:	424082a8 	.word	0x424082a8
 8001f14:	424002a0 	.word	0x424002a0
 8001f18:	42400284 	.word	0x42400284

08001f1c <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	603a      	str	r2, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001f2c:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <LCD_IO_WriteCmd8DataFill16+0x13c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <LCD_IO_WriteCmd8DataFill16+0x140>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	4a49      	ldr	r2, [pc, #292]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	7013      	strb	r3, [r2, #0]
 8001f3e:	4b48      	ldr	r3, [pc, #288]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f40:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001f4c:	f023 031f 	bic.w	r3, r3, #31
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f56:	4a43      	ldr	r2, [pc, #268]	; (8002064 <LCD_IO_WriteCmd8DataFill16+0x148>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f5e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001f6a:	f023 031f 	bic.w	r3, r3, #31
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f74:	3304      	adds	r3, #4
 8001f76:	4a3c      	ldr	r2, [pc, #240]	; (8002068 <LCD_IO_WriteCmd8DataFill16+0x14c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b38      	ldr	r3, [pc, #224]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f7e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f84:	015b      	lsls	r3, r3, #5
 8001f86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001f8a:	f023 031f 	bic.w	r3, r3, #31
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f94:	3308      	adds	r3, #8
 8001f96:	4a35      	ldr	r2, [pc, #212]	; (800206c <LCD_IO_WriteCmd8DataFill16+0x150>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001f9e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001fa4:	015b      	lsls	r3, r3, #5
 8001fa6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001faa:	f023 031f 	bic.w	r3, r3, #31
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <LCD_IO_WriteCmd8DataFill16+0x154>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001fbe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001fca:	f023 031f 	bic.w	r3, r3, #31
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	4a27      	ldr	r2, [pc, #156]	; (8002074 <LCD_IO_WriteCmd8DataFill16+0x158>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001fde:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001fe4:	015b      	lsls	r3, r3, #5
 8001fe6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001fea:	f023 031f 	bic.w	r3, r3, #31
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	3314      	adds	r3, #20
 8001ff6:	4a20      	ldr	r2, [pc, #128]	; (8002078 <LCD_IO_WriteCmd8DataFill16+0x15c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8001ffe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8002004:	015b      	lsls	r3, r3, #5
 8002006:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800200a:	f023 031f 	bic.w	r3, r3, #31
 800200e:	4313      	orrs	r3, r2
 8002010:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002014:	3318      	adds	r3, #24
 8002016:	4a19      	ldr	r2, [pc, #100]	; (800207c <LCD_IO_WriteCmd8DataFill16+0x160>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 800201e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <LCD_IO_WriteCmd8DataFill16+0x144>)
 8002024:	015b      	lsls	r3, r3, #5
 8002026:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800202a:	f023 031f 	bic.w	r3, r3, #31
 800202e:	4313      	orrs	r3, r2
 8002030:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002034:	331c      	adds	r3, #28
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <LCD_IO_WriteCmd8DataFill16+0x164>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <LCD_IO_WriteCmd8DataFill16+0x168>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	2008      	movs	r0, #8
 8002044:	f7ff fbb0 	bl	80017a8 <LCD_IO_Delay>
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <LCD_IO_WriteCmd8DataFill16+0x168>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <LCD_IO_WriteCmd8DataFill16+0x140>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
  while(Size--)
 8002054:	e132      	b.n	80022bc <LCD_IO_WriteCmd8DataFill16+0x3a0>
 8002056:	bf00      	nop
 8002058:	42408280 	.word	0x42408280
 800205c:	42400290 	.word	0x42400290
 8002060:	20000270 	.word	0x20000270
 8002064:	424002a4 	.word	0x424002a4
 8002068:	4241029c 	.word	0x4241029c
 800206c:	424002a8 	.word	0x424002a8
 8002070:	4240828c 	.word	0x4240828c
 8002074:	42408294 	.word	0x42408294
 8002078:	42408290 	.word	0x42408290
 800207c:	424082a8 	.word	0x424082a8
 8002080:	424002a0 	.word	0x424002a0
 8002084:	42400284 	.word	0x42400284
  {
    LCD_DATA16_WRITE(Data);
 8002088:	88bb      	ldrh	r3, [r7, #4]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	b29b      	uxth	r3, r3
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002096:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800209a:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800209c:	015b      	lsls	r3, r3, #5
 800209e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80020a2:	f023 031f 	bic.w	r3, r3, #31
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80020ac:	4a8b      	ldr	r2, [pc, #556]	; (80022dc <LCD_IO_WriteCmd8DataFill16+0x3c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80020b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80020b8:	4b87      	ldr	r3, [pc, #540]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80020c0:	f023 031f 	bic.w	r3, r3, #31
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80020ca:	3304      	adds	r3, #4
 80020cc:	4a84      	ldr	r2, [pc, #528]	; (80022e0 <LCD_IO_WriteCmd8DataFill16+0x3c4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b81      	ldr	r3, [pc, #516]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80020d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80020d8:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80020da:	015b      	lsls	r3, r3, #5
 80020dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80020e0:	f023 031f 	bic.w	r3, r3, #31
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80020ea:	3308      	adds	r3, #8
 80020ec:	4a7d      	ldr	r2, [pc, #500]	; (80022e4 <LCD_IO_WriteCmd8DataFill16+0x3c8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80020f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80020f8:	4b77      	ldr	r3, [pc, #476]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80020fa:	015b      	lsls	r3, r3, #5
 80020fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002100:	f023 031f 	bic.w	r3, r3, #31
 8002104:	4313      	orrs	r3, r2
 8002106:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800210a:	330c      	adds	r3, #12
 800210c:	4a76      	ldr	r2, [pc, #472]	; (80022e8 <LCD_IO_WriteCmd8DataFill16+0x3cc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b71      	ldr	r3, [pc, #452]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002114:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800211a:	015b      	lsls	r3, r3, #5
 800211c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002120:	f023 031f 	bic.w	r3, r3, #31
 8002124:	4313      	orrs	r3, r2
 8002126:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800212a:	3310      	adds	r3, #16
 800212c:	4a6f      	ldr	r2, [pc, #444]	; (80022ec <LCD_IO_WriteCmd8DataFill16+0x3d0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002134:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002138:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002140:	f023 031f 	bic.w	r3, r3, #31
 8002144:	4313      	orrs	r3, r2
 8002146:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800214a:	3314      	adds	r3, #20
 800214c:	4a68      	ldr	r2, [pc, #416]	; (80022f0 <LCD_IO_WriteCmd8DataFill16+0x3d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002154:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002158:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002160:	f023 031f 	bic.w	r3, r3, #31
 8002164:	4313      	orrs	r3, r2
 8002166:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800216a:	3318      	adds	r3, #24
 800216c:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <LCD_IO_WriteCmd8DataFill16+0x3d8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002174:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002180:	f023 031f 	bic.w	r3, r3, #31
 8002184:	4313      	orrs	r3, r2
 8002186:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800218a:	331c      	adds	r3, #28
 800218c:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <LCD_IO_WriteCmd8DataFill16+0x3dc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <LCD_IO_WriteCmd8DataFill16+0x3e0>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	2008      	movs	r0, #8
 800219a:	f7ff fb05 	bl	80017a8 <LCD_IO_Delay>
 800219e:	4b57      	ldr	r3, [pc, #348]	; (80022fc <LCD_IO_WriteCmd8DataFill16+0x3e0>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	88bb      	ldrh	r3, [r7, #4]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b4b      	ldr	r3, [pc, #300]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80021ae:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80021b4:	015b      	lsls	r3, r3, #5
 80021b6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80021ba:	f023 031f 	bic.w	r3, r3, #31
 80021be:	4313      	orrs	r3, r2
 80021c0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80021c4:	4a45      	ldr	r2, [pc, #276]	; (80022dc <LCD_IO_WriteCmd8DataFill16+0x3c0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80021cc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80021d0:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80021d2:	015b      	lsls	r3, r3, #5
 80021d4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80021d8:	f023 031f 	bic.w	r3, r3, #31
 80021dc:	4313      	orrs	r3, r2
 80021de:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80021e2:	3304      	adds	r3, #4
 80021e4:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <LCD_IO_WriteCmd8DataFill16+0x3c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80021ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80021f8:	f023 031f 	bic.w	r3, r3, #31
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002202:	3308      	adds	r3, #8
 8002204:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <LCD_IO_WriteCmd8DataFill16+0x3c8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800220c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002212:	015b      	lsls	r3, r3, #5
 8002214:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002218:	f023 031f 	bic.w	r3, r3, #31
 800221c:	4313      	orrs	r3, r2
 800221e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002222:	330c      	adds	r3, #12
 8002224:	4a30      	ldr	r2, [pc, #192]	; (80022e8 <LCD_IO_WriteCmd8DataFill16+0x3cc>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800222c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002232:	015b      	lsls	r3, r3, #5
 8002234:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002238:	f023 031f 	bic.w	r3, r3, #31
 800223c:	4313      	orrs	r3, r2
 800223e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002242:	3310      	adds	r3, #16
 8002244:	4a29      	ldr	r2, [pc, #164]	; (80022ec <LCD_IO_WriteCmd8DataFill16+0x3d0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800224c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002258:	f023 031f 	bic.w	r3, r3, #31
 800225c:	4313      	orrs	r3, r2
 800225e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002262:	3314      	adds	r3, #20
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <LCD_IO_WriteCmd8DataFill16+0x3d4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800226c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002272:	015b      	lsls	r3, r3, #5
 8002274:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002278:	f023 031f 	bic.w	r3, r3, #31
 800227c:	4313      	orrs	r3, r2
 800227e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002282:	3318      	adds	r3, #24
 8002284:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <LCD_IO_WriteCmd8DataFill16+0x3d8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 800228c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <LCD_IO_WriteCmd8DataFill16+0x3bc>)
 8002292:	015b      	lsls	r3, r3, #5
 8002294:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002298:	f023 031f 	bic.w	r3, r3, #31
 800229c:	4313      	orrs	r3, r2
 800229e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80022a2:	331c      	adds	r3, #28
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <LCD_IO_WriteCmd8DataFill16+0x3dc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <LCD_IO_WriteCmd8DataFill16+0x3e0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	2008      	movs	r0, #8
 80022b2:	f7ff fa79 	bl	80017a8 <LCD_IO_Delay>
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <LCD_IO_WriteCmd8DataFill16+0x3e0>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
  while(Size--)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	603a      	str	r2, [r7, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f47f aee0 	bne.w	8002088 <LCD_IO_WriteCmd8DataFill16+0x16c>
  }
  LCD_CS_OFF;
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <LCD_IO_WriteCmd8DataFill16+0x3e4>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000270 	.word	0x20000270
 80022dc:	424002a4 	.word	0x424002a4
 80022e0:	4241029c 	.word	0x4241029c
 80022e4:	424002a8 	.word	0x424002a8
 80022e8:	4240828c 	.word	0x4240828c
 80022ec:	42408294 	.word	0x42408294
 80022f0:	42408290 	.word	0x42408290
 80022f4:	424082a8 	.word	0x424082a8
 80022f8:	424002a0 	.word	0x424002a0
 80022fc:	42400284 	.word	0x42400284
 8002300:	42408280 	.word	0x42408280

08002304 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8002312:	4b98      	ldr	r3, [pc, #608]	; (8002574 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8002318:	4b97      	ldr	r3, [pc, #604]	; (8002578 <LCD_IO_WriteCmd8MultipleData8+0x274>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	4a97      	ldr	r2, [pc, #604]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	7013      	strb	r3, [r2, #0]
 8002324:	4b95      	ldr	r3, [pc, #596]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002326:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800232a:	4b94      	ldr	r3, [pc, #592]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800232c:	015b      	lsls	r3, r3, #5
 800232e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002332:	f023 031f 	bic.w	r3, r3, #31
 8002336:	4313      	orrs	r3, r2
 8002338:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800233c:	4a90      	ldr	r2, [pc, #576]	; (8002580 <LCD_IO_WriteCmd8MultipleData8+0x27c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b8e      	ldr	r3, [pc, #568]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002344:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800234a:	015b      	lsls	r3, r3, #5
 800234c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002350:	f023 031f 	bic.w	r3, r3, #31
 8002354:	4313      	orrs	r3, r2
 8002356:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800235a:	3304      	adds	r3, #4
 800235c:	4a89      	ldr	r2, [pc, #548]	; (8002584 <LCD_IO_WriteCmd8MultipleData8+0x280>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b86      	ldr	r3, [pc, #536]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002364:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002368:	4b84      	ldr	r3, [pc, #528]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800236a:	015b      	lsls	r3, r3, #5
 800236c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002370:	f023 031f 	bic.w	r3, r3, #31
 8002374:	4313      	orrs	r3, r2
 8002376:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800237a:	3308      	adds	r3, #8
 800237c:	4a82      	ldr	r2, [pc, #520]	; (8002588 <LCD_IO_WriteCmd8MultipleData8+0x284>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b7e      	ldr	r3, [pc, #504]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002384:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002388:	4b7c      	ldr	r3, [pc, #496]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800238a:	015b      	lsls	r3, r3, #5
 800238c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002390:	f023 031f 	bic.w	r3, r3, #31
 8002394:	4313      	orrs	r3, r2
 8002396:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800239a:	330c      	adds	r3, #12
 800239c:	4a7b      	ldr	r2, [pc, #492]	; (800258c <LCD_IO_WriteCmd8MultipleData8+0x288>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80023a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80023a8:	4b74      	ldr	r3, [pc, #464]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80023aa:	015b      	lsls	r3, r3, #5
 80023ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80023b0:	f023 031f 	bic.w	r3, r3, #31
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80023ba:	3310      	adds	r3, #16
 80023bc:	4a74      	ldr	r2, [pc, #464]	; (8002590 <LCD_IO_WriteCmd8MultipleData8+0x28c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b6e      	ldr	r3, [pc, #440]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80023c4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80023c8:	4b6c      	ldr	r3, [pc, #432]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80023d0:	f023 031f 	bic.w	r3, r3, #31
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80023da:	3314      	adds	r3, #20
 80023dc:	4a6d      	ldr	r2, [pc, #436]	; (8002594 <LCD_IO_WriteCmd8MultipleData8+0x290>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b66      	ldr	r3, [pc, #408]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80023e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80023e8:	4b64      	ldr	r3, [pc, #400]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80023ea:	015b      	lsls	r3, r3, #5
 80023ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80023f0:	f023 031f 	bic.w	r3, r3, #31
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80023fa:	3318      	adds	r3, #24
 80023fc:	4a66      	ldr	r2, [pc, #408]	; (8002598 <LCD_IO_WriteCmd8MultipleData8+0x294>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002404:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002408:	4b5c      	ldr	r3, [pc, #368]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002410:	f023 031f 	bic.w	r3, r3, #31
 8002414:	4313      	orrs	r3, r2
 8002416:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800241a:	331c      	adds	r3, #28
 800241c:	4a5f      	ldr	r2, [pc, #380]	; (800259c <LCD_IO_WriteCmd8MultipleData8+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b5f      	ldr	r3, [pc, #380]	; (80025a0 <LCD_IO_WriteCmd8MultipleData8+0x29c>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	2008      	movs	r0, #8
 800242a:	f7ff f9bd 	bl	80017a8 <LCD_IO_Delay>
 800242e:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <LCD_IO_WriteCmd8MultipleData8+0x29c>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <LCD_IO_WriteCmd8MultipleData8+0x274>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

  while(Size--)
 800243a:	e08e      	b.n	800255a <LCD_IO_WriteCmd8MultipleData8+0x256>
  {
    LCD_DATA8_WRITE(*pData);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b4e      	ldr	r3, [pc, #312]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002446:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800244c:	015b      	lsls	r3, r3, #5
 800244e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002452:	f023 031f 	bic.w	r3, r3, #31
 8002456:	4313      	orrs	r3, r2
 8002458:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <LCD_IO_WriteCmd8MultipleData8+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002464:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002468:	4b44      	ldr	r3, [pc, #272]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800246a:	015b      	lsls	r3, r3, #5
 800246c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002470:	f023 031f 	bic.w	r3, r3, #31
 8002474:	4313      	orrs	r3, r2
 8002476:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800247a:	3304      	adds	r3, #4
 800247c:	4a41      	ldr	r2, [pc, #260]	; (8002584 <LCD_IO_WriteCmd8MultipleData8+0x280>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b3e      	ldr	r3, [pc, #248]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002484:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002488:	4b3c      	ldr	r3, [pc, #240]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800248a:	015b      	lsls	r3, r3, #5
 800248c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002490:	f023 031f 	bic.w	r3, r3, #31
 8002494:	4313      	orrs	r3, r2
 8002496:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800249a:	3308      	adds	r3, #8
 800249c:	4a3a      	ldr	r2, [pc, #232]	; (8002588 <LCD_IO_WriteCmd8MultipleData8+0x284>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80024a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80024a8:	4b34      	ldr	r3, [pc, #208]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80024b0:	f023 031f 	bic.w	r3, r3, #31
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80024ba:	330c      	adds	r3, #12
 80024bc:	4a33      	ldr	r2, [pc, #204]	; (800258c <LCD_IO_WriteCmd8MultipleData8+0x288>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80024c4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80024c8:	4b2c      	ldr	r3, [pc, #176]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80024ca:	015b      	lsls	r3, r3, #5
 80024cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80024d0:	f023 031f 	bic.w	r3, r3, #31
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80024da:	3310      	adds	r3, #16
 80024dc:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <LCD_IO_WriteCmd8MultipleData8+0x28c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80024e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80024f0:	f023 031f 	bic.w	r3, r3, #31
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80024fa:	3314      	adds	r3, #20
 80024fc:	4a25      	ldr	r2, [pc, #148]	; (8002594 <LCD_IO_WriteCmd8MultipleData8+0x290>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002504:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002510:	f023 031f 	bic.w	r3, r3, #31
 8002514:	4313      	orrs	r3, r2
 8002516:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800251a:	3318      	adds	r3, #24
 800251c:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <LCD_IO_WriteCmd8MultipleData8+0x294>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 8002524:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <LCD_IO_WriteCmd8MultipleData8+0x278>)
 800252a:	015b      	lsls	r3, r3, #5
 800252c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002530:	f023 031f 	bic.w	r3, r3, #31
 8002534:	4313      	orrs	r3, r2
 8002536:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800253a:	331c      	adds	r3, #28
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <LCD_IO_WriteCmd8MultipleData8+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <LCD_IO_WriteCmd8MultipleData8+0x29c>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	2008      	movs	r0, #8
 800254a:	f7ff f92d 	bl	80017a8 <LCD_IO_Delay>
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <LCD_IO_WriteCmd8MultipleData8+0x29c>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    pData ++;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3301      	adds	r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f47f af6b 	bne.w	800243c <LCD_IO_WriteCmd8MultipleData8+0x138>
  }
  LCD_CS_OFF;
 8002566:	4b03      	ldr	r3, [pc, #12]	; (8002574 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]
}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	42408280 	.word	0x42408280
 8002578:	42400290 	.word	0x42400290
 800257c:	20000270 	.word	0x20000270
 8002580:	424002a4 	.word	0x424002a4
 8002584:	4241029c 	.word	0x4241029c
 8002588:	424002a8 	.word	0x424002a8
 800258c:	4240828c 	.word	0x4240828c
 8002590:	42408294 	.word	0x42408294
 8002594:	42408290 	.word	0x42408290
 8002598:	424082a8 	.word	0x424082a8
 800259c:	424002a0 	.word	0x424002a0
 80025a0:	42400284 	.word	0x42400284

080025a4 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <LCD_IO_WriteCmd8MultipleData16+0x138>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80025b8:	4b49      	ldr	r3, [pc, #292]	; (80026e0 <LCD_IO_WriteCmd8MultipleData16+0x13c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	4a49      	ldr	r2, [pc, #292]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	7013      	strb	r3, [r2, #0]
 80025c4:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 80025c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80025ca:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 80025cc:	015b      	lsls	r3, r3, #5
 80025ce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80025d2:	f023 031f 	bic.w	r3, r3, #31
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025dc:	4a42      	ldr	r2, [pc, #264]	; (80026e8 <LCD_IO_WriteCmd8MultipleData16+0x144>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 80025e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80025e8:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80025f0:	f023 031f 	bic.w	r3, r3, #31
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025fa:	3304      	adds	r3, #4
 80025fc:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <LCD_IO_WriteCmd8MultipleData16+0x148>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 8002604:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002608:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 800260a:	015b      	lsls	r3, r3, #5
 800260c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002610:	f023 031f 	bic.w	r3, r3, #31
 8002614:	4313      	orrs	r3, r2
 8002616:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800261a:	3308      	adds	r3, #8
 800261c:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <LCD_IO_WriteCmd8MultipleData16+0x14c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 8002624:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002628:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 800262a:	015b      	lsls	r3, r3, #5
 800262c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002630:	f023 031f 	bic.w	r3, r3, #31
 8002634:	4313      	orrs	r3, r2
 8002636:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800263a:	330c      	adds	r3, #12
 800263c:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <LCD_IO_WriteCmd8MultipleData16+0x150>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 8002644:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002648:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002650:	f023 031f 	bic.w	r3, r3, #31
 8002654:	4313      	orrs	r3, r2
 8002656:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800265a:	3310      	adds	r3, #16
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <LCD_IO_WriteCmd8MultipleData16+0x154>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 8002664:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002668:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 800266a:	015b      	lsls	r3, r3, #5
 800266c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002670:	f023 031f 	bic.w	r3, r3, #31
 8002674:	4313      	orrs	r3, r2
 8002676:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800267a:	3314      	adds	r3, #20
 800267c:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <LCD_IO_WriteCmd8MultipleData16+0x158>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 8002684:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 800268a:	015b      	lsls	r3, r3, #5
 800268c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002690:	f023 031f 	bic.w	r3, r3, #31
 8002694:	4313      	orrs	r3, r2
 8002696:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800269a:	3318      	adds	r3, #24
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <LCD_IO_WriteCmd8MultipleData16+0x15c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 80026a4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <LCD_IO_WriteCmd8MultipleData16+0x140>)
 80026aa:	015b      	lsls	r3, r3, #5
 80026ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80026b0:	f023 031f 	bic.w	r3, r3, #31
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80026ba:	331c      	adds	r3, #28
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <LCD_IO_WriteCmd8MultipleData16+0x160>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <LCD_IO_WriteCmd8MultipleData16+0x164>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	2008      	movs	r0, #8
 80026ca:	f7ff f86d 	bl	80017a8 <LCD_IO_Delay>
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <LCD_IO_WriteCmd8MultipleData16+0x164>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <LCD_IO_WriteCmd8MultipleData16+0x13c>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
  while(Size--)
 80026da:	e136      	b.n	800294a <LCD_IO_WriteCmd8MultipleData16+0x3a6>
 80026dc:	42408280 	.word	0x42408280
 80026e0:	42400290 	.word	0x42400290
 80026e4:	20000270 	.word	0x20000270
 80026e8:	424002a4 	.word	0x424002a4
 80026ec:	4241029c 	.word	0x4241029c
 80026f0:	424002a8 	.word	0x424002a8
 80026f4:	4240828c 	.word	0x4240828c
 80026f8:	42408294 	.word	0x42408294
 80026fc:	42408290 	.word	0x42408290
 8002700:	424082a8 	.word	0x424082a8
 8002704:	424002a0 	.word	0x424002a0
 8002708:	42400284 	.word	0x42400284
  {
    LCD_DATA16_WRITE(*pData);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	b29b      	uxth	r3, r3
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b93      	ldr	r3, [pc, #588]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	4b92      	ldr	r3, [pc, #584]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800271c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002720:	4b90      	ldr	r3, [pc, #576]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002722:	015b      	lsls	r3, r3, #5
 8002724:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002728:	f023 031f 	bic.w	r3, r3, #31
 800272c:	4313      	orrs	r3, r2
 800272e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002732:	4a8d      	ldr	r2, [pc, #564]	; (8002968 <LCD_IO_WriteCmd8MultipleData16+0x3c4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800273a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800273e:	4b89      	ldr	r3, [pc, #548]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002746:	f023 031f 	bic.w	r3, r3, #31
 800274a:	4313      	orrs	r3, r2
 800274c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002750:	3304      	adds	r3, #4
 8002752:	4a86      	ldr	r2, [pc, #536]	; (800296c <LCD_IO_WriteCmd8MultipleData16+0x3c8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b82      	ldr	r3, [pc, #520]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800275a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800275e:	4b81      	ldr	r3, [pc, #516]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002760:	015b      	lsls	r3, r3, #5
 8002762:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002766:	f023 031f 	bic.w	r3, r3, #31
 800276a:	4313      	orrs	r3, r2
 800276c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002770:	3308      	adds	r3, #8
 8002772:	4a7f      	ldr	r2, [pc, #508]	; (8002970 <LCD_IO_WriteCmd8MultipleData16+0x3cc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b7a      	ldr	r3, [pc, #488]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800277a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800277e:	4b79      	ldr	r3, [pc, #484]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002780:	015b      	lsls	r3, r3, #5
 8002782:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002786:	f023 031f 	bic.w	r3, r3, #31
 800278a:	4313      	orrs	r3, r2
 800278c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002790:	330c      	adds	r3, #12
 8002792:	4a78      	ldr	r2, [pc, #480]	; (8002974 <LCD_IO_WriteCmd8MultipleData16+0x3d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b72      	ldr	r3, [pc, #456]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800279a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800279e:	4b71      	ldr	r3, [pc, #452]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80027a0:	015b      	lsls	r3, r3, #5
 80027a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80027a6:	f023 031f 	bic.w	r3, r3, #31
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80027b0:	3310      	adds	r3, #16
 80027b2:	4a71      	ldr	r2, [pc, #452]	; (8002978 <LCD_IO_WriteCmd8MultipleData16+0x3d4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b6a      	ldr	r3, [pc, #424]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80027ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80027be:	4b69      	ldr	r3, [pc, #420]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80027c0:	015b      	lsls	r3, r3, #5
 80027c2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80027c6:	f023 031f 	bic.w	r3, r3, #31
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80027d0:	3314      	adds	r3, #20
 80027d2:	4a6a      	ldr	r2, [pc, #424]	; (800297c <LCD_IO_WriteCmd8MultipleData16+0x3d8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b62      	ldr	r3, [pc, #392]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80027da:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80027e0:	015b      	lsls	r3, r3, #5
 80027e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80027e6:	f023 031f 	bic.w	r3, r3, #31
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80027f0:	3318      	adds	r3, #24
 80027f2:	4a63      	ldr	r2, [pc, #396]	; (8002980 <LCD_IO_WriteCmd8MultipleData16+0x3dc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b5a      	ldr	r3, [pc, #360]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80027fa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80027fe:	4b59      	ldr	r3, [pc, #356]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002800:	015b      	lsls	r3, r3, #5
 8002802:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002806:	f023 031f 	bic.w	r3, r3, #31
 800280a:	4313      	orrs	r3, r2
 800280c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002810:	331c      	adds	r3, #28
 8002812:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <LCD_IO_WriteCmd8MultipleData16+0x3e0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <LCD_IO_WriteCmd8MultipleData16+0x3e4>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	2008      	movs	r0, #8
 8002820:	f7fe ffc2 	bl	80017a8 <LCD_IO_Delay>
 8002824:	4b58      	ldr	r3, [pc, #352]	; (8002988 <LCD_IO_WriteCmd8MultipleData16+0x3e4>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002836:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800283a:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002842:	f023 031f 	bic.w	r3, r3, #31
 8002846:	4313      	orrs	r3, r2
 8002848:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800284c:	4a46      	ldr	r2, [pc, #280]	; (8002968 <LCD_IO_WriteCmd8MultipleData16+0x3c4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b44      	ldr	r3, [pc, #272]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002854:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800285a:	015b      	lsls	r3, r3, #5
 800285c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002860:	f023 031f 	bic.w	r3, r3, #31
 8002864:	4313      	orrs	r3, r2
 8002866:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800286a:	3304      	adds	r3, #4
 800286c:	4a3f      	ldr	r2, [pc, #252]	; (800296c <LCD_IO_WriteCmd8MultipleData16+0x3c8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002874:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002878:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800287a:	015b      	lsls	r3, r3, #5
 800287c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002880:	f023 031f 	bic.w	r3, r3, #31
 8002884:	4313      	orrs	r3, r2
 8002886:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800288a:	3308      	adds	r3, #8
 800288c:	4a38      	ldr	r2, [pc, #224]	; (8002970 <LCD_IO_WriteCmd8MultipleData16+0x3cc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b34      	ldr	r3, [pc, #208]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002894:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002898:	4b32      	ldr	r3, [pc, #200]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800289a:	015b      	lsls	r3, r3, #5
 800289c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80028a0:	f023 031f 	bic.w	r3, r3, #31
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80028aa:	330c      	adds	r3, #12
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <LCD_IO_WriteCmd8MultipleData16+0x3d0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80028b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80028c0:	f023 031f 	bic.w	r3, r3, #31
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80028ca:	3310      	adds	r3, #16
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <LCD_IO_WriteCmd8MultipleData16+0x3d4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80028d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80028e0:	f023 031f 	bic.w	r3, r3, #31
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80028ea:	3314      	adds	r3, #20
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <LCD_IO_WriteCmd8MultipleData16+0x3d8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80028f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 80028fa:	015b      	lsls	r3, r3, #5
 80028fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002900:	f023 031f 	bic.w	r3, r3, #31
 8002904:	4313      	orrs	r3, r2
 8002906:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800290a:	3318      	adds	r3, #24
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <LCD_IO_WriteCmd8MultipleData16+0x3dc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 8002914:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <LCD_IO_WriteCmd8MultipleData16+0x3c0>)
 800291a:	015b      	lsls	r3, r3, #5
 800291c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002920:	f023 031f 	bic.w	r3, r3, #31
 8002924:	4313      	orrs	r3, r2
 8002926:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800292a:	331c      	adds	r3, #28
 800292c:	4a15      	ldr	r2, [pc, #84]	; (8002984 <LCD_IO_WriteCmd8MultipleData16+0x3e0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <LCD_IO_WriteCmd8MultipleData16+0x3e4>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	2008      	movs	r0, #8
 800293a:	f7fe ff35 	bl	80017a8 <LCD_IO_Delay>
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <LCD_IO_WriteCmd8MultipleData16+0x3e4>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    pData ++;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3302      	adds	r3, #2
 8002948:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f aedb 	bne.w	800270c <LCD_IO_WriteCmd8MultipleData16+0x168>
  }
  LCD_CS_OFF;
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <LCD_IO_WriteCmd8MultipleData16+0x3e8>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000270 	.word	0x20000270
 8002968:	424002a4 	.word	0x424002a4
 800296c:	4241029c 	.word	0x4241029c
 8002970:	424002a8 	.word	0x424002a8
 8002974:	4240828c 	.word	0x4240828c
 8002978:	42408294 	.word	0x42408294
 800297c:	42408290 	.word	0x42408290
 8002980:	424082a8 	.word	0x424082a8
 8002984:	424002a0 	.word	0x424002a0
 8002988:	42400284 	.word	0x42400284
 800298c:	42408280 	.word	0x42408280

08002990 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >= GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <LCD_IO_ReadCmd8MultipleData8+0x1b8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80029a6:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <LCD_IO_ReadCmd8MultipleData8+0x1bc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	4a68      	ldr	r2, [pc, #416]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	7013      	strb	r3, [r2, #0]
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 80029b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80029b8:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80029c0:	f023 031f 	bic.w	r3, r3, #31
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80029ca:	4a62      	ldr	r2, [pc, #392]	; (8002b54 <LCD_IO_ReadCmd8MultipleData8+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 80029d2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80029d6:	4b5e      	ldr	r3, [pc, #376]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 80029d8:	015b      	lsls	r3, r3, #5
 80029da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80029de:	f023 031f 	bic.w	r3, r3, #31
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80029e8:	3304      	adds	r3, #4
 80029ea:	4a5b      	ldr	r2, [pc, #364]	; (8002b58 <LCD_IO_ReadCmd8MultipleData8+0x1c8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 80029f2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80029f6:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80029fe:	f023 031f 	bic.w	r3, r3, #31
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a08:	3308      	adds	r3, #8
 8002a0a:	4a54      	ldr	r2, [pc, #336]	; (8002b5c <LCD_IO_ReadCmd8MultipleData8+0x1cc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b4f      	ldr	r3, [pc, #316]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a12:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a18:	015b      	lsls	r3, r3, #5
 8002a1a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a1e:	f023 031f 	bic.w	r3, r3, #31
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a28:	330c      	adds	r3, #12
 8002a2a:	4a4d      	ldr	r2, [pc, #308]	; (8002b60 <LCD_IO_ReadCmd8MultipleData8+0x1d0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a32:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a38:	015b      	lsls	r3, r3, #5
 8002a3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a3e:	f023 031f 	bic.w	r3, r3, #31
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a48:	3310      	adds	r3, #16
 8002a4a:	4a46      	ldr	r2, [pc, #280]	; (8002b64 <LCD_IO_ReadCmd8MultipleData8+0x1d4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a52:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a56:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a58:	015b      	lsls	r3, r3, #5
 8002a5a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a5e:	f023 031f 	bic.w	r3, r3, #31
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a68:	3314      	adds	r3, #20
 8002a6a:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <LCD_IO_ReadCmd8MultipleData8+0x1d8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a72:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a76:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a78:	015b      	lsls	r3, r3, #5
 8002a7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a7e:	f023 031f 	bic.w	r3, r3, #31
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a88:	3318      	adds	r3, #24
 8002a8a:	4a38      	ldr	r2, [pc, #224]	; (8002b6c <LCD_IO_ReadCmd8MultipleData8+0x1dc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <LCD_IO_ReadCmd8MultipleData8+0x1c0>)
 8002a98:	015b      	lsls	r3, r3, #5
 8002a9a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a9e:	f023 031f 	bic.w	r3, r3, #31
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	331c      	adds	r3, #28
 8002aaa:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <LCD_IO_ReadCmd8MultipleData8+0x1e0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	2008      	movs	r0, #8
 8002ab8:	f7fe fe76 	bl	80017a8 <LCD_IO_Delay>
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <LCD_IO_ReadCmd8MultipleData8+0x1e4>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <LCD_IO_ReadCmd8MultipleData8+0x1bc>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002ace:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <LCD_IO_ReadCmd8MultipleData8+0x1ec>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <LCD_IO_ReadCmd8MultipleData8+0x1ec>)
 8002ada:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002ae6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002af2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002afe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1a      	ldr	r2, [pc, #104]	; (8002b80 <LCD_IO_ReadCmd8MultipleData8+0x1f0>)
 8002b16:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <LCD_IO_ReadCmd8MultipleData8+0x1e8>)
 8002b22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b26:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8002b28:	e008      	b.n	8002b3c <LCD_IO_ReadCmd8MultipleData8+0x1ac>
    LCD_DUMMY_READ;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <LCD_IO_ReadCmd8MultipleData8+0x1f4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	2012      	movs	r0, #18
 8002b32:	f7fe fe39 	bl	80017a8 <LCD_IO_Delay>
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <LCD_IO_ReadCmd8MultipleData8+0x1f4>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	603a      	str	r2, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f1      	bne.n	8002b2a <LCD_IO_ReadCmd8MultipleData8+0x19a>
  while(Size--)
 8002b46:	e0c5      	b.n	8002cd4 <LCD_IO_ReadCmd8MultipleData8+0x344>
 8002b48:	42408280 	.word	0x42408280
 8002b4c:	42400290 	.word	0x42400290
 8002b50:	20000270 	.word	0x20000270
 8002b54:	424002a4 	.word	0x424002a4
 8002b58:	4241029c 	.word	0x4241029c
 8002b5c:	424002a8 	.word	0x424002a8
 8002b60:	4240828c 	.word	0x4240828c
 8002b64:	42408294 	.word	0x42408294
 8002b68:	42408290 	.word	0x42408290
 8002b6c:	424082a8 	.word	0x424082a8
 8002b70:	424002a0 	.word	0x424002a0
 8002b74:	42400284 	.word	0x42400284
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020400 	.word	0x40020400
 8002b84:	42400280 	.word	0x42400280
  {
    LCD_DATA8_READ(d);
 8002b88:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <LCD_IO_ReadCmd8MultipleData8+0x3e0>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	2012      	movs	r0, #18
 8002b90:	f7fe fe0a 	bl	80017a8 <LCD_IO_Delay>
 8002b94:	4977      	ldr	r1, [pc, #476]	; (8002d74 <LCD_IO_ReadCmd8MultipleData8+0x3e4>)
 8002b96:	f107 0317 	add.w	r3, r7, #23
 8002b9a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002b9e:	f107 0317 	add.w	r3, r7, #23
 8002ba2:	015b      	lsls	r3, r3, #5
 8002ba4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002ba8:	f023 031f 	bic.w	r3, r3, #31
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	680b      	ldr	r3, [r1, #0]
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	496f      	ldr	r1, [pc, #444]	; (8002d78 <LCD_IO_ReadCmd8MultipleData8+0x3e8>)
 8002bba:	f107 0317 	add.w	r3, r7, #23
 8002bbe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002bc2:	f107 0317 	add.w	r3, r7, #23
 8002bc6:	015b      	lsls	r3, r3, #5
 8002bc8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002bcc:	f023 031f 	bic.w	r3, r3, #31
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	461a      	mov	r2, r3
 8002bda:	680b      	ldr	r3, [r1, #0]
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4967      	ldr	r1, [pc, #412]	; (8002d7c <LCD_IO_ReadCmd8MultipleData8+0x3ec>)
 8002be0:	f107 0317 	add.w	r3, r7, #23
 8002be4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002be8:	f107 0317 	add.w	r3, r7, #23
 8002bec:	015b      	lsls	r3, r3, #5
 8002bee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002bf2:	f023 031f 	bic.w	r3, r3, #31
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	461a      	mov	r2, r3
 8002c00:	680b      	ldr	r3, [r1, #0]
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	495e      	ldr	r1, [pc, #376]	; (8002d80 <LCD_IO_ReadCmd8MultipleData8+0x3f0>)
 8002c06:	f107 0317 	add.w	r3, r7, #23
 8002c0a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c0e:	f107 0317 	add.w	r3, r7, #23
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c18:	f023 031f 	bic.w	r3, r3, #31
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c22:	330c      	adds	r3, #12
 8002c24:	461a      	mov	r2, r3
 8002c26:	680b      	ldr	r3, [r1, #0]
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4956      	ldr	r1, [pc, #344]	; (8002d84 <LCD_IO_ReadCmd8MultipleData8+0x3f4>)
 8002c2c:	f107 0317 	add.w	r3, r7, #23
 8002c30:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c34:	f107 0317 	add.w	r3, r7, #23
 8002c38:	015b      	lsls	r3, r3, #5
 8002c3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c3e:	f023 031f 	bic.w	r3, r3, #31
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c48:	3310      	adds	r3, #16
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	680b      	ldr	r3, [r1, #0]
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <LCD_IO_ReadCmd8MultipleData8+0x3f8>)
 8002c52:	f107 0317 	add.w	r3, r7, #23
 8002c56:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c5a:	f107 0317 	add.w	r3, r7, #23
 8002c5e:	015b      	lsls	r3, r3, #5
 8002c60:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c64:	f023 031f 	bic.w	r3, r3, #31
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	3314      	adds	r3, #20
 8002c70:	461a      	mov	r2, r3
 8002c72:	680b      	ldr	r3, [r1, #0]
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4945      	ldr	r1, [pc, #276]	; (8002d8c <LCD_IO_ReadCmd8MultipleData8+0x3fc>)
 8002c78:	f107 0317 	add.w	r3, r7, #23
 8002c7c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c80:	f107 0317 	add.w	r3, r7, #23
 8002c84:	015b      	lsls	r3, r3, #5
 8002c86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c8a:	f023 031f 	bic.w	r3, r3, #31
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c94:	3318      	adds	r3, #24
 8002c96:	461a      	mov	r2, r3
 8002c98:	680b      	ldr	r3, [r1, #0]
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	493c      	ldr	r1, [pc, #240]	; (8002d90 <LCD_IO_ReadCmd8MultipleData8+0x400>)
 8002c9e:	f107 0317 	add.w	r3, r7, #23
 8002ca2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ca6:	f107 0317 	add.w	r3, r7, #23
 8002caa:	015b      	lsls	r3, r3, #5
 8002cac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002cb0:	f023 031f 	bic.w	r3, r3, #31
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002cba:	331c      	adds	r3, #28
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	680b      	ldr	r3, [r1, #0]
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <LCD_IO_ReadCmd8MultipleData8+0x3e0>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
    *pData = d;
 8002cc8:	7dfa      	ldrb	r2, [r7, #23]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	701a      	strb	r2, [r3, #0]
    pData++;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1e5a      	subs	r2, r3, #1
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f47f af54 	bne.w	8002b88 <LCD_IO_ReadCmd8MultipleData8+0x1f8>
  }
  LCD_CS_OFF;
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <LCD_IO_ReadCmd8MultipleData8+0x404>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <LCD_IO_ReadCmd8MultipleData8+0x408>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <LCD_IO_ReadCmd8MultipleData8+0x408>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <LCD_IO_ReadCmd8MultipleData8+0x40c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002cfe:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <LCD_IO_ReadCmd8MultipleData8+0x40c>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <LCD_IO_ReadCmd8MultipleData8+0x408>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <LCD_IO_ReadCmd8MultipleData8+0x408>)
 8002d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d1e:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <LCD_IO_ReadCmd8MultipleData8+0x410>)
 8002d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <LCD_IO_ReadCmd8MultipleData8+0x408>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <LCD_IO_ReadCmd8MultipleData8+0x408>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	42400280 	.word	0x42400280
 8002d74:	42400224 	.word	0x42400224
 8002d78:	4241021c 	.word	0x4241021c
 8002d7c:	42400228 	.word	0x42400228
 8002d80:	4240820c 	.word	0x4240820c
 8002d84:	42408214 	.word	0x42408214
 8002d88:	42408210 	.word	0x42408210
 8002d8c:	42408228 	.word	0x42408228
 8002d90:	42400220 	.word	0x42400220
 8002d94:	42408280 	.word	0x42408280
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020400 	.word	0x40020400

08002da4 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_DIRWRITE;
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint8_t  rgb888[3];
  LCD_CS_ON;
 8002db4:	4b69      	ldr	r3, [pc, #420]	; (8002f5c <LCD_IO_ReadCmd8MultipleData24to16+0x1b8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8002dba:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <LCD_IO_ReadCmd8MultipleData24to16+0x1bc>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4a68      	ldr	r2, [pc, #416]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	7013      	strb	r3, [r2, #0]
 8002dc6:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002dc8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002dcc:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002dce:	015b      	lsls	r3, r3, #5
 8002dd0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002dd4:	f023 031f 	bic.w	r3, r3, #31
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002dde:	4a62      	ldr	r2, [pc, #392]	; (8002f68 <LCD_IO_ReadCmd8MultipleData24to16+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002de6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002dea:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002dec:	015b      	lsls	r3, r3, #5
 8002dee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002df2:	f023 031f 	bic.w	r3, r3, #31
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4a5b      	ldr	r2, [pc, #364]	; (8002f6c <LCD_IO_ReadCmd8MultipleData24to16+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e0a:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e0c:	015b      	lsls	r3, r3, #5
 8002e0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e12:	f023 031f 	bic.w	r3, r3, #31
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	4a54      	ldr	r2, [pc, #336]	; (8002f70 <LCD_IO_ReadCmd8MultipleData24to16+0x1cc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e26:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e2a:	4b4e      	ldr	r3, [pc, #312]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e2c:	015b      	lsls	r3, r3, #5
 8002e2e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e32:	f023 031f 	bic.w	r3, r3, #31
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	4a4d      	ldr	r2, [pc, #308]	; (8002f74 <LCD_IO_ReadCmd8MultipleData24to16+0x1d0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e46:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e4a:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e4c:	015b      	lsls	r3, r3, #5
 8002e4e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e52:	f023 031f 	bic.w	r3, r3, #31
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <LCD_IO_ReadCmd8MultipleData24to16+0x1d4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e66:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e6c:	015b      	lsls	r3, r3, #5
 8002e6e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e72:	f023 031f 	bic.w	r3, r3, #31
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	3314      	adds	r3, #20
 8002e7e:	4a3f      	ldr	r2, [pc, #252]	; (8002f7c <LCD_IO_ReadCmd8MultipleData24to16+0x1d8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e86:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002e8c:	015b      	lsls	r3, r3, #5
 8002e8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e92:	f023 031f 	bic.w	r3, r3, #31
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <LCD_IO_ReadCmd8MultipleData24to16+0x1dc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002ea6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <LCD_IO_ReadCmd8MultipleData24to16+0x1c0>)
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002eb2:	f023 031f 	bic.w	r3, r3, #31
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	331c      	adds	r3, #28
 8002ebe:	4a31      	ldr	r2, [pc, #196]	; (8002f84 <LCD_IO_ReadCmd8MultipleData24to16+0x1e0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <LCD_IO_ReadCmd8MultipleData24to16+0x1e4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	2008      	movs	r0, #8
 8002ecc:	f7fe fc6c 	bl	80017a8 <LCD_IO_Delay>
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <LCD_IO_ReadCmd8MultipleData24to16+0x1e4>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <LCD_IO_ReadCmd8MultipleData24to16+0x1bc>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <LCD_IO_ReadCmd8MultipleData24to16+0x1e8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <LCD_IO_ReadCmd8MultipleData24to16+0x1e8>)
 8002ee2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <LCD_IO_ReadCmd8MultipleData24to16+0x1ec>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <LCD_IO_ReadCmd8MultipleData24to16+0x1ec>)
 8002eee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <LCD_IO_ReadCmd8MultipleData24to16+0x1e8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <LCD_IO_ReadCmd8MultipleData24to16+0x1e8>)
 8002efa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <LCD_IO_ReadCmd8MultipleData24to16+0x1f0>)
 8002f2a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <LCD_IO_ReadCmd8MultipleData24to16+0x1e8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <LCD_IO_ReadCmd8MultipleData24to16+0x1e8>)
 8002f36:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f3a:	6013      	str	r3, [r2, #0]
  while(DummySize--)
 8002f3c:	e008      	b.n	8002f50 <LCD_IO_ReadCmd8MultipleData24to16+0x1ac>
    LCD_DUMMY_READ;
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <LCD_IO_ReadCmd8MultipleData24to16+0x1f4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	2012      	movs	r0, #18
 8002f46:	f7fe fc2f 	bl	80017a8 <LCD_IO_Delay>
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <LCD_IO_ReadCmd8MultipleData24to16+0x1f4>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	1e5a      	subs	r2, r3, #1
 8002f54:	603a      	str	r2, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f1      	bne.n	8002f3e <LCD_IO_ReadCmd8MultipleData24to16+0x19a>
  while(Size--)
 8002f5a:	e24e      	b.n	80033fa <LCD_IO_ReadCmd8MultipleData24to16+0x656>
 8002f5c:	42408280 	.word	0x42408280
 8002f60:	42400290 	.word	0x42400290
 8002f64:	20000270 	.word	0x20000270
 8002f68:	424002a4 	.word	0x424002a4
 8002f6c:	4241029c 	.word	0x4241029c
 8002f70:	424002a8 	.word	0x424002a8
 8002f74:	4240828c 	.word	0x4240828c
 8002f78:	42408294 	.word	0x42408294
 8002f7c:	42408290 	.word	0x42408290
 8002f80:	424082a8 	.word	0x424082a8
 8002f84:	424002a0 	.word	0x424002a0
 8002f88:	42400284 	.word	0x42400284
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020800 	.word	0x40020800
 8002f94:	40020400 	.word	0x40020400
 8002f98:	42400280 	.word	0x42400280
  {
    LCD_DATA8_READ(rgb888[0]);
 8002f9c:	4bda      	ldr	r3, [pc, #872]	; (8003308 <LCD_IO_ReadCmd8MultipleData24to16+0x564>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	2012      	movs	r0, #18
 8002fa4:	f7fe fc00 	bl	80017a8 <LCD_IO_Delay>
 8002fa8:	49d8      	ldr	r1, [pc, #864]	; (800330c <LCD_IO_ReadCmd8MultipleData24to16+0x568>)
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002fbc:	f023 031f 	bic.w	r3, r3, #31
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	680b      	ldr	r3, [r1, #0]
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	49d0      	ldr	r1, [pc, #832]	; (8003310 <LCD_IO_ReadCmd8MultipleData24to16+0x56c>)
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	015b      	lsls	r3, r3, #5
 8002fdc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002fe0:	f023 031f 	bic.w	r3, r3, #31
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002fea:	3304      	adds	r3, #4
 8002fec:	461a      	mov	r2, r3
 8002fee:	680b      	ldr	r3, [r1, #0]
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	49c8      	ldr	r1, [pc, #800]	; (8003314 <LCD_IO_ReadCmd8MultipleData24to16+0x570>)
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	015b      	lsls	r3, r3, #5
 8003002:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003006:	f023 031f 	bic.w	r3, r3, #31
 800300a:	4313      	orrs	r3, r2
 800300c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003010:	3308      	adds	r3, #8
 8003012:	461a      	mov	r2, r3
 8003014:	680b      	ldr	r3, [r1, #0]
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	49bf      	ldr	r1, [pc, #764]	; (8003318 <LCD_IO_ReadCmd8MultipleData24to16+0x574>)
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	015b      	lsls	r3, r3, #5
 8003028:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800302c:	f023 031f 	bic.w	r3, r3, #31
 8003030:	4313      	orrs	r3, r2
 8003032:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003036:	330c      	adds	r3, #12
 8003038:	461a      	mov	r2, r3
 800303a:	680b      	ldr	r3, [r1, #0]
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	49b7      	ldr	r1, [pc, #732]	; (800331c <LCD_IO_ReadCmd8MultipleData24to16+0x578>)
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	015b      	lsls	r3, r3, #5
 800304e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003052:	f023 031f 	bic.w	r3, r3, #31
 8003056:	4313      	orrs	r3, r2
 8003058:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800305c:	3310      	adds	r3, #16
 800305e:	461a      	mov	r2, r3
 8003060:	680b      	ldr	r3, [r1, #0]
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	49ae      	ldr	r1, [pc, #696]	; (8003320 <LCD_IO_ReadCmd8MultipleData24to16+0x57c>)
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	015b      	lsls	r3, r3, #5
 8003074:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003078:	f023 031f 	bic.w	r3, r3, #31
 800307c:	4313      	orrs	r3, r2
 800307e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003082:	3314      	adds	r3, #20
 8003084:	461a      	mov	r2, r3
 8003086:	680b      	ldr	r3, [r1, #0]
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	49a6      	ldr	r1, [pc, #664]	; (8003324 <LCD_IO_ReadCmd8MultipleData24to16+0x580>)
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	015b      	lsls	r3, r3, #5
 800309a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800309e:	f023 031f 	bic.w	r3, r3, #31
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80030a8:	3318      	adds	r3, #24
 80030aa:	461a      	mov	r2, r3
 80030ac:	680b      	ldr	r3, [r1, #0]
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	499d      	ldr	r1, [pc, #628]	; (8003328 <LCD_IO_ReadCmd8MultipleData24to16+0x584>)
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	015b      	lsls	r3, r3, #5
 80030c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030c4:	f023 031f 	bic.w	r3, r3, #31
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80030ce:	331c      	adds	r3, #28
 80030d0:	461a      	mov	r2, r3
 80030d2:	680b      	ldr	r3, [r1, #0]
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <LCD_IO_ReadCmd8MultipleData24to16+0x564>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[1]);
 80030dc:	4b8a      	ldr	r3, [pc, #552]	; (8003308 <LCD_IO_ReadCmd8MultipleData24to16+0x564>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	2012      	movs	r0, #18
 80030e4:	f7fe fb60 	bl	80017a8 <LCD_IO_Delay>
 80030e8:	4988      	ldr	r1, [pc, #544]	; (800330c <LCD_IO_ReadCmd8MultipleData24to16+0x568>)
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	3301      	adds	r3, #1
 80030f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	3301      	adds	r3, #1
 80030fa:	015b      	lsls	r3, r3, #5
 80030fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003100:	f023 031f 	bic.w	r3, r3, #31
 8003104:	4313      	orrs	r3, r2
 8003106:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800310a:	461a      	mov	r2, r3
 800310c:	680b      	ldr	r3, [r1, #0]
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	497f      	ldr	r1, [pc, #508]	; (8003310 <LCD_IO_ReadCmd8MultipleData24to16+0x56c>)
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	3301      	adds	r3, #1
 8003118:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	3301      	adds	r3, #1
 8003122:	015b      	lsls	r3, r3, #5
 8003124:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003128:	f023 031f 	bic.w	r3, r3, #31
 800312c:	4313      	orrs	r3, r2
 800312e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003132:	3304      	adds	r3, #4
 8003134:	461a      	mov	r2, r3
 8003136:	680b      	ldr	r3, [r1, #0]
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4976      	ldr	r1, [pc, #472]	; (8003314 <LCD_IO_ReadCmd8MultipleData24to16+0x570>)
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	3301      	adds	r3, #1
 8003142:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	3301      	adds	r3, #1
 800314c:	015b      	lsls	r3, r3, #5
 800314e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003152:	f023 031f 	bic.w	r3, r3, #31
 8003156:	4313      	orrs	r3, r2
 8003158:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800315c:	3308      	adds	r3, #8
 800315e:	461a      	mov	r2, r3
 8003160:	680b      	ldr	r3, [r1, #0]
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	496c      	ldr	r1, [pc, #432]	; (8003318 <LCD_IO_ReadCmd8MultipleData24to16+0x574>)
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	3301      	adds	r3, #1
 800316c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	3301      	adds	r3, #1
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800317c:	f023 031f 	bic.w	r3, r3, #31
 8003180:	4313      	orrs	r3, r2
 8003182:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003186:	330c      	adds	r3, #12
 8003188:	461a      	mov	r2, r3
 800318a:	680b      	ldr	r3, [r1, #0]
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4963      	ldr	r1, [pc, #396]	; (800331c <LCD_IO_ReadCmd8MultipleData24to16+0x578>)
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	3301      	adds	r3, #1
 8003196:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	3301      	adds	r3, #1
 80031a0:	015b      	lsls	r3, r3, #5
 80031a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80031a6:	f023 031f 	bic.w	r3, r3, #31
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80031b0:	3310      	adds	r3, #16
 80031b2:	461a      	mov	r2, r3
 80031b4:	680b      	ldr	r3, [r1, #0]
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4959      	ldr	r1, [pc, #356]	; (8003320 <LCD_IO_ReadCmd8MultipleData24to16+0x57c>)
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	3301      	adds	r3, #1
 80031c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	3301      	adds	r3, #1
 80031ca:	015b      	lsls	r3, r3, #5
 80031cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80031d0:	f023 031f 	bic.w	r3, r3, #31
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80031da:	3314      	adds	r3, #20
 80031dc:	461a      	mov	r2, r3
 80031de:	680b      	ldr	r3, [r1, #0]
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4950      	ldr	r1, [pc, #320]	; (8003324 <LCD_IO_ReadCmd8MultipleData24to16+0x580>)
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80031ee:	f107 0314 	add.w	r3, r7, #20
 80031f2:	3301      	adds	r3, #1
 80031f4:	015b      	lsls	r3, r3, #5
 80031f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80031fa:	f023 031f 	bic.w	r3, r3, #31
 80031fe:	4313      	orrs	r3, r2
 8003200:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003204:	3318      	adds	r3, #24
 8003206:	461a      	mov	r2, r3
 8003208:	680b      	ldr	r3, [r1, #0]
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4946      	ldr	r1, [pc, #280]	; (8003328 <LCD_IO_ReadCmd8MultipleData24to16+0x584>)
 800320e:	f107 0314 	add.w	r3, r7, #20
 8003212:	3301      	adds	r3, #1
 8003214:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	3301      	adds	r3, #1
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003224:	f023 031f 	bic.w	r3, r3, #31
 8003228:	4313      	orrs	r3, r2
 800322a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800322e:	331c      	adds	r3, #28
 8003230:	461a      	mov	r2, r3
 8003232:	680b      	ldr	r3, [r1, #0]
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b34      	ldr	r3, [pc, #208]	; (8003308 <LCD_IO_ReadCmd8MultipleData24to16+0x564>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    LCD_DATA8_READ(rgb888[2]);
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <LCD_IO_ReadCmd8MultipleData24to16+0x564>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	2012      	movs	r0, #18
 8003244:	f7fe fab0 	bl	80017a8 <LCD_IO_Delay>
 8003248:	4930      	ldr	r1, [pc, #192]	; (800330c <LCD_IO_ReadCmd8MultipleData24to16+0x568>)
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	3302      	adds	r3, #2
 8003250:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	3302      	adds	r3, #2
 800325a:	015b      	lsls	r3, r3, #5
 800325c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003260:	f023 031f 	bic.w	r3, r3, #31
 8003264:	4313      	orrs	r3, r2
 8003266:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800326a:	461a      	mov	r2, r3
 800326c:	680b      	ldr	r3, [r1, #0]
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4927      	ldr	r1, [pc, #156]	; (8003310 <LCD_IO_ReadCmd8MultipleData24to16+0x56c>)
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	3302      	adds	r3, #2
 8003278:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	3302      	adds	r3, #2
 8003282:	015b      	lsls	r3, r3, #5
 8003284:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003288:	f023 031f 	bic.w	r3, r3, #31
 800328c:	4313      	orrs	r3, r2
 800328e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003292:	3304      	adds	r3, #4
 8003294:	461a      	mov	r2, r3
 8003296:	680b      	ldr	r3, [r1, #0]
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	491e      	ldr	r1, [pc, #120]	; (8003314 <LCD_IO_ReadCmd8MultipleData24to16+0x570>)
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	3302      	adds	r3, #2
 80032a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	3302      	adds	r3, #2
 80032ac:	015b      	lsls	r3, r3, #5
 80032ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80032b2:	f023 031f 	bic.w	r3, r3, #31
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80032bc:	3308      	adds	r3, #8
 80032be:	461a      	mov	r2, r3
 80032c0:	680b      	ldr	r3, [r1, #0]
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4914      	ldr	r1, [pc, #80]	; (8003318 <LCD_IO_ReadCmd8MultipleData24to16+0x574>)
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	3302      	adds	r3, #2
 80032cc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	3302      	adds	r3, #2
 80032d6:	015b      	lsls	r3, r3, #5
 80032d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80032dc:	f023 031f 	bic.w	r3, r3, #31
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80032e6:	330c      	adds	r3, #12
 80032e8:	461a      	mov	r2, r3
 80032ea:	680b      	ldr	r3, [r1, #0]
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	490b      	ldr	r1, [pc, #44]	; (800331c <LCD_IO_ReadCmd8MultipleData24to16+0x578>)
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	3302      	adds	r3, #2
 80032f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	3302      	adds	r3, #2
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003306:	e011      	b.n	800332c <LCD_IO_ReadCmd8MultipleData24to16+0x588>
 8003308:	42400280 	.word	0x42400280
 800330c:	42400224 	.word	0x42400224
 8003310:	4241021c 	.word	0x4241021c
 8003314:	42400228 	.word	0x42400228
 8003318:	4240820c 	.word	0x4240820c
 800331c:	42408214 	.word	0x42408214
 8003320:	42408210 	.word	0x42408210
 8003324:	42408228 	.word	0x42408228
 8003328:	42400220 	.word	0x42400220
 800332c:	f023 031f 	bic.w	r3, r3, #31
 8003330:	4313      	orrs	r3, r2
 8003332:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003336:	3310      	adds	r3, #16
 8003338:	461a      	mov	r2, r3
 800333a:	680b      	ldr	r3, [r1, #0]
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4955      	ldr	r1, [pc, #340]	; (8003494 <LCD_IO_ReadCmd8MultipleData24to16+0x6f0>)
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	3302      	adds	r3, #2
 8003346:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	3302      	adds	r3, #2
 8003350:	015b      	lsls	r3, r3, #5
 8003352:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003356:	f023 031f 	bic.w	r3, r3, #31
 800335a:	4313      	orrs	r3, r2
 800335c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003360:	3314      	adds	r3, #20
 8003362:	461a      	mov	r2, r3
 8003364:	680b      	ldr	r3, [r1, #0]
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	494b      	ldr	r1, [pc, #300]	; (8003498 <LCD_IO_ReadCmd8MultipleData24to16+0x6f4>)
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	3302      	adds	r3, #2
 8003370:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	3302      	adds	r3, #2
 800337a:	015b      	lsls	r3, r3, #5
 800337c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003380:	f023 031f 	bic.w	r3, r3, #31
 8003384:	4313      	orrs	r3, r2
 8003386:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800338a:	3318      	adds	r3, #24
 800338c:	461a      	mov	r2, r3
 800338e:	680b      	ldr	r3, [r1, #0]
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4942      	ldr	r1, [pc, #264]	; (800349c <LCD_IO_ReadCmd8MultipleData24to16+0x6f8>)
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	3302      	adds	r3, #2
 800339a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	3302      	adds	r3, #2
 80033a4:	015b      	lsls	r3, r3, #5
 80033a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80033aa:	f023 031f 	bic.w	r3, r3, #31
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80033b4:	331c      	adds	r3, #28
 80033b6:	461a      	mov	r2, r3
 80033b8:	680b      	ldr	r3, [r1, #0]
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <LCD_IO_ReadCmd8MultipleData24to16+0x6fc>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    #if LCD_REVERSE16 == 0
    *pData = ((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
 80033c2:	7d3b      	ldrb	r3, [r7, #20]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	b21b      	sxth	r3, r3
 80033c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033cc:	f023 0307 	bic.w	r3, r3, #7
 80033d0:	b21a      	sxth	r2, r3
 80033d2:	7d7b      	ldrb	r3, [r7, #21]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80033dc:	b21b      	sxth	r3, r3
 80033de:	4313      	orrs	r3, r2
 80033e0:	b21a      	sxth	r2, r3
 80033e2:	7dbb      	ldrb	r3, [r7, #22]
 80033e4:	08db      	lsrs	r3, r3, #3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	801a      	strh	r2, [r3, #0]
    #else
    *pData = __REVSH((rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3);
    #endif
    pData++;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	3302      	adds	r3, #2
 80033f8:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f47f adcb 	bne.w	8002f9c <LCD_IO_ReadCmd8MultipleData24to16+0x1f8>
  }
  LCD_CS_OFF;
 8003406:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <LCD_IO_ReadCmd8MultipleData24to16+0x700>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 800340c:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <LCD_IO_ReadCmd8MultipleData24to16+0x704>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <LCD_IO_ReadCmd8MultipleData24to16+0x704>)
 8003416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <LCD_IO_ReadCmd8MultipleData24to16+0x708>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003424:	4a21      	ldr	r2, [pc, #132]	; (80034ac <LCD_IO_ReadCmd8MultipleData24to16+0x708>)
 8003426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <LCD_IO_ReadCmd8MultipleData24to16+0x704>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003434:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <LCD_IO_ReadCmd8MultipleData24to16+0x704>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 8003446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 8003456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003474:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <LCD_IO_ReadCmd8MultipleData24to16+0x70c>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <LCD_IO_ReadCmd8MultipleData24to16+0x704>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003484:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <LCD_IO_ReadCmd8MultipleData24to16+0x704>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
}
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	42408210 	.word	0x42408210
 8003498:	42408228 	.word	0x42408228
 800349c:	42400220 	.word	0x42400220
 80034a0:	42400280 	.word	0x42400280
 80034a4:	42408280 	.word	0x42408280
 80034a8:	40020000 	.word	0x40020000
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020400 	.word	0x40020400

080034b4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <BSP_LCD_Init+0x44>)
 80034c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034c4:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <BSP_LCD_Init+0x44>)
 80034c8:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <BSP_LCD_Init+0x48>)
 80034ca:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <BSP_LCD_Init+0x44>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
  
  /* LCD Init */   
  lcd_drv->Init();
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <BSP_LCD_Init+0x4c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4798      	blx	r3
  
  /* Clear the LCD screen */
  BSP_LCD_Clear(0x5AA5 /*LCD_COLOR_WHITE*/);
 80034da:	f645 20a5 	movw	r0, #23205	; 0x5aa5
 80034de:	f000 f859 	bl	8003594 <BSP_LCD_Clear>
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80034e2:	4806      	ldr	r0, [pc, #24]	; (80034fc <BSP_LCD_Init+0x48>)
 80034e4:	f000 f846 	bl	8003574 <BSP_LCD_SetFont>
  
  ret = LCD_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80034ec:	79fb      	ldrb	r3, [r7, #7]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000274 	.word	0x20000274
 80034fc:	20000008 	.word	0x20000008
 8003500:	20000054 	.word	0x20000054

08003504 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <BSP_LCD_GetXSize+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	4798      	blx	r3
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000054 	.word	0x20000054

0800351c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <BSP_LCD_GetYSize+0x14>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4798      	blx	r3
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000054 	.word	0x20000054

08003534 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	4a03      	ldr	r2, [pc, #12]	; (8003550 <BSP_LCD_SetTextColor+0x1c>)
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000274 	.word	0x20000274

08003554 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4a03      	ldr	r2, [pc, #12]	; (8003570 <BSP_LCD_SetBackColor+0x1c>)
 8003562:	6053      	str	r3, [r2, #4]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	20000274 	.word	0x20000274

08003574 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <BSP_LCD_SetFont+0x1c>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6093      	str	r3, [r2, #8]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000274 	.word	0x20000274

08003594 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
  #ifdef   LCD_DRVTYPE_V1_1
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
  #else

  uint32_t counter = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  uint32_t color_backup = DrawProp.TextColor; 
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <BSP_LCD_Clear+0x64>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <BSP_LCD_Clear+0x64>)
 80035ac:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e00c      	b.n	80035ce <BSP_LCD_Clear+0x3a>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	b29c      	uxth	r4, r3
 80035b8:	f7ff ffa4 	bl	8003504 <BSP_LCD_GetXSize>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	4621      	mov	r1, r4
 80035c2:	2000      	movs	r0, #0
 80035c4:	f000 f8f0 	bl	80037a8 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	f7ff ffa5 	bl	800351c <BSP_LCD_GetYSize>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4293      	cmp	r3, r2
 80035da:	d3eb      	bcc.n	80035b4 <BSP_LCD_Clear+0x20>
  }
  DrawProp.TextColor = color_backup; 
 80035dc:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <BSP_LCD_Clear+0x64>)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <BSP_LCD_Clear+0x64>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ffa3 	bl	8003534 <BSP_LCD_SetTextColor>
  #endif
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000274 	.word	0x20000274

080035fc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
 8003606:	460b      	mov	r3, r1
 8003608:	80bb      	strh	r3, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <BSP_LCD_DisplayChar+0x50>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <BSP_LCD_DisplayChar+0x50>)
 800361a:	6889      	ldr	r1, [r1, #8]
 800361c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800361e:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <BSP_LCD_DisplayChar+0x50>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	889b      	ldrh	r3, [r3, #4]
 8003628:	3307      	adds	r3, #7
 800362a:	2b00      	cmp	r3, #0
 800362c:	da00      	bge.n	8003630 <BSP_LCD_DisplayChar+0x34>
 800362e:	3307      	adds	r3, #7
 8003630:	10db      	asrs	r3, r3, #3
 8003632:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003636:	441a      	add	r2, r3
 8003638:	88b9      	ldrh	r1, [r7, #4]
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fb25 	bl	8003c8c <DrawChar>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000274 	.word	0x20000274

08003650 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60ba      	str	r2, [r7, #8]
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	81fb      	strh	r3, [r7, #14]
 800365e:	460b      	mov	r3, r1
 8003660:	81bb      	strh	r3, [r7, #12]
 8003662:	4613      	mov	r3, r2
 8003664:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003666:	2301      	movs	r3, #1
 8003668:	83fb      	strh	r3, [r7, #30]
 800366a:	2300      	movs	r3, #0
 800366c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800367a:	e002      	b.n	8003682 <BSP_LCD_DisplayStringAt+0x32>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	3301      	adds	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	617a      	str	r2, [r7, #20]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f6      	bne.n	800367c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800368e:	f7ff ff39 	bl	8003504 <BSP_LCD_GetXSize>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4b35      	ldr	r3, [pc, #212]	; (800376c <BSP_LCD_DisplayStringAt+0x11c>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	889b      	ldrh	r3, [r3, #4]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d014      	beq.n	80036d4 <BSP_LCD_DisplayStringAt+0x84>
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	dc23      	bgt.n	80036f6 <BSP_LCD_DisplayStringAt+0xa6>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d002      	beq.n	80036b8 <BSP_LCD_DisplayStringAt+0x68>
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d011      	beq.n	80036da <BSP_LCD_DisplayStringAt+0x8a>
 80036b6:	e01e      	b.n	80036f6 <BSP_LCD_DisplayStringAt+0xa6>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a2b      	ldr	r2, [pc, #172]	; (800376c <BSP_LCD_DisplayStringAt+0x11c>)
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	8892      	ldrh	r2, [r2, #4]
 80036c4:	fb02 f303 	mul.w	r3, r2, r3
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	89fb      	ldrh	r3, [r7, #14]
 80036ce:	4413      	add	r3, r2
 80036d0:	83fb      	strh	r3, [r7, #30]
      break;
 80036d2:	e013      	b.n	80036fc <BSP_LCD_DisplayStringAt+0xac>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80036d4:	89fb      	ldrh	r3, [r7, #14]
 80036d6:	83fb      	strh	r3, [r7, #30]
      break;
 80036d8:	e010      	b.n	80036fc <BSP_LCD_DisplayStringAt+0xac>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <BSP_LCD_DisplayStringAt+0x11c>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	889b      	ldrh	r3, [r3, #4]
 80036e8:	fb12 f303 	smulbb	r3, r2, r3
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	83fb      	strh	r3, [r7, #30]
      break;
 80036f4:	e002      	b.n	80036fc <BSP_LCD_DisplayStringAt+0xac>
    }    
  default:
    {
      refcolumn = Xpos;
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	83fb      	strh	r3, [r7, #30]
      break;
 80036fa:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80036fc:	e012      	b.n	8003724 <BSP_LCD_DisplayStringAt+0xd4>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	89b9      	ldrh	r1, [r7, #12]
 8003704:	8bfb      	ldrh	r3, [r7, #30]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff78 	bl	80035fc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800370c:	4b17      	ldr	r3, [pc, #92]	; (800376c <BSP_LCD_DisplayStringAt+0x11c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	889a      	ldrh	r2, [r3, #4]
 8003712:	8bfb      	ldrh	r3, [r7, #30]
 8003714:	4413      	add	r3, r2
 8003716:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3301      	adds	r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
    i++;
 800371e:	8bbb      	ldrh	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2dc      	uxtb	r4, r3
 8003732:	f7ff fee7 	bl	8003504 <BSP_LCD_GetXSize>
 8003736:	4603      	mov	r3, r0
 8003738:	4619      	mov	r1, r3
 800373a:	8bbb      	ldrh	r3, [r7, #28]
 800373c:	4a0b      	ldr	r2, [pc, #44]	; (800376c <BSP_LCD_DisplayStringAt+0x11c>)
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	8892      	ldrh	r2, [r2, #4]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	1acb      	subs	r3, r1, r3
 8003748:	b29b      	uxth	r3, r3
 800374a:	4a08      	ldr	r2, [pc, #32]	; (800376c <BSP_LCD_DisplayStringAt+0x11c>)
 800374c:	6892      	ldr	r2, [r2, #8]
 800374e:	8892      	ldrh	r2, [r2, #4]
 8003750:	4293      	cmp	r3, r2
 8003752:	bfac      	ite	ge
 8003754:	2301      	movge	r3, #1
 8003756:	2300      	movlt	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	4023      	ands	r3, r4
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cd      	bne.n	80036fe <BSP_LCD_DisplayStringAt+0xae>
  }
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	3724      	adds	r7, #36	; 0x24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd90      	pop	{r4, r7, pc}
 800376c:	20000274 	.word	0x20000274

08003770 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	80fb      	strh	r3, [r7, #6]
 800377a:	460b      	mov	r3, r1
 800377c:	80bb      	strh	r3, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <BSP_LCD_DrawPixel+0x34>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d006      	beq.n	800379a <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <BSP_LCD_DrawPixel+0x34>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	88b9      	ldrh	r1, [r7, #4]
 8003796:	88f8      	ldrh	r0, [r7, #6]
 8003798:	4798      	blx	r3
  }
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000054 	.word	0x20000054

080037a8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
 80037b2:	460b      	mov	r3, r1
 80037b4:	80bb      	strh	r3, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <BSP_LCD_DrawHLine+0x6c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <BSP_LCD_DrawHLine+0x6c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a1c      	ldr	r4, [r3, #32]
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <BSP_LCD_DrawHLine+0x70>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b298      	uxth	r0, r3
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	88ba      	ldrh	r2, [r7, #4]
 80037d8:	88f9      	ldrh	r1, [r7, #6]
 80037da:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80037dc:	e015      	b.n	800380a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e00e      	b.n	8003802 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	4413      	add	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <BSP_LCD_DrawHLine+0x70>)
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	b292      	uxth	r2, r2
 80037f4:	88b9      	ldrh	r1, [r7, #4]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ffba 	bl	8003770 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3301      	adds	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	429a      	cmp	r2, r3
 8003808:	d3ec      	bcc.n	80037e4 <BSP_LCD_DrawHLine+0x3c>
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bd90      	pop	{r4, r7, pc}
 8003812:	bf00      	nop
 8003814:	20000054 	.word	0x20000054
 8003818:	20000274 	.word	0x20000274

0800381c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]
 8003826:	460b      	mov	r3, r1
 8003828:	80bb      	strh	r3, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <BSP_LCD_DrawVLine+0x6c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <BSP_LCD_DrawVLine+0x6c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <BSP_LCD_DrawVLine+0x70>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	b298      	uxth	r0, r3
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	88ba      	ldrh	r2, [r7, #4]
 800384c:	88f9      	ldrh	r1, [r7, #6]
 800384e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8003850:	e015      	b.n	800387e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e00e      	b.n	8003876 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	b29a      	uxth	r2, r3
 800385c:	88bb      	ldrh	r3, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	b299      	uxth	r1, r3
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <BSP_LCD_DrawVLine+0x70>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	b29a      	uxth	r2, r3
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff80 	bl	8003770 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3301      	adds	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	429a      	cmp	r2, r3
 800387c:	d3ec      	bcc.n	8003858 <BSP_LCD_DrawVLine+0x3c>
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bd90      	pop	{r4, r7, pc}
 8003886:	bf00      	nop
 8003888:	20000054 	.word	0x20000054
 800388c:	20000274 	.word	0x20000274

08003890 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4604      	mov	r4, r0
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4623      	mov	r3, r4
 80038a0:	80fb      	strh	r3, [r7, #6]
 80038a2:	4603      	mov	r3, r0
 80038a4:	80bb      	strh	r3, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	807b      	strh	r3, [r7, #2]
 80038aa:	4613      	mov	r3, r2
 80038ac:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	88b9      	ldrh	r1, [r7, #4]
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff77 	bl	80037a8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 80038ba:	88ba      	ldrh	r2, [r7, #4]
 80038bc:	883b      	ldrh	r3, [r7, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b299      	uxth	r1, r3
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff6c 	bl	80037a8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80038d0:	883a      	ldrh	r2, [r7, #0]
 80038d2:	88b9      	ldrh	r1, [r7, #4]
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff ffa0 	bl	800381c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	4413      	add	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	883a      	ldrh	r2, [r7, #0]
 80038ea:	88b9      	ldrh	r1, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff95 	bl	800381c <BSP_LCD_DrawVLine>
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
	...

080038fc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	80fb      	strh	r3, [r7, #6]
 8003906:	460b      	mov	r3, r1
 8003908:	80bb      	strh	r3, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	f1c3 0303 	rsb	r3, r3, #3
 8003916:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8003920:	e097      	b.n	8003a52 <BSP_LCD_DrawCircle+0x156>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	b29a      	uxth	r2, r3
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	4413      	add	r3, r2
 800392a:	b298      	uxth	r0, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	b29b      	uxth	r3, r3
 8003930:	88ba      	ldrh	r2, [r7, #4]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	b29b      	uxth	r3, r3
 8003936:	4a4c      	ldr	r2, [pc, #304]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	b292      	uxth	r2, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f7ff ff17 	bl	8003770 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	b29b      	uxth	r3, r3
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	b298      	uxth	r0, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	b29b      	uxth	r3, r3
 8003950:	88ba      	ldrh	r2, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	b29b      	uxth	r3, r3
 8003956:	4a44      	ldr	r2, [pc, #272]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	b292      	uxth	r2, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f7ff ff07 	bl	8003770 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	b29a      	uxth	r2, r3
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	4413      	add	r3, r2
 800396a:	b298      	uxth	r0, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	b29b      	uxth	r3, r3
 8003970:	88ba      	ldrh	r2, [r7, #4]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	b29b      	uxth	r3, r3
 8003976:	4a3c      	ldr	r2, [pc, #240]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	b292      	uxth	r2, r2
 800397c:	4619      	mov	r1, r3
 800397e:	f7ff fef7 	bl	8003770 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	b29b      	uxth	r3, r3
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	b298      	uxth	r0, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	b29b      	uxth	r3, r3
 8003990:	88ba      	ldrh	r2, [r7, #4]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	b29b      	uxth	r3, r3
 8003996:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	b292      	uxth	r2, r2
 800399c:	4619      	mov	r1, r3
 800399e:	f7ff fee7 	bl	8003770 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	4413      	add	r3, r2
 80039aa:	b298      	uxth	r0, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	88bb      	ldrh	r3, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	b292      	uxth	r2, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f7ff fed7 	bl	8003770 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	88fa      	ldrh	r2, [r7, #6]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b298      	uxth	r0, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	88bb      	ldrh	r3, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4a24      	ldr	r2, [pc, #144]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	b292      	uxth	r2, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	f7ff fec7 	bl	8003770 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	4413      	add	r3, r2
 80039ea:	b298      	uxth	r0, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	88bb      	ldrh	r3, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	b292      	uxth	r2, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7ff feb7 	bl	8003770 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	b298      	uxth	r0, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	88bb      	ldrh	r3, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <BSP_LCD_DrawCircle+0x16c>)
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	b292      	uxth	r2, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7ff fea7 	bl	8003770 <BSP_LCD_DrawPixel>

    if (D < 0)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da06      	bge.n	8003a36 <BSP_LCD_DrawCircle+0x13a>
    { 
      D += (CurX << 2) + 6;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3306      	adds	r3, #6
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00a      	b.n	8003a4c <BSP_LCD_DrawCircle+0x150>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	009a      	lsls	r2, r3, #2
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4413      	add	r3, r2
 8003a42:	330a      	adds	r3, #10
 8003a44:	617b      	str	r3, [r7, #20]
      CurY--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	f67f af63 	bls.w	8003922 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000274 	.word	0x20000274

08003a6c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	603a      	str	r2, [r7, #0]
 8003a76:	80fb      	strh	r3, [r7, #6]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	3312      	adds	r3, #18
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	3313      	adds	r3, #19
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	441a      	add	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	441a      	add	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	3315      	adds	r3, #21
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	061b      	lsls	r3, r3, #24
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	3316      	adds	r3, #22
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3317      	adds	r3, #23
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	441a      	add	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	441a      	add	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	3319      	adds	r3, #25
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	88b9      	ldrh	r1, [r7, #4]
 8003ade:	88f8      	ldrh	r0, [r7, #6]
 8003ae0:	f000 f9c6 	bl	8003e70 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <BSP_LCD_DrawBitmap+0xb0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <BSP_LCD_DrawBitmap+0xb0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	88b9      	ldrh	r1, [r7, #4]
 8003af6:	88f8      	ldrh	r0, [r7, #6]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003afc:	f7ff fd02 	bl	8003504 <BSP_LCD_GetXSize>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461c      	mov	r4, r3
 8003b04:	f7ff fd0a 	bl	800351c <BSP_LCD_GetYSize>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f000 f9ae 	bl	8003e70 <SetDisplayWindow>
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd90      	pop	{r4, r7, pc}
 8003b1c:	20000054 	.word	0x20000054

08003b20 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4623      	mov	r3, r4
 8003b30:	80fb      	strh	r3, [r7, #6]
 8003b32:	4603      	mov	r3, r0
 8003b34:	80bb      	strh	r3, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	807b      	strh	r3, [r7, #2]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	803b      	strh	r3, [r7, #0]
  #ifdef LCD_DRVTYPE_V1_1
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
  #else
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <BSP_LCD_FillRect+0x50>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fcf5 	bl	8003534 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8003b4a:	88bb      	ldrh	r3, [r7, #4]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	80ba      	strh	r2, [r7, #4]
 8003b50:	887a      	ldrh	r2, [r7, #2]
 8003b52:	88f8      	ldrh	r0, [r7, #6]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7ff fe27 	bl	80037a8 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8003b5a:	883b      	ldrh	r3, [r7, #0]
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	803a      	strh	r2, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f2      	bne.n	8003b4a <BSP_LCD_FillRect+0x2a>
  #endif
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000274 	.word	0x20000274

08003b74 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80fb      	strh	r3, [r7, #6]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	80bb      	strh	r3, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	f1c3 0303 	rsb	r3, r3, #3
 8003b8e:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003b98:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <BSP_LCD_FillCircle+0x114>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fcc8 	bl	8003534 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8003ba4:	e061      	b.n	8003c6a <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d021      	beq.n	8003bf0 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	88fa      	ldrh	r2, [r7, #6]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	b298      	uxth	r0, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	88bb      	ldrh	r3, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b299      	uxth	r1, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f7ff fded 	bl	80037a8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	b298      	uxth	r0, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	88ba      	ldrh	r2, [r7, #4]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	b299      	uxth	r1, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	f7ff fddc 	bl	80037a8 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d021      	beq.n	8003c3a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	b298      	uxth	r0, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	88ba      	ldrh	r2, [r7, #4]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	b299      	uxth	r1, r3
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	f7ff fdc8 	bl	80037a8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	88fa      	ldrh	r2, [r7, #6]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b298      	uxth	r0, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	88bb      	ldrh	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b299      	uxth	r1, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	f7ff fdb7 	bl	80037a8 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	da06      	bge.n	8003c4e <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	009a      	lsls	r2, r3, #2
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	3306      	adds	r3, #6
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e00a      	b.n	8003c64 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	009a      	lsls	r2, r3, #2
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4413      	add	r3, r2
 8003c5a:	330a      	adds	r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]
      CurY--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	3301      	adds	r3, #1
 8003c68:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d999      	bls.n	8003ba6 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	88b9      	ldrh	r1, [r7, #4]
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fe3f 	bl	80038fc <BSP_LCD_DrawCircle>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000274 	.word	0x20000274

08003c8c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	603a      	str	r2, [r7, #0]
 8003c96:	80fb      	strh	r3, [r7, #6]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	82fb      	strh	r3, [r7, #22]
 8003cac:	2300      	movs	r3, #0
 8003cae:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8003cbc:	4b63      	ldr	r3, [pc, #396]	; (8003e4c <DrawChar+0x1c0>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	88db      	ldrh	r3, [r3, #6]
 8003cc2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8003cc4:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <DrawChar+0x1c0>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	889b      	ldrh	r3, [r3, #4]
 8003cca:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8003ccc:	8afa      	ldrh	r2, [r7, #22]
 8003cce:	8abb      	ldrh	r3, [r7, #20]
 8003cd0:	fb12 f303 	smulbb	r3, r2, r3
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	331b      	adds	r3, #27
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4a5d      	ldr	r2, [pc, #372]	; (8003e50 <DrawChar+0x1c4>)
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8003ce2:	8afb      	ldrh	r3, [r7, #22]
 8003ce4:	8aba      	ldrh	r2, [r7, #20]
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	331b      	adds	r3, #27
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	141a      	asrs	r2, r3, #16
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <DrawChar+0x1c8>)
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8003cf6:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <DrawChar+0x1cc>)
 8003cf8:	2236      	movs	r2, #54	; 0x36
 8003cfa:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8003cfc:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <DrawChar+0x1d0>)
 8003cfe:	8abb      	ldrh	r3, [r7, #20]
 8003d00:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8003d02:	8abb      	ldrh	r3, [r7, #20]
 8003d04:	141a      	asrs	r2, r3, #16
 8003d06:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <DrawChar+0x1d4>)
 8003d08:	b292      	uxth	r2, r2
 8003d0a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8003d0c:	4a55      	ldr	r2, [pc, #340]	; (8003e64 <DrawChar+0x1d8>)
 8003d0e:	8afb      	ldrh	r3, [r7, #22]
 8003d10:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	141a      	asrs	r2, r3, #16
 8003d16:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <DrawChar+0x1dc>)
 8003d18:	b292      	uxth	r2, r2
 8003d1a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8003d1c:	8abb      	ldrh	r3, [r7, #20]
 8003d1e:	3307      	adds	r3, #7
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	da00      	bge.n	8003d26 <DrawChar+0x9a>
 8003d24:	3307      	adds	r3, #7
 8003d26:	10db      	asrs	r3, r3, #3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	8abb      	ldrh	r3, [r7, #20]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	e078      	b.n	8003e2e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8003d3c:	8abb      	ldrh	r3, [r7, #20]
 8003d3e:	3307      	adds	r3, #7
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da00      	bge.n	8003d46 <DrawChar+0xba>
 8003d44:	3307      	adds	r3, #7
 8003d46:	10db      	asrs	r3, r3, #3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8003d56:	8abb      	ldrh	r3, [r7, #20]
 8003d58:	3b11      	subs	r3, #17
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	d80c      	bhi.n	8003d78 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	041a      	lsls	r2, r3, #16
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	3202      	adds	r2, #2
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8003d78:	8abb      	ldrh	r3, [r7, #20]
 8003d7a:	3b09      	subs	r3, #9
 8003d7c:	2b07      	cmp	r3, #7
 8003d7e:	d807      	bhi.n	8003d90 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	3201      	adds	r2, #1
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8003d90:	8abb      	ldrh	r3, [r7, #20]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	2b07      	cmp	r3, #7
 8003d96:	d802      	bhi.n	8003d9e <DrawChar+0x112>
    {
      line =  pchar[0];
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	e03d      	b.n	8003e20 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8003da4:	8afa      	ldrh	r2, [r7, #22]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	8aba      	ldrh	r2, [r7, #20]
 8003dae:	fb03 f202 	mul.w	r2, r3, r2
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	4413      	add	r3, r2
 8003db6:	331b      	adds	r3, #27
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8003dbc:	8aba      	ldrh	r2, [r7, #20]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	1ad2      	subs	r2, r2, r3
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	2201      	movs	r2, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8003dd8:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <DrawChar+0x1c0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	b2d9      	uxtb	r1, r3
 8003dde:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <DrawChar+0x1e0>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4413      	add	r3, r2
 8003de4:	460a      	mov	r2, r1
 8003de6:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <DrawChar+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0a1a      	lsrs	r2, r3, #8
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	3301      	adds	r3, #1
 8003df2:	b2d1      	uxtb	r1, r2
 8003df4:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <DrawChar+0x1e0>)
 8003df6:	54d1      	strb	r1, [r2, r3]
 8003df8:	e00f      	b.n	8003e1a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <DrawChar+0x1c0>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	b2d9      	uxtb	r1, r3
 8003e00:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <DrawChar+0x1e0>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4413      	add	r3, r2
 8003e06:	460a      	mov	r2, r1
 8003e08:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <DrawChar+0x1c0>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	0a1a      	lsrs	r2, r3, #8
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	3301      	adds	r3, #1
 8003e14:	b2d1      	uxtb	r1, r2
 8003e16:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <DrawChar+0x1e0>)
 8003e18:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	8abb      	ldrh	r3, [r7, #20]
 8003e22:	6a3a      	ldr	r2, [r7, #32]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3bd      	bcc.n	8003da4 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	8afb      	ldrh	r3, [r7, #22]
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d382      	bcc.n	8003d3c <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8003e36:	88b9      	ldrh	r1, [r7, #4]
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	4a0c      	ldr	r2, [pc, #48]	; (8003e6c <DrawChar+0x1e0>)
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fe15 	bl	8003a6c <BSP_LCD_DrawBitmap>
}
 8003e42:	bf00      	nop
 8003e44:	3728      	adds	r7, #40	; 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000274 	.word	0x20000274
 8003e50:	20000282 	.word	0x20000282
 8003e54:	20000284 	.word	0x20000284
 8003e58:	2000028a 	.word	0x2000028a
 8003e5c:	20000292 	.word	0x20000292
 8003e60:	20000294 	.word	0x20000294
 8003e64:	20000296 	.word	0x20000296
 8003e68:	20000298 	.word	0x20000298
 8003e6c:	20000280 	.word	0x20000280

08003e70 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4604      	mov	r4, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4623      	mov	r3, r4
 8003e80:	80fb      	strh	r3, [r7, #6]
 8003e82:	4603      	mov	r3, r0
 8003e84:	80bb      	strh	r3, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <SetDisplayWindow+0x40>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <SetDisplayWindow+0x40>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69dc      	ldr	r4, [r3, #28]
 8003e9e:	883b      	ldrh	r3, [r7, #0]
 8003ea0:	887a      	ldrh	r2, [r7, #2]
 8003ea2:	88b9      	ldrh	r1, [r7, #4]
 8003ea4:	88f8      	ldrh	r0, [r7, #6]
 8003ea6:	47a0      	blx	r4
  }  
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	20000054 	.word	0x20000054

08003eb4 <GetAccellerationPacket>:
void GetPositionPacket(positionPKT *position, uint8_t *bytearray)
{
    memcpy(&position->data, bytearray, sizeof(pstndt));
}
void GetAccellerationPacket(accelPKT *accelleration, uint8_t *bytearray)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
    memcpy(&accelleration->data, bytearray, sizeof(accldt));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3303      	adds	r3, #3
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f004 fc43 	bl	8008752 <memcpy>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <CreateMovementPacketToByteArray>:
void GetRequestPacket(requestPKT *request, uint8_t *bytearray)
{
    memcpy(&request->data, bytearray, sizeof(reqdt));
}
uint8_t *CreateMovementPacketToByteArray(char direction, char speed, char rotation, bool buzzer)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	71fb      	strb	r3, [r7, #7]
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71bb      	strb	r3, [r7, #6]
 8003eea:	460b      	mov	r3, r1
 8003eec:	717b      	strb	r3, [r7, #5]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	713b      	strb	r3, [r7, #4]
    movementPKT movement;
    movement.paket.paketLen = movementPktDefault.paket.paketLen;
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <CreateMovementPacketToByteArray+0x6c>)
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	737b      	strb	r3, [r7, #13]
    movement.paket.paketType = movementPktDefault.paket.paketType;
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <CreateMovementPacketToByteArray+0x6c>)
 8003efa:	789b      	ldrb	r3, [r3, #2]
 8003efc:	73bb      	strb	r3, [r7, #14]
    movement.paket.packetNum = movementPktDefault.paket.packetNum;
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <CreateMovementPacketToByteArray+0x6c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	733b      	strb	r3, [r7, #12]
    movement.data.direction = direction;
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	73fb      	strb	r3, [r7, #15]
    movement.data.speed = speed;
 8003f08:	79bb      	ldrb	r3, [r7, #6]
 8003f0a:	743b      	strb	r3, [r7, #16]
    movement.data.rotation = rotation;
 8003f0c:	797b      	ldrb	r3, [r7, #5]
 8003f0e:	747b      	strb	r3, [r7, #17]
    movement.data.buzzer = buzzer;
 8003f10:	793b      	ldrb	r3, [r7, #4]
 8003f12:	74bb      	strb	r3, [r7, #18]
    uint8_t *paket = malloc(sizeof(mvmdt) + 2);
 8003f14:	2006      	movs	r0, #6
 8003f16:	f003 fd4d 	bl	80079b4 <malloc>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	617b      	str	r3, [r7, #20]
    memcpy(paket + 2, &movement.data, sizeof(mvmdt));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3302      	adds	r3, #2
 8003f22:	f8d7 200f 	ldr.w	r2, [r7, #15]
 8003f26:	601a      	str	r2, [r3, #0]
    paket[1] = movement.paket.packetNum;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	7b3a      	ldrb	r2, [r7, #12]
 8003f2e:	701a      	strb	r2, [r3, #0]
    paket[0] = movement.paket.paketLen;
 8003f30:	7b7a      	ldrb	r2, [r7, #13]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	701a      	strb	r2, [r3, #0]
    return paket;
 8003f36:	697b      	ldr	r3, [r7, #20]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd90      	pop	{r4, r7, pc}
 8003f40:	20000058 	.word	0x20000058

08003f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f4a:	f000 fed9 	bl	8004d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f4e:	f000 f9ad 	bl	80042ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f52:	f000 fb19 	bl	8004588 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f56:	f000 faf7 	bl	8004548 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003f5a:	f000 faa1 	bl	80044a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003f5e:	f000 fa11 	bl	8004384 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003f62:	f000 fa6f 	bl	8004444 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8003f66:	f000 fac5 	bl	80044f4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 2);
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	49b9      	ldr	r1, [pc, #740]	; (8004254 <main+0x310>)
 8003f6e:	48ba      	ldr	r0, [pc, #744]	; (8004258 <main+0x314>)
 8003f70:	f001 f8b0 	bl	80050d4 <HAL_ADC_Start_DMA>
  BSP_LCD_Init();
 8003f74:	f7ff fa9e 	bl	80034b4 <BSP_LCD_Init>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7ff fb0b 	bl	8003594 <BSP_LCD_Clear>

  // BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
  // BSP_LCD_FillRect(0, 0, 100, 100);
  // BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
  // BSP_LCD_FillRect(20, 20, 100, 100);
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003f7e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003f82:	f7ff fad7 	bl	8003534 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR(63, 190, 152));
 8003f86:	f643 50f3 	movw	r0, #15859	; 0x3df3
 8003f8a:	f7ff fae3 	bl	8003554 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font20);
 8003f8e:	48b3      	ldr	r0, [pc, #716]	; (800425c <main+0x318>)
 8003f90:	f7ff faf0 	bl	8003574 <BSP_LCD_SetFont>
  // BSP_LCD_DisplayStringAtLine(0, (uint8_t*) "Hello World");
  // BSP_LCD_DisplayStringAtLine(1, (uint8_t*) "Hello World");

  double bx = 0.0;
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double by = 0.0;
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  oldx = CENTER_X;
 8003fac:	4bac      	ldr	r3, [pc, #688]	; (8004260 <main+0x31c>)
 8003fae:	22c8      	movs	r2, #200	; 0xc8
 8003fb0:	801a      	strh	r2, [r3, #0]
  oldy = CENTER_Y;
 8003fb2:	4bac      	ldr	r3, [pc, #688]	; (8004264 <main+0x320>)
 8003fb4:	2296      	movs	r2, #150	; 0x96
 8003fb6:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, 4);
 8003fb8:	2104      	movs	r1, #4
 8003fba:	48ab      	ldr	r0, [pc, #684]	; (8004268 <main+0x324>)
 8003fbc:	f002 fa61 	bl	8006482 <HAL_GPIO_TogglePin>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 2);
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	49a4      	ldr	r1, [pc, #656]	; (8004254 <main+0x310>)
 8003fc4:	48a4      	ldr	r0, [pc, #656]	; (8004258 <main+0x314>)
 8003fc6:	f001 f885 	bl	80050d4 <HAL_ADC_Start_DMA>
    BSP_LCD_SetTextColor(LCD_COLOR(63, 190, 152));
 8003fca:	f643 50f3 	movw	r0, #15859	; 0x3df3
 8003fce:	f7ff fab1 	bl	8003534 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR(63, 190, 152));
 8003fd2:	f643 50f3 	movw	r0, #15859	; 0x3df3
 8003fd6:	f7ff fabd 	bl	8003554 <BSP_LCD_SetBackColor>
    BSP_LCD_FillRect(126, 0, 80, 58);
 8003fda:	233a      	movs	r3, #58	; 0x3a
 8003fdc:	2250      	movs	r2, #80	; 0x50
 8003fde:	2100      	movs	r1, #0
 8003fe0:	207e      	movs	r0, #126	; 0x7e
 8003fe2:	f7ff fd9d 	bl	8003b20 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003fe6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003fea:	f7ff faa3 	bl	8003534 <BSP_LCD_SetTextColor>
    sprintf(lcdText, "ACCELX: %d", accelarationPacket.data.accelx);
 8003fee:	4b9f      	ldr	r3, [pc, #636]	; (800426c <main+0x328>)
 8003ff0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	499e      	ldr	r1, [pc, #632]	; (8004270 <main+0x32c>)
 8003ff8:	489e      	ldr	r0, [pc, #632]	; (8004274 <main+0x330>)
 8003ffa:	f004 fab7 	bl	800856c <siprintf>
    BSP_LCD_DisplayStringAt(0, 0, lcdText, LEFT_MODE);
 8003ffe:	2303      	movs	r3, #3
 8004000:	4a9c      	ldr	r2, [pc, #624]	; (8004274 <main+0x330>)
 8004002:	2100      	movs	r1, #0
 8004004:	2000      	movs	r0, #0
 8004006:	f7ff fb23 	bl	8003650 <BSP_LCD_DisplayStringAt>
    sprintf(lcdText, "ACCELY: %d", accelarationPacket.data.accely);
 800400a:	4b98      	ldr	r3, [pc, #608]	; (800426c <main+0x328>)
 800400c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004010:	461a      	mov	r2, r3
 8004012:	4999      	ldr	r1, [pc, #612]	; (8004278 <main+0x334>)
 8004014:	4897      	ldr	r0, [pc, #604]	; (8004274 <main+0x330>)
 8004016:	f004 faa9 	bl	800856c <siprintf>
    BSP_LCD_DisplayStringAt(0, 20, lcdText, LEFT_MODE);
 800401a:	2303      	movs	r3, #3
 800401c:	4a95      	ldr	r2, [pc, #596]	; (8004274 <main+0x330>)
 800401e:	2114      	movs	r1, #20
 8004020:	2000      	movs	r0, #0
 8004022:	f7ff fb15 	bl	8003650 <BSP_LCD_DisplayStringAt>
    sprintf(lcdText, "ACCELZ: %d", accelarationPacket.data.accelz);
 8004026:	4b91      	ldr	r3, [pc, #580]	; (800426c <main+0x328>)
 8004028:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800402c:	461a      	mov	r2, r3
 800402e:	4993      	ldr	r1, [pc, #588]	; (800427c <main+0x338>)
 8004030:	4890      	ldr	r0, [pc, #576]	; (8004274 <main+0x330>)
 8004032:	f004 fa9b 	bl	800856c <siprintf>
    BSP_LCD_DisplayStringAt(0, 40, lcdText, LEFT_MODE);
 8004036:	2303      	movs	r3, #3
 8004038:	4a8e      	ldr	r2, [pc, #568]	; (8004274 <main+0x330>)
 800403a:	2128      	movs	r1, #40	; 0x28
 800403c:	2000      	movs	r0, #0
 800403e:	f7ff fb07 	bl	8003650 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004042:	2000      	movs	r0, #0
 8004044:	f7ff fa76 	bl	8003534 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(oldx, oldy, (int)(LENGTH / 5));
 8004048:	4b85      	ldr	r3, [pc, #532]	; (8004260 <main+0x31c>)
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	4a85      	ldr	r2, [pc, #532]	; (8004264 <main+0x320>)
 800404e:	8811      	ldrh	r1, [r2, #0]
 8004050:	2210      	movs	r2, #16
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fd8e 	bl	8003b74 <BSP_LCD_FillCircle>
    int posx = (int)(mapValuef(adcBuffer[0], 4096, 0, 0, 1) * LENGTH) + CENTER_X;
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <main+0x310>)
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004064:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8004068:	eddf 1a85 	vldr	s3, [pc, #532]	; 8004280 <main+0x33c>
 800406c:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8004280 <main+0x33c>
 8004070:	eddf 0a84 	vldr	s1, [pc, #528]	; 8004284 <main+0x340>
 8004074:	eeb0 0a67 	vmov.f32	s0, s15
 8004078:	f000 fb20 	bl	80046bc <mapValuef>
 800407c:	eef0 7a40 	vmov.f32	s15, s0
 8004080:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004288 <main+0x344>
 8004084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800408c:	ee17 3a90 	vmov	r3, s15
 8004090:	33c8      	adds	r3, #200	; 0xc8
 8004092:	613b      	str	r3, [r7, #16]
    int posy = (int)(mapValuef(adcBuffer[1], 0, 4096, 0, 1) * LENGTH) + CENTER_Y;
 8004094:	4b6f      	ldr	r3, [pc, #444]	; (8004254 <main+0x310>)
 8004096:	885b      	ldrh	r3, [r3, #2]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80040a4:	eddf 1a76 	vldr	s3, [pc, #472]	; 8004280 <main+0x33c>
 80040a8:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8004284 <main+0x340>
 80040ac:	eddf 0a74 	vldr	s1, [pc, #464]	; 8004280 <main+0x33c>
 80040b0:	eeb0 0a67 	vmov.f32	s0, s15
 80040b4:	f000 fb02 	bl	80046bc <mapValuef>
 80040b8:	eef0 7a40 	vmov.f32	s15, s0
 80040bc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004288 <main+0x344>
 80040c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c8:	ee17 3a90 	vmov	r3, s15
 80040cc:	3396      	adds	r3, #150	; 0x96
 80040ce:	60fb      	str	r3, [r7, #12]
    BSP_LCD_FillRect(CENTER_X, CENTER_Y, LENGTH, LENGTH);
 80040d0:	2350      	movs	r3, #80	; 0x50
 80040d2:	2250      	movs	r2, #80	; 0x50
 80040d4:	2196      	movs	r1, #150	; 0x96
 80040d6:	20c8      	movs	r0, #200	; 0xc8
 80040d8:	f7ff fd22 	bl	8003b20 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80040dc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80040e0:	f7ff fa28 	bl	8003534 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(CENTER_X - 1, CENTER_Y - 1, LENGTH + 2, LENGTH + 2);
 80040e4:	2352      	movs	r3, #82	; 0x52
 80040e6:	2252      	movs	r2, #82	; 0x52
 80040e8:	2195      	movs	r1, #149	; 0x95
 80040ea:	20c7      	movs	r0, #199	; 0xc7
 80040ec:	f7ff fbd0 	bl	8003890 <BSP_LCD_DrawRect>
    BSP_LCD_DrawVLine(CENTER_X + (int)(LENGTH / 2), CENTER_Y, LENGTH);
 80040f0:	2250      	movs	r2, #80	; 0x50
 80040f2:	2196      	movs	r1, #150	; 0x96
 80040f4:	20f0      	movs	r0, #240	; 0xf0
 80040f6:	f7ff fb91 	bl	800381c <BSP_LCD_DrawVLine>
    BSP_LCD_DrawHLine(CENTER_X, CENTER_Y + (int)(LENGTH / 2), LENGTH);
 80040fa:	2250      	movs	r2, #80	; 0x50
 80040fc:	21be      	movs	r1, #190	; 0xbe
 80040fe:	20c8      	movs	r0, #200	; 0xc8
 8004100:	f7ff fb52 	bl	80037a8 <BSP_LCD_DrawHLine>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8004104:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004108:	f7ff fa14 	bl	8003534 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(posx, posy, (int)(LENGTH / 5));
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	b29b      	uxth	r3, r3
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	b291      	uxth	r1, r2
 8004114:	2210      	movs	r2, #16
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff fd2c 	bl	8003b74 <BSP_LCD_FillCircle>
    oldx = posx;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	b29a      	uxth	r2, r3
 8004120:	4b4f      	ldr	r3, [pc, #316]	; (8004260 <main+0x31c>)
 8004122:	801a      	strh	r2, [r3, #0]
    oldy = posy;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	b29a      	uxth	r2, r3
 8004128:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <main+0x320>)
 800412a:	801a      	strh	r2, [r3, #0]
    bx += 10;
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	4b56      	ldr	r3, [pc, #344]	; (800428c <main+0x348>)
 8004132:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004136:	f7fc f8b1 	bl	800029c <__adddf3>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    by += 10;
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	4b51      	ldr	r3, [pc, #324]	; (800428c <main+0x348>)
 8004148:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800414c:	f7fc f8a6 	bl	800029c <__adddf3>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	e9c7 2306 	strd	r2, r3, [r7, #24]

    char direction = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]
    uint8_t speed = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	75bb      	strb	r3, [r7, #22]
    uint8_t rotation = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	757b      	strb	r3, [r7, #21]
    bool buzzer = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	72fb      	strb	r3, [r7, #11]

    if (adcBuffer[1] > 3000)
 8004168:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <main+0x310>)
 800416a:	885b      	ldrh	r3, [r3, #2]
 800416c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004170:	4293      	cmp	r3, r2
 8004172:	d91b      	bls.n	80041ac <main+0x268>
    {
      direction = 2;
 8004174:	2302      	movs	r3, #2
 8004176:	75fb      	strb	r3, [r7, #23]
      speed = mapValuef(adcBuffer[0], 4096, 3000, 100, 10);
 8004178:	4b36      	ldr	r3, [pc, #216]	; (8004254 <main+0x310>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004184:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 8004188:	eddf 1a41 	vldr	s3, [pc, #260]	; 8004290 <main+0x34c>
 800418c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8004294 <main+0x350>
 8004190:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8004284 <main+0x340>
 8004194:	eeb0 0a67 	vmov.f32	s0, s15
 8004198:	f000 fa90 	bl	80046bc <mapValuef>
 800419c:	eef0 7a40 	vmov.f32	s15, s0
 80041a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80041a8:	793b      	ldrb	r3, [r7, #4]
 80041aa:	75bb      	strb	r3, [r7, #22]
    }
    if (adcBuffer[1] < 1000)
 80041ac:	4b29      	ldr	r3, [pc, #164]	; (8004254 <main+0x310>)
 80041ae:	885b      	ldrh	r3, [r3, #2]
 80041b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041b4:	d21b      	bcs.n	80041ee <main+0x2aa>
    {
      direction = 1;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
      speed = mapValuef(adcBuffer[0], 3000, 4096, 100, 10);
 80041ba:	4b26      	ldr	r3, [pc, #152]	; (8004254 <main+0x310>)
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 80041ca:	eddf 1a31 	vldr	s3, [pc, #196]	; 8004290 <main+0x34c>
 80041ce:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8004284 <main+0x340>
 80041d2:	eddf 0a30 	vldr	s1, [pc, #192]	; 8004294 <main+0x350>
 80041d6:	eeb0 0a67 	vmov.f32	s0, s15
 80041da:	f000 fa6f 	bl	80046bc <mapValuef>
 80041de:	eef0 7a40 	vmov.f32	s15, s0
 80041e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80041ea:	793b      	ldrb	r3, [r7, #4]
 80041ec:	75bb      	strb	r3, [r7, #22]
    }
    if (adcBuffer[0] > 3000)
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <main+0x310>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <main+0x2ba>
    {
      rotation = 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	757b      	strb	r3, [r7, #21]
    }
    if (adcBuffer[0] < 1000)
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <main+0x310>)
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004206:	d201      	bcs.n	800420c <main+0x2c8>
    {
      rotation = 2;
 8004208:	2302      	movs	r3, #2
 800420a:	757b      	strb	r3, [r7, #21]
    }

    CurrentPacketPointer = CreateMovementPacketToByteArray(direction,
 800420c:	7afb      	ldrb	r3, [r7, #11]
 800420e:	7d7a      	ldrb	r2, [r7, #21]
 8004210:	7db9      	ldrb	r1, [r7, #22]
 8004212:	7df8      	ldrb	r0, [r7, #23]
 8004214:	f7ff fe5e 	bl	8003ed4 <CreateMovementPacketToByteArray>
 8004218:	4603      	mov	r3, r0
 800421a:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <main+0x354>)
 800421c:	6013      	str	r3, [r2, #0]
                                                           speed, rotation, buzzer);
    // SendPacket(CurrentPacketPointer);
    HAL_UART_Transmit(&huart6, CurrentPacketPointer + 2,
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <main+0x354>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1c99      	adds	r1, r3, #2
                      movementPktDefault.paket.paketLen, 100);
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <main+0x358>)
 8004226:	785b      	ldrb	r3, [r3, #1]
    HAL_UART_Transmit(&huart6, CurrentPacketPointer + 2,
 8004228:	b29a      	uxth	r2, r3
 800422a:	2364      	movs	r3, #100	; 0x64
 800422c:	481c      	ldr	r0, [pc, #112]	; (80042a0 <main+0x35c>)
 800422e:	f002 ff6f 	bl	8007110 <HAL_UART_Transmit>
    // CurrentPacketPointer = CreateRequestToByteArray(AccelPacketNum);

    // SendPacket(CurrentPacketPointer);
    HAL_UART_Receive(&huart6, readbuffer, accelPktDefault.paket.paketLen,
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <main+0x360>)
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	b29a      	uxth	r2, r3
 8004238:	23fa      	movs	r3, #250	; 0xfa
 800423a:	491b      	ldr	r1, [pc, #108]	; (80042a8 <main+0x364>)
 800423c:	4818      	ldr	r0, [pc, #96]	; (80042a0 <main+0x35c>)
 800423e:	f002 fff2 	bl	8007226 <HAL_UART_Receive>
                     250);

    GetAccellerationPacket(&accelarationPacket, readbuffer);
 8004242:	4919      	ldr	r1, [pc, #100]	; (80042a8 <main+0x364>)
 8004244:	4809      	ldr	r0, [pc, #36]	; (800426c <main+0x328>)
 8004246:	f7ff fe35 	bl	8003eb4 <GetAccellerationPacket>

    HAL_Delay(0);
 800424a:	2000      	movs	r0, #0
 800424c:	f000 fdca 	bl	8004de4 <HAL_Delay>
  {
 8004250:	e6b2      	b.n	8003fb8 <main+0x74>
 8004252:	bf00      	nop
 8004254:	20000798 	.word	0x20000798
 8004258:	200005ec 	.word	0x200005ec
 800425c:	20000000 	.word	0x20000000
 8004260:	200005e6 	.word	0x200005e6
 8004264:	200005e8 	.word	0x200005e8
 8004268:	40020800 	.word	0x40020800
 800426c:	200007ac 	.word	0x200007ac
 8004270:	0800a744 	.word	0x0800a744
 8004274:	20000778 	.word	0x20000778
 8004278:	0800a750 	.word	0x0800a750
 800427c:	0800a75c 	.word	0x0800a75c
 8004280:	00000000 	.word	0x00000000
 8004284:	45800000 	.word	0x45800000
 8004288:	42a00000 	.word	0x42a00000
 800428c:	40240000 	.word	0x40240000
 8004290:	42c80000 	.word	0x42c80000
 8004294:	453b8000 	.word	0x453b8000
 8004298:	200007a8 	.word	0x200007a8
 800429c:	20000060 	.word	0x20000060
 80042a0:	20000730 	.word	0x20000730
 80042a4:	20000068 	.word	0x20000068
 80042a8:	2000079c 	.word	0x2000079c

080042ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b094      	sub	sp, #80	; 0x50
 80042b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042b2:	f107 0320 	add.w	r3, r7, #32
 80042b6:	2230      	movs	r2, #48	; 0x30
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f004 f9b9 	bl	8008632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042c0:	f107 030c 	add.w	r3, r7, #12
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <SystemClock_Config+0xd0>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a28      	ldr	r2, [pc, #160]	; (800437c <SystemClock_Config+0xd0>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <SystemClock_Config+0xd0>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80042ec:	2300      	movs	r3, #0
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <SystemClock_Config+0xd4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80042f8:	4a21      	ldr	r2, [pc, #132]	; (8004380 <SystemClock_Config+0xd4>)
 80042fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <SystemClock_Config+0xd4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800430c:	2302      	movs	r3, #2
 800430e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004310:	2301      	movs	r3, #1
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004314:	2310      	movs	r3, #16
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004318:	2302      	movs	r3, #2
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800431c:	2300      	movs	r3, #0
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004320:	2310      	movs	r3, #16
 8004322:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004324:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800432a:	2304      	movs	r3, #4
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800432e:	2307      	movs	r3, #7
 8004330:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004332:	f107 0320 	add.w	r3, r7, #32
 8004336:	4618      	mov	r0, r3
 8004338:	f002 fa02 	bl	8006740 <HAL_RCC_OscConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004342:	f000 fa0f 	bl	8004764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004346:	230f      	movs	r3, #15
 8004348:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800434a:	2302      	movs	r3, #2
 800434c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004356:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f002 fc64 	bl	8006c30 <HAL_RCC_ClockConfig>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800436e:	f000 f9f9 	bl	8004764 <Error_Handler>
  }
}
 8004372:	bf00      	nop
 8004374:	3750      	adds	r7, #80	; 0x50
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000

08004384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800438a:	463b      	mov	r3, r7
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004396:	4b28      	ldr	r3, [pc, #160]	; (8004438 <MX_ADC1_Init+0xb4>)
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <MX_ADC1_Init+0xb8>)
 800439a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800439c:	4b26      	ldr	r3, [pc, #152]	; (8004438 <MX_ADC1_Init+0xb4>)
 800439e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80043a4:	4b24      	ldr	r3, [pc, #144]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80043aa:	4b23      	ldr	r3, [pc, #140]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043b6:	4b20      	ldr	r3, [pc, #128]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043c4:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <MX_ADC1_Init+0xbc>)
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043d2:	2202      	movs	r2, #2
 80043d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043de:	4b16      	ldr	r3, [pc, #88]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043e4:	4814      	ldr	r0, [pc, #80]	; (8004438 <MX_ADC1_Init+0xb4>)
 80043e6:	f000 fd21 	bl	8004e2c <HAL_ADC_Init>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80043f0:	f000 f9b8 	bl	8004764 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80043f4:	2309      	movs	r3, #9
 80043f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80043f8:	2301      	movs	r3, #1
 80043fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004400:	463b      	mov	r3, r7
 8004402:	4619      	mov	r1, r3
 8004404:	480c      	ldr	r0, [pc, #48]	; (8004438 <MX_ADC1_Init+0xb4>)
 8004406:	f000 ff73 	bl	80052f0 <HAL_ADC_ConfigChannel>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004410:	f000 f9a8 	bl	8004764 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004414:	230a      	movs	r3, #10
 8004416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004418:	2302      	movs	r3, #2
 800441a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800441c:	463b      	mov	r3, r7
 800441e:	4619      	mov	r1, r3
 8004420:	4805      	ldr	r0, [pc, #20]	; (8004438 <MX_ADC1_Init+0xb4>)
 8004422:	f000 ff65 	bl	80052f0 <HAL_ADC_ConfigChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800442c:	f000 f99a 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200005ec 	.word	0x200005ec
 800443c:	40012000 	.word	0x40012000
 8004440:	0f000001 	.word	0x0f000001

08004444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <MX_I2C1_Init+0x50>)
 800444a:	4a13      	ldr	r2, [pc, #76]	; (8004498 <MX_I2C1_Init+0x54>)
 800444c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800444e:	4b11      	ldr	r3, [pc, #68]	; (8004494 <MX_I2C1_Init+0x50>)
 8004450:	4a12      	ldr	r2, [pc, #72]	; (800449c <MX_I2C1_Init+0x58>)
 8004452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <MX_I2C1_Init+0x50>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <MX_I2C1_Init+0x50>)
 800445c:	2200      	movs	r2, #0
 800445e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <MX_I2C1_Init+0x50>)
 8004462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <MX_I2C1_Init+0x50>)
 800446a:	2200      	movs	r2, #0
 800446c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <MX_I2C1_Init+0x50>)
 8004470:	2200      	movs	r2, #0
 8004472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <MX_I2C1_Init+0x50>)
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <MX_I2C1_Init+0x50>)
 800447c:	2200      	movs	r2, #0
 800447e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004480:	4804      	ldr	r0, [pc, #16]	; (8004494 <MX_I2C1_Init+0x50>)
 8004482:	f002 f819 	bl	80064b8 <HAL_I2C_Init>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800448c:	f000 f96a 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000694 	.word	0x20000694
 8004498:	40005400 	.word	0x40005400
 800449c:	000186a0 	.word	0x000186a0

080044a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80044a4:	4b11      	ldr	r3, [pc, #68]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <MX_USART2_UART_Init+0x50>)
 80044a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044c6:	220c      	movs	r2, #12
 80044c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80044d6:	4805      	ldr	r0, [pc, #20]	; (80044ec <MX_USART2_UART_Init+0x4c>)
 80044d8:	f002 fdca 	bl	8007070 <HAL_UART_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80044e2:	f000 f93f 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	200006e8 	.word	0x200006e8
 80044f0:	40004400 	.word	0x40004400

080044f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 80044fa:	4a12      	ldr	r2, [pc, #72]	; (8004544 <MX_USART6_UART_Init+0x50>)
 80044fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 8004500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004504:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 800451a:	220c      	movs	r2, #12
 800451c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 8004520:	2200      	movs	r2, #0
 8004522:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 8004526:	2200      	movs	r2, #0
 8004528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800452a:	4805      	ldr	r0, [pc, #20]	; (8004540 <MX_USART6_UART_Init+0x4c>)
 800452c:	f002 fda0 	bl	8007070 <HAL_UART_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004536:	f000 f915 	bl	8004764 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000730 	.word	0x20000730
 8004544:	40011400 	.word	0x40011400

08004548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <MX_DMA_Init+0x3c>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <MX_DMA_Init+0x3c>)
 8004558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b09      	ldr	r3, [pc, #36]	; (8004584 <MX_DMA_Init+0x3c>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800456a:	2200      	movs	r2, #0
 800456c:	2100      	movs	r1, #0
 800456e:	2038      	movs	r0, #56	; 0x38
 8004570:	f001 fa43 	bl	80059fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004574:	2038      	movs	r0, #56	; 0x38
 8004576:	f001 fa5c 	bl	8005a32 <HAL_NVIC_EnableIRQ>

}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800

08004588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458e:	f107 0314 	add.w	r3, r7, #20
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	60da      	str	r2, [r3, #12]
 800459c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	4b42      	ldr	r3, [pc, #264]	; (80046ac <MX_GPIO_Init+0x124>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4a41      	ldr	r2, [pc, #260]	; (80046ac <MX_GPIO_Init+0x124>)
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <MX_GPIO_Init+0x124>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <MX_GPIO_Init+0x124>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	4a3a      	ldr	r2, [pc, #232]	; (80046ac <MX_GPIO_Init+0x124>)
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ca:	4b38      	ldr	r3, [pc, #224]	; (80046ac <MX_GPIO_Init+0x124>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b34      	ldr	r3, [pc, #208]	; (80046ac <MX_GPIO_Init+0x124>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4a33      	ldr	r2, [pc, #204]	; (80046ac <MX_GPIO_Init+0x124>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <MX_GPIO_Init+0x124>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <MX_GPIO_Init+0x124>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <MX_GPIO_Init+0x124>)
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	6313      	str	r3, [r2, #48]	; 0x30
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <MX_GPIO_Init+0x124>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 800460e:	2200      	movs	r2, #0
 8004610:	2192      	movs	r1, #146	; 0x92
 8004612:	4827      	ldr	r0, [pc, #156]	; (80046b0 <MX_GPIO_Init+0x128>)
 8004614:	f001 ff1c 	bl	8006450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8004618:	2200      	movs	r2, #0
 800461a:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800461e:	4825      	ldr	r0, [pc, #148]	; (80046b4 <MX_GPIO_Init+0x12c>)
 8004620:	f001 ff16 	bl	8006450 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8004624:	2200      	movs	r2, #0
 8004626:	f240 4179 	movw	r1, #1145	; 0x479
 800462a:	4823      	ldr	r0, [pc, #140]	; (80046b8 <MX_GPIO_Init+0x130>)
 800462c:	f001 ff10 	bl	8006450 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004636:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800463a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004640:	f107 0314 	add.w	r3, r7, #20
 8004644:	4619      	mov	r1, r3
 8004646:	481a      	ldr	r0, [pc, #104]	; (80046b0 <MX_GPIO_Init+0x128>)
 8004648:	f001 fd7e 	bl	8006148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 800464c:	2392      	movs	r3, #146	; 0x92
 800464e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004650:	2301      	movs	r3, #1
 8004652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4619      	mov	r1, r3
 8004662:	4813      	ldr	r0, [pc, #76]	; (80046b0 <MX_GPIO_Init+0x128>)
 8004664:	f001 fd70 	bl	8006148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8004668:	f240 73f3 	movw	r3, #2035	; 0x7f3
 800466c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467a:	f107 0314 	add.w	r3, r7, #20
 800467e:	4619      	mov	r1, r3
 8004680:	480c      	ldr	r0, [pc, #48]	; (80046b4 <MX_GPIO_Init+0x12c>)
 8004682:	f001 fd61 	bl	8006148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4
 8004686:	f240 4379 	movw	r3, #1145	; 0x479
 800468a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800468c:	2301      	movs	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	4619      	mov	r1, r3
 800469e:	4806      	ldr	r0, [pc, #24]	; (80046b8 <MX_GPIO_Init+0x130>)
 80046a0:	f001 fd52 	bl	8006148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80046a4:	bf00      	nop
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020800 	.word	0x40020800
 80046b4:	40020000 	.word	0x40020000
 80046b8:	40020400 	.word	0x40020400

080046bc <mapValuef>:

/* USER CODE BEGIN 4 */
float mapValuef(float x, float in_min, float in_max, float out_min,
                float out_max)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80046c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80046ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80046ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80046d2:	ed87 2a01 	vstr	s4, [r7, #4]
  float res = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80046d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80046da:	edd7 7a04 	vldr	s15, [r7, #16]
 80046de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80046e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80046ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80046ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80046f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80046f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80046fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004702:	ed97 7a02 	vldr	s14, [r7, #8]
 8004706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]

  if (res < out_min)
 800470e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004712:	edd7 7a02 	vldr	s15, [r7, #8]
 8004716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800471a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471e:	d502      	bpl.n	8004726 <mapValuef+0x6a>
  {
    res = out_min;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e00a      	b.n	800473c <mapValuef+0x80>
  }
  else if (res > out_max)
 8004726:	ed97 7a07 	vldr	s14, [r7, #28]
 800472a:	edd7 7a01 	vldr	s15, [r7, #4]
 800472e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	dd01      	ble.n	800473c <mapValuef+0x80>
  {
    res = out_max;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	61fb      	str	r3, [r7, #28]
  }
  return res;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	ee07 3a90 	vmov	s15, r3
}
 8004742:	eeb0 0a67 	vmov.f32	s0, s15
 8004746:	3724      	adds	r7, #36	; 0x24
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  // adc_val = buffer;
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004768:	b672      	cpsid	i
}
 800476a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800476c:	e7fe      	b.n	800476c <Error_Handler+0x8>
	...

08004770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <HAL_MspInit+0x4c>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	4a0f      	ldr	r2, [pc, #60]	; (80047bc <HAL_MspInit+0x4c>)
 8004780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004784:	6453      	str	r3, [r2, #68]	; 0x44
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_MspInit+0x4c>)
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <HAL_MspInit+0x4c>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	4a08      	ldr	r2, [pc, #32]	; (80047bc <HAL_MspInit+0x4c>)
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6413      	str	r3, [r2, #64]	; 0x40
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_MspInit+0x4c>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047ae:	2007      	movs	r0, #7
 80047b0:	f001 f918 	bl	80059e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800

080047c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c8:	f107 0314 	add.w	r3, r7, #20
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a40      	ldr	r2, [pc, #256]	; (80048e0 <HAL_ADC_MspInit+0x120>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d179      	bne.n	80048d6 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6453      	str	r3, [r2, #68]	; 0x44
 80047f2:	4b3c      	ldr	r3, [pc, #240]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	4a37      	ldr	r2, [pc, #220]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	6313      	str	r3, [r2, #48]	; 0x30
 800480e:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	4a30      	ldr	r2, [pc, #192]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 8004824:	f043 0302 	orr.w	r3, r3, #2
 8004828:	6313      	str	r3, [r2, #48]	; 0x30
 800482a:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <HAL_ADC_MspInit+0x124>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004836:	2301      	movs	r3, #1
 8004838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800483a:	2303      	movs	r3, #3
 800483c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	4619      	mov	r1, r3
 8004848:	4827      	ldr	r0, [pc, #156]	; (80048e8 <HAL_ADC_MspInit+0x128>)
 800484a:	f001 fc7d 	bl	8006148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800484e:	2302      	movs	r3, #2
 8004850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004852:	2303      	movs	r3, #3
 8004854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485a:	f107 0314 	add.w	r3, r7, #20
 800485e:	4619      	mov	r1, r3
 8004860:	4822      	ldr	r0, [pc, #136]	; (80048ec <HAL_ADC_MspInit+0x12c>)
 8004862:	f001 fc71 	bl	8006148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004866:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <HAL_ADC_MspInit+0x134>)
 800486a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800486c:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 800486e:	2200      	movs	r2, #0
 8004870:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800487e:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 8004880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004884:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004886:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 8004888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800488e:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 8004890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004894:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 8004898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800489c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048a4:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048aa:	4811      	ldr	r0, [pc, #68]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 80048ac:	f001 f8dc 	bl	8005a68 <HAL_DMA_Init>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80048b6:	f7ff ff55 	bl	8004764 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
 80048c0:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <HAL_ADC_MspInit+0x130>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2100      	movs	r1, #0
 80048ca:	2012      	movs	r0, #18
 80048cc:	f001 f895 	bl	80059fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80048d0:	2012      	movs	r0, #18
 80048d2:	f001 f8ae 	bl	8005a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048d6:	bf00      	nop
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40012000 	.word	0x40012000
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40020800 	.word	0x40020800
 80048ec:	40020400 	.word	0x40020400
 80048f0:	20000634 	.word	0x20000634
 80048f4:	40026410 	.word	0x40026410

080048f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a19      	ldr	r2, [pc, #100]	; (800497c <HAL_I2C_MspInit+0x84>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d12c      	bne.n	8004974 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	4b18      	ldr	r3, [pc, #96]	; (8004980 <HAL_I2C_MspInit+0x88>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_I2C_MspInit+0x88>)
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	6313      	str	r3, [r2, #48]	; 0x30
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_I2C_MspInit+0x88>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800493a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800493c:	2312      	movs	r3, #18
 800493e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004944:	2303      	movs	r3, #3
 8004946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004948:	2304      	movs	r3, #4
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	4619      	mov	r1, r3
 8004952:	480c      	ldr	r0, [pc, #48]	; (8004984 <HAL_I2C_MspInit+0x8c>)
 8004954:	f001 fbf8 	bl	8006148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_I2C_MspInit+0x88>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_I2C_MspInit+0x88>)
 8004962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004966:	6413      	str	r3, [r2, #64]	; 0x40
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_I2C_MspInit+0x88>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004974:	bf00      	nop
 8004976:	3728      	adds	r7, #40	; 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40005400 	.word	0x40005400
 8004980:	40023800 	.word	0x40023800
 8004984:	40020400 	.word	0x40020400

08004988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	; 0x30
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	f107 031c 	add.w	r3, r7, #28
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	60da      	str	r2, [r3, #12]
 800499e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <HAL_UART_MspInit+0xe8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d12c      	bne.n	8004a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <HAL_UART_MspInit+0xec>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a30      	ldr	r2, [pc, #192]	; (8004a74 <HAL_UART_MspInit+0xec>)
 80049b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	4b2e      	ldr	r3, [pc, #184]	; (8004a74 <HAL_UART_MspInit+0xec>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <HAL_UART_MspInit+0xec>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <HAL_UART_MspInit+0xec>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <HAL_UART_MspInit+0xec>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80049e2:	230c      	movs	r3, #12
 80049e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ee:	2300      	movs	r3, #0
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049f2:	2307      	movs	r3, #7
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f6:	f107 031c 	add.w	r3, r7, #28
 80049fa:	4619      	mov	r1, r3
 80049fc:	481e      	ldr	r0, [pc, #120]	; (8004a78 <HAL_UART_MspInit+0xf0>)
 80049fe:	f001 fba3 	bl	8006148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004a02:	e031      	b.n	8004a68 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <HAL_UART_MspInit+0xf4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d12c      	bne.n	8004a68 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <HAL_UART_MspInit+0xec>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_UART_MspInit+0xec>)
 8004a18:	f043 0320 	orr.w	r3, r3, #32
 8004a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_UART_MspInit+0xec>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_UART_MspInit+0xec>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <HAL_UART_MspInit+0xec>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <HAL_UART_MspInit+0xec>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a54:	2303      	movs	r3, #3
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004a58:	2308      	movs	r3, #8
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a5c:	f107 031c 	add.w	r3, r7, #28
 8004a60:	4619      	mov	r1, r3
 8004a62:	4805      	ldr	r0, [pc, #20]	; (8004a78 <HAL_UART_MspInit+0xf0>)
 8004a64:	f001 fb70 	bl	8006148 <HAL_GPIO_Init>
}
 8004a68:	bf00      	nop
 8004a6a:	3730      	adds	r7, #48	; 0x30
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40004400 	.word	0x40004400
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40020000 	.word	0x40020000
 8004a7c:	40011400 	.word	0x40011400

08004a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a84:	e7fe      	b.n	8004a84 <NMI_Handler+0x4>

08004a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a8a:	e7fe      	b.n	8004a8a <HardFault_Handler+0x4>

08004a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a90:	e7fe      	b.n	8004a90 <MemManage_Handler+0x4>

08004a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a96:	e7fe      	b.n	8004a96 <BusFault_Handler+0x4>

08004a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a9c:	e7fe      	b.n	8004a9c <UsageFault_Handler+0x4>

08004a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004acc:	f000 f96a 	bl	8004da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004ad8:	4802      	ldr	r0, [pc, #8]	; (8004ae4 <ADC_IRQHandler+0x10>)
 8004ada:	f000 f9ea 	bl	8004eb2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200005ec 	.word	0x200005ec

08004ae8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004aec:	4802      	ldr	r0, [pc, #8]	; (8004af8 <DMA2_Stream0_IRQHandler+0x10>)
 8004aee:	f001 f8c1 	bl	8005c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000634 	.word	0x20000634

08004afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return 1;
 8004b00:	2301      	movs	r3, #1
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <_kill>:

int _kill(int pid, int sig)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b16:	f003 fdef 	bl	80086f8 <__errno>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2216      	movs	r2, #22
 8004b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_exit>:

void _exit (int status)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b34:	f04f 31ff 	mov.w	r1, #4294967295
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ffe7 	bl	8004b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b3e:	e7fe      	b.n	8004b3e <_exit+0x12>

08004b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	e00a      	b.n	8004b68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b52:	f3af 8000 	nop.w
 8004b56:	4601      	mov	r1, r0
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	60ba      	str	r2, [r7, #8]
 8004b5e:	b2ca      	uxtb	r2, r1
 8004b60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3301      	adds	r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	dbf0      	blt.n	8004b52 <_read+0x12>
  }

  return len;
 8004b70:	687b      	ldr	r3, [r7, #4]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b086      	sub	sp, #24
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e009      	b.n	8004ba0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	60ba      	str	r2, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	dbf1      	blt.n	8004b8c <_write+0x12>
  }
  return len;
 8004ba8:	687b      	ldr	r3, [r7, #4]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <_close>:

int _close(int file)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bda:	605a      	str	r2, [r3, #4]
  return 0;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <_isatty>:

int _isatty(int file)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bf2:	2301      	movs	r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c24:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <_sbrk+0x5c>)
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <_sbrk+0x60>)
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c30:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <_sbrk+0x64>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <_sbrk+0x64>)
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <_sbrk+0x68>)
 8004c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <_sbrk+0x64>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d207      	bcs.n	8004c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c4c:	f003 fd54 	bl	80086f8 <__errno>
 8004c50:	4603      	mov	r3, r0
 8004c52:	220c      	movs	r2, #12
 8004c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	e009      	b.n	8004c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <_sbrk+0x64>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c62:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <_sbrk+0x64>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	4a05      	ldr	r2, [pc, #20]	; (8004c80 <_sbrk+0x64>)
 8004c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20018000 	.word	0x20018000
 8004c7c:	00000400 	.word	0x00000400
 8004c80:	200007b4 	.word	0x200007b4
 8004c84:	20000908 	.word	0x20000908

08004c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <SystemInit+0x20>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	4a05      	ldr	r2, [pc, #20]	; (8004ca8 <SystemInit+0x20>)
 8004c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	e000ed00 	.word	0xe000ed00

08004cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ce4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cb0:	f7ff ffea 	bl	8004c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cb4:	480c      	ldr	r0, [pc, #48]	; (8004ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cb6:	490d      	ldr	r1, [pc, #52]	; (8004cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cb8:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cbc:	e002      	b.n	8004cc4 <LoopCopyDataInit>

08004cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cc2:	3304      	adds	r3, #4

08004cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cc8:	d3f9      	bcc.n	8004cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ccc:	4c0a      	ldr	r4, [pc, #40]	; (8004cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cd0:	e001      	b.n	8004cd6 <LoopFillZerobss>

08004cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cd4:	3204      	adds	r2, #4

08004cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cd8:	d3fb      	bcc.n	8004cd2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004cda:	f003 fd13 	bl	8008704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cde:	f7ff f931 	bl	8003f44 <main>
  bx  lr    
 8004ce2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ce4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cec:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8004cf0:	0800bcdc 	.word	0x0800bcdc
  ldr r2, =_sbss
 8004cf4:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8004cf8:	20000908 	.word	0x20000908

08004cfc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cfc:	e7fe      	b.n	8004cfc <DMA1_Stream0_IRQHandler>
	...

08004d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <HAL_Init+0x40>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a0d      	ldr	r2, [pc, #52]	; (8004d40 <HAL_Init+0x40>)
 8004d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_Init+0x40>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <HAL_Init+0x40>)
 8004d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <HAL_Init+0x40>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a07      	ldr	r2, [pc, #28]	; (8004d40 <HAL_Init+0x40>)
 8004d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d28:	2003      	movs	r0, #3
 8004d2a:	f000 fe5b 	bl	80059e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f000 f808 	bl	8004d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d34:	f7ff fd1c 	bl	8004770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023c00 	.word	0x40023c00

08004d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_InitTick+0x54>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <HAL_InitTick+0x58>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4619      	mov	r1, r3
 8004d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fe73 	bl	8005a4e <HAL_SYSTICK_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e00e      	b.n	8004d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0f      	cmp	r3, #15
 8004d76:	d80a      	bhi.n	8004d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	f000 fe3b 	bl	80059fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d84:	4a06      	ldr	r2, [pc, #24]	; (8004da0 <HAL_InitTick+0x5c>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000070 	.word	0x20000070
 8004d9c:	20000078 	.word	0x20000078
 8004da0:	20000074 	.word	0x20000074

08004da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_IncTick+0x20>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_IncTick+0x24>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4413      	add	r3, r2
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <HAL_IncTick+0x24>)
 8004db6:	6013      	str	r3, [r2, #0]
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20000078 	.word	0x20000078
 8004dc8:	200007b8 	.word	0x200007b8

08004dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return uwTick;
 8004dd0:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <HAL_GetTick+0x14>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	200007b8 	.word	0x200007b8

08004de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dec:	f7ff ffee 	bl	8004dcc <HAL_GetTick>
 8004df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d005      	beq.n	8004e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_Delay+0x44>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e0a:	bf00      	nop
 8004e0c:	f7ff ffde 	bl	8004dcc <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d8f7      	bhi.n	8004e0c <HAL_Delay+0x28>
  {
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000078 	.word	0x20000078

08004e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e033      	b.n	8004eaa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fcb8 	bl	80047c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d118      	bne.n	8004e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e72:	f023 0302 	bic.w	r3, r3, #2
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fb58 	bl	8005534 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
 8004e9a:	e001      	b.n	8004ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d049      	beq.n	8004f7c <HAL_ADC_IRQHandler+0xca>
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d046      	beq.n	8004f7c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d12b      	bne.n	8004f6c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d127      	bne.n	8004f6c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d006      	beq.n	8004f38 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d119      	bne.n	8004f6c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0220 	bic.w	r2, r2, #32
 8004f46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fbef 	bl	8004750 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0212 	mvn.w	r2, #18
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d057      	beq.n	8005042 <HAL_ADC_IRQHandler+0x190>
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d054      	beq.n	8005042 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d139      	bne.n	8005032 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d006      	beq.n	8004fda <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d12b      	bne.n	8005032 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d124      	bne.n	8005032 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11d      	bne.n	8005032 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d119      	bne.n	8005032 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800500c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d105      	bne.n	8005032 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0201 	orr.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fbfc 	bl	8005830 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 020c 	mvn.w	r2, #12
 8005040:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <HAL_ADC_IRQHandler+0x1d6>
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d014      	beq.n	8005088 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b01      	cmp	r3, #1
 800506a:	d10d      	bne.n	8005088 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f925 	bl	80052c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0201 	mvn.w	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005096:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_ADC_IRQHandler+0x218>
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d012      	beq.n	80050ca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a8:	f043 0202 	orr.w	r2, r3, #2
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0220 	mvn.w	r2, #32
 80050b8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f90e 	bl	80052dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0220 	mvn.w	r2, #32
 80050c8:	601a      	str	r2, [r3, #0]
  }
}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_ADC_Start_DMA+0x1e>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e0ce      	b.n	8005290 <HAL_ADC_Start_DMA+0x1bc>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d018      	beq.n	800513a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005118:	4b5f      	ldr	r3, [pc, #380]	; (8005298 <HAL_ADC_Start_DMA+0x1c4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5f      	ldr	r2, [pc, #380]	; (800529c <HAL_ADC_Start_DMA+0x1c8>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	0c9a      	lsrs	r2, r3, #18
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800512c:	e002      	b.n	8005134 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f9      	bne.n	800512e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005148:	d107      	bne.n	800515a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005158:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 8086 	bne.w	8005276 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005194:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a8:	d106      	bne.n	80051b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	f023 0206 	bic.w	r2, r3, #6
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
 80051b6:	e002      	b.n	80051be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051c6:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <HAL_ADC_Start_DMA+0x1cc>)
 80051c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	4a35      	ldr	r2, [pc, #212]	; (80052a4 <HAL_ADC_Start_DMA+0x1d0>)
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <HAL_ADC_Start_DMA+0x1d4>)
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	4a33      	ldr	r2, [pc, #204]	; (80052ac <HAL_ADC_Start_DMA+0x1d8>)
 80051e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051fa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	334c      	adds	r3, #76	; 0x4c
 8005216:	4619      	mov	r1, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f000 fcd2 	bl	8005bc4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10f      	bne.n	800524c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d129      	bne.n	800528e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005248:	609a      	str	r2, [r3, #8]
 800524a:	e020      	b.n	800528e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <HAL_ADC_Start_DMA+0x1dc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d11b      	bne.n	800528e <HAL_ADC_Start_DMA+0x1ba>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d114      	bne.n	800528e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	e00b      	b.n	800528e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0210 	orr.w	r2, r3, #16
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000070 	.word	0x20000070
 800529c:	431bde83 	.word	0x431bde83
 80052a0:	40012300 	.word	0x40012300
 80052a4:	0800572d 	.word	0x0800572d
 80052a8:	080057e7 	.word	0x080057e7
 80052ac:	08005803 	.word	0x08005803
 80052b0:	40012000 	.word	0x40012000

080052b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_ADC_ConfigChannel+0x1c>
 8005308:	2302      	movs	r3, #2
 800530a:	e105      	b.n	8005518 <HAL_ADC_ConfigChannel+0x228>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b09      	cmp	r3, #9
 800531a:	d925      	bls.n	8005368 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68d9      	ldr	r1, [r3, #12]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	3b1e      	subs	r3, #30
 8005332:	2207      	movs	r2, #7
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43da      	mvns	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	400a      	ands	r2, r1
 8005340:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68d9      	ldr	r1, [r3, #12]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	4618      	mov	r0, r3
 8005354:	4603      	mov	r3, r0
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4403      	add	r3, r0
 800535a:	3b1e      	subs	r3, #30
 800535c:	409a      	lsls	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	e022      	b.n	80053ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6919      	ldr	r1, [r3, #16]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	2207      	movs	r2, #7
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43da      	mvns	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	400a      	ands	r2, r1
 800538a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6919      	ldr	r1, [r3, #16]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	4618      	mov	r0, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4403      	add	r3, r0
 80053a4:	409a      	lsls	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b06      	cmp	r3, #6
 80053b4:	d824      	bhi.n	8005400 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	3b05      	subs	r3, #5
 80053c8:	221f      	movs	r2, #31
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43da      	mvns	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	400a      	ands	r2, r1
 80053d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4618      	mov	r0, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	3b05      	subs	r3, #5
 80053f2:	fa00 f203 	lsl.w	r2, r0, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	635a      	str	r2, [r3, #52]	; 0x34
 80053fe:	e04c      	b.n	800549a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	d824      	bhi.n	8005452 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	3b23      	subs	r3, #35	; 0x23
 800541a:	221f      	movs	r2, #31
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43da      	mvns	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	400a      	ands	r2, r1
 8005428:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	4618      	mov	r0, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	3b23      	subs	r3, #35	; 0x23
 8005444:	fa00 f203 	lsl.w	r2, r0, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
 8005450:	e023      	b.n	800549a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	3b41      	subs	r3, #65	; 0x41
 8005464:	221f      	movs	r2, #31
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43da      	mvns	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	400a      	ands	r2, r1
 8005472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	4618      	mov	r0, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	3b41      	subs	r3, #65	; 0x41
 800548e:	fa00 f203 	lsl.w	r2, r0, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800549a:	4b22      	ldr	r3, [pc, #136]	; (8005524 <HAL_ADC_ConfigChannel+0x234>)
 800549c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a21      	ldr	r2, [pc, #132]	; (8005528 <HAL_ADC_ConfigChannel+0x238>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d109      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x1cc>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b12      	cmp	r3, #18
 80054ae:	d105      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a19      	ldr	r2, [pc, #100]	; (8005528 <HAL_ADC_ConfigChannel+0x238>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d123      	bne.n	800550e <HAL_ADC_ConfigChannel+0x21e>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d003      	beq.n	80054d6 <HAL_ADC_ConfigChannel+0x1e6>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b11      	cmp	r3, #17
 80054d4:	d11b      	bne.n	800550e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d111      	bne.n	800550e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054ea:	4b10      	ldr	r3, [pc, #64]	; (800552c <HAL_ADC_ConfigChannel+0x23c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a10      	ldr	r2, [pc, #64]	; (8005530 <HAL_ADC_ConfigChannel+0x240>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	0c9a      	lsrs	r2, r3, #18
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005500:	e002      	b.n	8005508 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	3b01      	subs	r3, #1
 8005506:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f9      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40012300 	.word	0x40012300
 8005528:	40012000 	.word	0x40012000
 800552c:	20000070 	.word	0x20000070
 8005530:	431bde83 	.word	0x431bde83

08005534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800553c:	4b79      	ldr	r3, [pc, #484]	; (8005724 <ADC_Init+0x1f0>)
 800553e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	431a      	orrs	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800558c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	4a58      	ldr	r2, [pc, #352]	; (8005728 <ADC_Init+0x1f4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d022      	beq.n	8005612 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6899      	ldr	r1, [r3, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	e00f      	b.n	8005632 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0202 	bic.w	r2, r2, #2
 8005640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6899      	ldr	r1, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	7e1b      	ldrb	r3, [r3, #24]
 800564c:	005a      	lsls	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01b      	beq.n	8005698 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800567e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	3b01      	subs	r3, #1
 800568c:	035a      	lsls	r2, r3, #13
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	e007      	b.n	80056a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	051a      	lsls	r2, r3, #20
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6899      	ldr	r1, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ea:	025a      	lsls	r2, r3, #9
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6899      	ldr	r1, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	029a      	lsls	r2, r3, #10
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	609a      	str	r2, [r3, #8]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40012300 	.word	0x40012300
 8005728:	0f000001 	.word	0x0f000001

0800572c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005742:	2b00      	cmp	r3, #0
 8005744:	d13c      	bne.n	80057c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d12b      	bne.n	80057b8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005764:	2b00      	cmp	r3, #0
 8005766:	d127      	bne.n	80057b8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005780:	2b00      	cmp	r3, #0
 8005782:	d119      	bne.n	80057b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0220 	bic.w	r2, r2, #32
 8005792:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7fe ffc9 	bl	8004750 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80057be:	e00e      	b.n	80057de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fd85 	bl	80052dc <HAL_ADC_ErrorCallback>
}
 80057d2:	e004      	b.n	80057de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff fd5d 	bl	80052b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2240      	movs	r2, #64	; 0x40
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581a:	f043 0204 	orr.w	r2, r3, #4
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff fd5a 	bl	80052dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800586c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005876:	4a04      	ldr	r2, [pc, #16]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	60d3      	str	r3, [r2, #12]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	e000ed00 	.word	0xe000ed00

0800588c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	f003 0307 	and.w	r3, r3, #7
}
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	db0b      	blt.n	80058d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	f003 021f 	and.w	r2, r3, #31
 80058c0:	4907      	ldr	r1, [pc, #28]	; (80058e0 <__NVIC_EnableIRQ+0x38>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	2001      	movs	r0, #1
 80058ca:	fa00 f202 	lsl.w	r2, r0, r2
 80058ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e100 	.word	0xe000e100

080058e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	6039      	str	r1, [r7, #0]
 80058ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	db0a      	blt.n	800590e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	490c      	ldr	r1, [pc, #48]	; (8005930 <__NVIC_SetPriority+0x4c>)
 80058fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005902:	0112      	lsls	r2, r2, #4
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	440b      	add	r3, r1
 8005908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800590c:	e00a      	b.n	8005924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4908      	ldr	r1, [pc, #32]	; (8005934 <__NVIC_SetPriority+0x50>)
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	3b04      	subs	r3, #4
 800591c:	0112      	lsls	r2, r2, #4
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	440b      	add	r3, r1
 8005922:	761a      	strb	r2, [r3, #24]
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	e000e100 	.word	0xe000e100
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005938:	b480      	push	{r7}
 800593a:	b089      	sub	sp, #36	; 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f1c3 0307 	rsb	r3, r3, #7
 8005952:	2b04      	cmp	r3, #4
 8005954:	bf28      	it	cs
 8005956:	2304      	movcs	r3, #4
 8005958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3304      	adds	r3, #4
 800595e:	2b06      	cmp	r3, #6
 8005960:	d902      	bls.n	8005968 <NVIC_EncodePriority+0x30>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3b03      	subs	r3, #3
 8005966:	e000      	b.n	800596a <NVIC_EncodePriority+0x32>
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43da      	mvns	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	401a      	ands	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005980:	f04f 31ff 	mov.w	r1, #4294967295
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43d9      	mvns	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005990:	4313      	orrs	r3, r2
         );
}
 8005992:	4618      	mov	r0, r3
 8005994:	3724      	adds	r7, #36	; 0x24
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b0:	d301      	bcc.n	80059b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059b2:	2301      	movs	r3, #1
 80059b4:	e00f      	b.n	80059d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059b6:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <SysTick_Config+0x40>)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059be:	210f      	movs	r1, #15
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	f7ff ff8e 	bl	80058e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <SysTick_Config+0x40>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ce:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <SysTick_Config+0x40>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000e010 	.word	0xe000e010

080059e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff29 	bl	8005844 <__NVIC_SetPriorityGrouping>
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4603      	mov	r3, r0
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a0c:	f7ff ff3e 	bl	800588c <__NVIC_GetPriorityGrouping>
 8005a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	6978      	ldr	r0, [r7, #20]
 8005a18:	f7ff ff8e 	bl	8005938 <NVIC_EncodePriority>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ff5d 	bl	80058e4 <__NVIC_SetPriority>
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	4603      	mov	r3, r0
 8005a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff ff31 	bl	80058a8 <__NVIC_EnableIRQ>
}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff ffa2 	bl	80059a0 <SysTick_Config>
 8005a5c:	4603      	mov	r3, r0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a74:	f7ff f9aa 	bl	8004dcc <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e099      	b.n	8005bb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aa4:	e00f      	b.n	8005ac6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aa6:	f7ff f991 	bl	8004dcc <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b05      	cmp	r3, #5
 8005ab2:	d908      	bls.n	8005ac6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2203      	movs	r2, #3
 8005abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e078      	b.n	8005bb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e8      	bne.n	8005aa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4b38      	ldr	r3, [pc, #224]	; (8005bc0 <HAL_DMA_Init+0x158>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d107      	bne.n	8005b30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0307 	bic.w	r3, r3, #7
 8005b46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d117      	bne.n	8005b8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fa6f 	bl	8006050 <DMA_CheckFifoParam>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2240      	movs	r2, #64	; 0x40
 8005b7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b86:	2301      	movs	r3, #1
 8005b88:	e016      	b.n	8005bb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa26 	bl	8005fe4 <DMA_CalcBaseAndBitshift>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba0:	223f      	movs	r2, #63	; 0x3f
 8005ba2:	409a      	lsls	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	f010803f 	.word	0xf010803f

08005bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d101      	bne.n	8005bea <HAL_DMA_Start_IT+0x26>
 8005be6:	2302      	movs	r3, #2
 8005be8:	e040      	b.n	8005c6c <HAL_DMA_Start_IT+0xa8>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d12f      	bne.n	8005c5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f9b8 	bl	8005f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	223f      	movs	r2, #63	; 0x3f
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0216 	orr.w	r2, r2, #22
 8005c32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0208 	orr.w	r2, r2, #8
 8005c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e005      	b.n	8005c6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
 8005c68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c80:	4b8e      	ldr	r3, [pc, #568]	; (8005ebc <HAL_DMA_IRQHandler+0x248>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a8e      	ldr	r2, [pc, #568]	; (8005ec0 <HAL_DMA_IRQHandler+0x24c>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0a9b      	lsrs	r3, r3, #10
 8005c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	409a      	lsls	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01a      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d013      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0204 	bic.w	r2, r2, #4
 8005cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ccc:	2208      	movs	r2, #8
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	f043 0201 	orr.w	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d02:	2201      	movs	r2, #1
 8005d04:	409a      	lsls	r2, r3
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0e:	f043 0202 	orr.w	r2, r3, #2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d012      	beq.n	8005d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d38:	2204      	movs	r2, #4
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d44:	f043 0204 	orr.w	r2, r3, #4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	2210      	movs	r2, #16
 8005d52:	409a      	lsls	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d043      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d03c      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6e:	2210      	movs	r2, #16
 8005d70:	409a      	lsls	r2, r3
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d018      	beq.n	8005db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d108      	bne.n	8005da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d024      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	e01f      	b.n	8005de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01b      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
 8005db4:	e016      	b.n	8005de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d107      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0208 	bic.w	r2, r2, #8
 8005dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de8:	2220      	movs	r2, #32
 8005dea:	409a      	lsls	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 808f 	beq.w	8005f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8087 	beq.w	8005f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d136      	bne.n	8005e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0216 	bic.w	r2, r2, #22
 8005e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <HAL_DMA_IRQHandler+0x1da>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0208 	bic.w	r2, r2, #8
 8005e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	223f      	movs	r2, #63	; 0x3f
 8005e64:	409a      	lsls	r2, r3
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d07e      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
        }
        return;
 8005e8a:	e079      	b.n	8005f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01d      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10d      	bne.n	8005ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d031      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
 8005eb8:	e02c      	b.n	8005f14 <HAL_DMA_IRQHandler+0x2a0>
 8005eba:	bf00      	nop
 8005ebc:	20000070 	.word	0x20000070
 8005ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d023      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
 8005ed4:	e01e      	b.n	8005f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10f      	bne.n	8005f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0210 	bic.w	r2, r2, #16
 8005ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d032      	beq.n	8005f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d022      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3301      	adds	r3, #1
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d307      	bcc.n	8005f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f2      	bne.n	8005f40 <HAL_DMA_IRQHandler+0x2cc>
 8005f5a:	e000      	b.n	8005f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
 8005f7e:	e000      	b.n	8005f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f80:	bf00      	nop
    }
  }
}
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d108      	bne.n	8005fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fc6:	e007      	b.n	8005fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]
}
 8005fd8:	bf00      	nop
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	3b10      	subs	r3, #16
 8005ff4:	4a14      	ldr	r2, [pc, #80]	; (8006048 <DMA_CalcBaseAndBitshift+0x64>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	091b      	lsrs	r3, r3, #4
 8005ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ffe:	4a13      	ldr	r2, [pc, #76]	; (800604c <DMA_CalcBaseAndBitshift+0x68>)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d909      	bls.n	8006026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	1d1a      	adds	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	659a      	str	r2, [r3, #88]	; 0x58
 8006024:	e007      	b.n	8006036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800602e:	f023 0303 	bic.w	r3, r3, #3
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	aaaaaaab 	.word	0xaaaaaaab
 800604c:	0800b950 	.word	0x0800b950

08006050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11f      	bne.n	80060aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d856      	bhi.n	800611e <DMA_CheckFifoParam+0xce>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <DMA_CheckFifoParam+0x28>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	08006089 	.word	0x08006089
 800607c:	0800609b 	.word	0x0800609b
 8006080:	08006089 	.word	0x08006089
 8006084:	0800611f 	.word	0x0800611f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d046      	beq.n	8006122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006098:	e043      	b.n	8006122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060a2:	d140      	bne.n	8006126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a8:	e03d      	b.n	8006126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b2:	d121      	bne.n	80060f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d837      	bhi.n	800612a <DMA_CheckFifoParam+0xda>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <DMA_CheckFifoParam+0x70>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060d7 	.word	0x080060d7
 80060c8:	080060d1 	.word	0x080060d1
 80060cc:	080060e9 	.word	0x080060e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
      break;
 80060d4:	e030      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d025      	beq.n	800612e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e6:	e022      	b.n	800612e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060f0:	d11f      	bne.n	8006132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060f6:	e01c      	b.n	8006132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d903      	bls.n	8006106 <DMA_CheckFifoParam+0xb6>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b03      	cmp	r3, #3
 8006102:	d003      	beq.n	800610c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006104:	e018      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	73fb      	strb	r3, [r7, #15]
      break;
 800610a:	e015      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00e      	beq.n	8006136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      break;
 800611c:	e00b      	b.n	8006136 <DMA_CheckFifoParam+0xe6>
      break;
 800611e:	bf00      	nop
 8006120:	e00a      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      break;
 8006122:	bf00      	nop
 8006124:	e008      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      break;
 8006126:	bf00      	nop
 8006128:	e006      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      break;
 800612a:	bf00      	nop
 800612c:	e004      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      break;
 800612e:	bf00      	nop
 8006130:	e002      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      break;   
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <DMA_CheckFifoParam+0xe8>
      break;
 8006136:	bf00      	nop
    }
  } 
  
  return status; 
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	e159      	b.n	8006418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006164:	2201      	movs	r2, #1
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4013      	ands	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	429a      	cmp	r2, r3
 800617e:	f040 8148 	bne.w	8006412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b01      	cmp	r3, #1
 800618c:	d005      	beq.n	800619a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006196:	2b02      	cmp	r3, #2
 8006198:	d130      	bne.n	80061fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	2203      	movs	r2, #3
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	43db      	mvns	r3, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4013      	ands	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061d0:	2201      	movs	r2, #1
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	43db      	mvns	r3, r3
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4013      	ands	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	f003 0201 	and.w	r2, r3, #1
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	2b03      	cmp	r3, #3
 8006206:	d017      	beq.n	8006238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	2203      	movs	r2, #3
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	4013      	ands	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d123      	bne.n	800628c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	08da      	lsrs	r2, r3, #3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3208      	adds	r2, #8
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	220f      	movs	r2, #15
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	43db      	mvns	r3, r3
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	4013      	ands	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4313      	orrs	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	08da      	lsrs	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3208      	adds	r2, #8
 8006286:	69b9      	ldr	r1, [r7, #24]
 8006288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	2203      	movs	r2, #3
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0203 	and.w	r2, r3, #3
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 80a2 	beq.w	8006412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	4b57      	ldr	r3, [pc, #348]	; (8006430 <HAL_GPIO_Init+0x2e8>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	4a56      	ldr	r2, [pc, #344]	; (8006430 <HAL_GPIO_Init+0x2e8>)
 80062d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062dc:	6453      	str	r3, [r2, #68]	; 0x44
 80062de:	4b54      	ldr	r3, [pc, #336]	; (8006430 <HAL_GPIO_Init+0x2e8>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062ea:	4a52      	ldr	r2, [pc, #328]	; (8006434 <HAL_GPIO_Init+0x2ec>)
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	089b      	lsrs	r3, r3, #2
 80062f0:	3302      	adds	r3, #2
 80062f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	220f      	movs	r2, #15
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a49      	ldr	r2, [pc, #292]	; (8006438 <HAL_GPIO_Init+0x2f0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d019      	beq.n	800634a <HAL_GPIO_Init+0x202>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a48      	ldr	r2, [pc, #288]	; (800643c <HAL_GPIO_Init+0x2f4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_GPIO_Init+0x1fe>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a47      	ldr	r2, [pc, #284]	; (8006440 <HAL_GPIO_Init+0x2f8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00d      	beq.n	8006342 <HAL_GPIO_Init+0x1fa>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a46      	ldr	r2, [pc, #280]	; (8006444 <HAL_GPIO_Init+0x2fc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d007      	beq.n	800633e <HAL_GPIO_Init+0x1f6>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a45      	ldr	r2, [pc, #276]	; (8006448 <HAL_GPIO_Init+0x300>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_GPIO_Init+0x1f2>
 8006336:	2304      	movs	r3, #4
 8006338:	e008      	b.n	800634c <HAL_GPIO_Init+0x204>
 800633a:	2307      	movs	r3, #7
 800633c:	e006      	b.n	800634c <HAL_GPIO_Init+0x204>
 800633e:	2303      	movs	r3, #3
 8006340:	e004      	b.n	800634c <HAL_GPIO_Init+0x204>
 8006342:	2302      	movs	r3, #2
 8006344:	e002      	b.n	800634c <HAL_GPIO_Init+0x204>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_GPIO_Init+0x204>
 800634a:	2300      	movs	r3, #0
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	f002 0203 	and.w	r2, r2, #3
 8006352:	0092      	lsls	r2, r2, #2
 8006354:	4093      	lsls	r3, r2
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800635c:	4935      	ldr	r1, [pc, #212]	; (8006434 <HAL_GPIO_Init+0x2ec>)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	3302      	adds	r3, #2
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800636a:	4b38      	ldr	r3, [pc, #224]	; (800644c <HAL_GPIO_Init+0x304>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	43db      	mvns	r3, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4013      	ands	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800638e:	4a2f      	ldr	r2, [pc, #188]	; (800644c <HAL_GPIO_Init+0x304>)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <HAL_GPIO_Init+0x304>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	43db      	mvns	r3, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063b8:	4a24      	ldr	r2, [pc, #144]	; (800644c <HAL_GPIO_Init+0x304>)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063be:	4b23      	ldr	r3, [pc, #140]	; (800644c <HAL_GPIO_Init+0x304>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4013      	ands	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063e2:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_GPIO_Init+0x304>)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063e8:	4b18      	ldr	r3, [pc, #96]	; (800644c <HAL_GPIO_Init+0x304>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4013      	ands	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800640c:	4a0f      	ldr	r2, [pc, #60]	; (800644c <HAL_GPIO_Init+0x304>)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	f67f aea2 	bls.w	8006164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3724      	adds	r7, #36	; 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800
 8006434:	40013800 	.word	0x40013800
 8006438:	40020000 	.word	0x40020000
 800643c:	40020400 	.word	0x40020400
 8006440:	40020800 	.word	0x40020800
 8006444:	40020c00 	.word	0x40020c00
 8006448:	40021000 	.word	0x40021000
 800644c:	40013c00 	.word	0x40013c00

08006450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	807b      	strh	r3, [r7, #2]
 800645c:	4613      	mov	r3, r2
 800645e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006460:	787b      	ldrb	r3, [r7, #1]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006466:	887a      	ldrh	r2, [r7, #2]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800646c:	e003      	b.n	8006476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800646e:	887b      	ldrh	r3, [r7, #2]
 8006470:	041a      	lsls	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	619a      	str	r2, [r3, #24]
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006494:	887a      	ldrh	r2, [r7, #2]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4013      	ands	r3, r2
 800649a:	041a      	lsls	r2, r3, #16
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	43d9      	mvns	r1, r3
 80064a0:	887b      	ldrh	r3, [r7, #2]
 80064a2:	400b      	ands	r3, r1
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	619a      	str	r2, [r3, #24]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e12b      	b.n	8006722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fe fa0a 	bl	80048f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2224      	movs	r2, #36	; 0x24
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800650a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800651a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800651c:	f000 fd80 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
 8006520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4a81      	ldr	r2, [pc, #516]	; (800672c <HAL_I2C_Init+0x274>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d807      	bhi.n	800653c <HAL_I2C_Init+0x84>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4a80      	ldr	r2, [pc, #512]	; (8006730 <HAL_I2C_Init+0x278>)
 8006530:	4293      	cmp	r3, r2
 8006532:	bf94      	ite	ls
 8006534:	2301      	movls	r3, #1
 8006536:	2300      	movhi	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	e006      	b.n	800654a <HAL_I2C_Init+0x92>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4a7d      	ldr	r2, [pc, #500]	; (8006734 <HAL_I2C_Init+0x27c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	bf94      	ite	ls
 8006544:	2301      	movls	r3, #1
 8006546:	2300      	movhi	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e0e7      	b.n	8006722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a78      	ldr	r2, [pc, #480]	; (8006738 <HAL_I2C_Init+0x280>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	0c9b      	lsrs	r3, r3, #18
 800655c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a6a      	ldr	r2, [pc, #424]	; (800672c <HAL_I2C_Init+0x274>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d802      	bhi.n	800658c <HAL_I2C_Init+0xd4>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	3301      	adds	r3, #1
 800658a:	e009      	b.n	80065a0 <HAL_I2C_Init+0xe8>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	4a69      	ldr	r2, [pc, #420]	; (800673c <HAL_I2C_Init+0x284>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	099b      	lsrs	r3, r3, #6
 800659e:	3301      	adds	r3, #1
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	430b      	orrs	r3, r1
 80065a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	495c      	ldr	r1, [pc, #368]	; (800672c <HAL_I2C_Init+0x274>)
 80065bc:	428b      	cmp	r3, r1
 80065be:	d819      	bhi.n	80065f4 <HAL_I2C_Init+0x13c>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1e59      	subs	r1, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065d4:	400b      	ands	r3, r1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <HAL_I2C_Init+0x138>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1e59      	subs	r1, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80065e8:	3301      	adds	r3, #1
 80065ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ee:	e051      	b.n	8006694 <HAL_I2C_Init+0x1dc>
 80065f0:	2304      	movs	r3, #4
 80065f2:	e04f      	b.n	8006694 <HAL_I2C_Init+0x1dc>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d111      	bne.n	8006620 <HAL_I2C_Init+0x168>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1e58      	subs	r0, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6859      	ldr	r1, [r3, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	440b      	add	r3, r1
 800660a:	fbb0 f3f3 	udiv	r3, r0, r3
 800660e:	3301      	adds	r3, #1
 8006610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006614:	2b00      	cmp	r3, #0
 8006616:	bf0c      	ite	eq
 8006618:	2301      	moveq	r3, #1
 800661a:	2300      	movne	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	e012      	b.n	8006646 <HAL_I2C_Init+0x18e>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	1e58      	subs	r0, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6859      	ldr	r1, [r3, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	0099      	lsls	r1, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	fbb0 f3f3 	udiv	r3, r0, r3
 8006636:	3301      	adds	r3, #1
 8006638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf0c      	ite	eq
 8006640:	2301      	moveq	r3, #1
 8006642:	2300      	movne	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Init+0x196>
 800664a:	2301      	movs	r3, #1
 800664c:	e022      	b.n	8006694 <HAL_I2C_Init+0x1dc>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10e      	bne.n	8006674 <HAL_I2C_Init+0x1bc>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1e58      	subs	r0, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6859      	ldr	r1, [r3, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	440b      	add	r3, r1
 8006664:	fbb0 f3f3 	udiv	r3, r0, r3
 8006668:	3301      	adds	r3, #1
 800666a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800666e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006672:	e00f      	b.n	8006694 <HAL_I2C_Init+0x1dc>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	1e58      	subs	r0, r3, #1
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6859      	ldr	r1, [r3, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	0099      	lsls	r1, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	fbb0 f3f3 	udiv	r3, r0, r3
 800668a:	3301      	adds	r3, #1
 800668c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	6809      	ldr	r1, [r1, #0]
 8006698:	4313      	orrs	r3, r2
 800669a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6911      	ldr	r1, [r2, #16]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68d2      	ldr	r2, [r2, #12]
 80066ce:	4311      	orrs	r1, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	000186a0 	.word	0x000186a0
 8006730:	001e847f 	.word	0x001e847f
 8006734:	003d08ff 	.word	0x003d08ff
 8006738:	431bde83 	.word	0x431bde83
 800673c:	10624dd3 	.word	0x10624dd3

08006740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e267      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d075      	beq.n	800684a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800675e:	4b88      	ldr	r3, [pc, #544]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 030c 	and.w	r3, r3, #12
 8006766:	2b04      	cmp	r3, #4
 8006768:	d00c      	beq.n	8006784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800676a:	4b85      	ldr	r3, [pc, #532]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006772:	2b08      	cmp	r3, #8
 8006774:	d112      	bne.n	800679c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006776:	4b82      	ldr	r3, [pc, #520]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800677e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006782:	d10b      	bne.n	800679c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006784:	4b7e      	ldr	r3, [pc, #504]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d05b      	beq.n	8006848 <HAL_RCC_OscConfig+0x108>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d157      	bne.n	8006848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e242      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a4:	d106      	bne.n	80067b4 <HAL_RCC_OscConfig+0x74>
 80067a6:	4b76      	ldr	r3, [pc, #472]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a75      	ldr	r2, [pc, #468]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e01d      	b.n	80067f0 <HAL_RCC_OscConfig+0xb0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCC_OscConfig+0x98>
 80067be:	4b70      	ldr	r3, [pc, #448]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a6f      	ldr	r2, [pc, #444]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4b6d      	ldr	r3, [pc, #436]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6c      	ldr	r2, [pc, #432]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	e00b      	b.n	80067f0 <HAL_RCC_OscConfig+0xb0>
 80067d8:	4b69      	ldr	r3, [pc, #420]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a68      	ldr	r2, [pc, #416]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b66      	ldr	r3, [pc, #408]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a65      	ldr	r2, [pc, #404]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80067ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d013      	beq.n	8006820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f8:	f7fe fae8 	bl	8004dcc <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006800:	f7fe fae4 	bl	8004dcc <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b64      	cmp	r3, #100	; 0x64
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e207      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006812:	4b5b      	ldr	r3, [pc, #364]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0xc0>
 800681e:	e014      	b.n	800684a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fe fad4 	bl	8004dcc <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006828:	f7fe fad0 	bl	8004dcc <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b64      	cmp	r3, #100	; 0x64
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e1f3      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683a:	4b51      	ldr	r3, [pc, #324]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0xe8>
 8006846:	e000      	b.n	800684a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d063      	beq.n	800691e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006856:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 030c 	and.w	r3, r3, #12
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006862:	4b47      	ldr	r3, [pc, #284]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800686a:	2b08      	cmp	r3, #8
 800686c:	d11c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800686e:	4b44      	ldr	r3, [pc, #272]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d116      	bne.n	80068a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800687a:	4b41      	ldr	r3, [pc, #260]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_RCC_OscConfig+0x152>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d001      	beq.n	8006892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e1c7      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006892:	4b3b      	ldr	r3, [pc, #236]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	4937      	ldr	r1, [pc, #220]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a6:	e03a      	b.n	800691e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d020      	beq.n	80068f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068b0:	4b34      	ldr	r3, [pc, #208]	; (8006984 <HAL_RCC_OscConfig+0x244>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b6:	f7fe fa89 	bl	8004dcc <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068be:	f7fe fa85 	bl	8004dcc <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e1a8      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d0:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068dc:	4b28      	ldr	r3, [pc, #160]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4925      	ldr	r1, [pc, #148]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	600b      	str	r3, [r1, #0]
 80068f0:	e015      	b.n	800691e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068f2:	4b24      	ldr	r3, [pc, #144]	; (8006984 <HAL_RCC_OscConfig+0x244>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fe fa68 	bl	8004dcc <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006900:	f7fe fa64 	bl	8004dcc <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e187      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006912:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d036      	beq.n	8006998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d016      	beq.n	8006960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <HAL_RCC_OscConfig+0x248>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006938:	f7fe fa48 	bl	8004dcc <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006940:	f7fe fa44 	bl	8004dcc <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e167      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <HAL_RCC_OscConfig+0x240>)
 8006954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x200>
 800695e:	e01b      	b.n	8006998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006960:	4b09      	ldr	r3, [pc, #36]	; (8006988 <HAL_RCC_OscConfig+0x248>)
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006966:	f7fe fa31 	bl	8004dcc <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800696c:	e00e      	b.n	800698c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800696e:	f7fe fa2d 	bl	8004dcc <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d907      	bls.n	800698c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e150      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
 8006980:	40023800 	.word	0x40023800
 8006984:	42470000 	.word	0x42470000
 8006988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800698c:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 800698e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1ea      	bne.n	800696e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8097 	beq.w	8006ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a6:	2300      	movs	r3, #0
 80069a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069aa:	4b81      	ldr	r3, [pc, #516]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10f      	bne.n	80069d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	4b7d      	ldr	r3, [pc, #500]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	4a7c      	ldr	r2, [pc, #496]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 80069c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6413      	str	r3, [r2, #64]	; 0x40
 80069c6:	4b7a      	ldr	r3, [pc, #488]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d6:	4b77      	ldr	r3, [pc, #476]	; (8006bb4 <HAL_RCC_OscConfig+0x474>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d118      	bne.n	8006a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069e2:	4b74      	ldr	r3, [pc, #464]	; (8006bb4 <HAL_RCC_OscConfig+0x474>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a73      	ldr	r2, [pc, #460]	; (8006bb4 <HAL_RCC_OscConfig+0x474>)
 80069e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ee:	f7fe f9ed 	bl	8004dcc <HAL_GetTick>
 80069f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f6:	f7fe f9e9 	bl	8004dcc <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e10c      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a08:	4b6a      	ldr	r3, [pc, #424]	; (8006bb4 <HAL_RCC_OscConfig+0x474>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0f0      	beq.n	80069f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <HAL_RCC_OscConfig+0x2ea>
 8006a1c:	4b64      	ldr	r3, [pc, #400]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	4a63      	ldr	r2, [pc, #396]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	6713      	str	r3, [r2, #112]	; 0x70
 8006a28:	e01c      	b.n	8006a64 <HAL_RCC_OscConfig+0x324>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	d10c      	bne.n	8006a4c <HAL_RCC_OscConfig+0x30c>
 8006a32:	4b5f      	ldr	r3, [pc, #380]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	4a5e      	ldr	r2, [pc, #376]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a38:	f043 0304 	orr.w	r3, r3, #4
 8006a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a3e:	4b5c      	ldr	r3, [pc, #368]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4a5b      	ldr	r2, [pc, #364]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	6713      	str	r3, [r2, #112]	; 0x70
 8006a4a:	e00b      	b.n	8006a64 <HAL_RCC_OscConfig+0x324>
 8006a4c:	4b58      	ldr	r3, [pc, #352]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a50:	4a57      	ldr	r2, [pc, #348]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	6713      	str	r3, [r2, #112]	; 0x70
 8006a58:	4b55      	ldr	r3, [pc, #340]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5c:	4a54      	ldr	r2, [pc, #336]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a5e:	f023 0304 	bic.w	r3, r3, #4
 8006a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d015      	beq.n	8006a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6c:	f7fe f9ae 	bl	8004dcc <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a72:	e00a      	b.n	8006a8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a74:	f7fe f9aa 	bl	8004dcc <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e0cb      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a8a:	4b49      	ldr	r3, [pc, #292]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0ee      	beq.n	8006a74 <HAL_RCC_OscConfig+0x334>
 8006a96:	e014      	b.n	8006ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a98:	f7fe f998 	bl	8004dcc <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a9e:	e00a      	b.n	8006ab6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa0:	f7fe f994 	bl	8004dcc <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e0b5      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ab6:	4b3e      	ldr	r3, [pc, #248]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1ee      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d105      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ac8:	4b39      	ldr	r3, [pc, #228]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	4a38      	ldr	r2, [pc, #224]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80a1 	beq.w	8006c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ade:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d05c      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d141      	bne.n	8006b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af2:	4b31      	ldr	r3, [pc, #196]	; (8006bb8 <HAL_RCC_OscConfig+0x478>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af8:	f7fe f968 	bl	8004dcc <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b00:	f7fe f964 	bl	8004dcc <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e087      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b12:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f0      	bne.n	8006b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69da      	ldr	r2, [r3, #28]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	019b      	lsls	r3, r3, #6
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	3b01      	subs	r3, #1
 8006b38:	041b      	lsls	r3, r3, #16
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	491b      	ldr	r1, [pc, #108]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b48:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <HAL_RCC_OscConfig+0x478>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4e:	f7fe f93d 	bl	8004dcc <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b54:	e008      	b.n	8006b68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b56:	f7fe f939 	bl	8004dcc <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e05c      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b68:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0f0      	beq.n	8006b56 <HAL_RCC_OscConfig+0x416>
 8006b74:	e054      	b.n	8006c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <HAL_RCC_OscConfig+0x478>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7c:	f7fe f926 	bl	8004dcc <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b84:	f7fe f922 	bl	8004dcc <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e045      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_RCC_OscConfig+0x470>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <HAL_RCC_OscConfig+0x444>
 8006ba2:	e03d      	b.n	8006c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d107      	bne.n	8006bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e038      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40007000 	.word	0x40007000
 8006bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bbc:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <HAL_RCC_OscConfig+0x4ec>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d028      	beq.n	8006c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d121      	bne.n	8006c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d11a      	bne.n	8006c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bec:	4013      	ands	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d111      	bne.n	8006c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	3b01      	subs	r3, #1
 8006c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d107      	bne.n	8006c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40023800 	.word	0x40023800

08006c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0cc      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b68      	ldr	r3, [pc, #416]	; (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d90c      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b65      	ldr	r3, [pc, #404]	; (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b63      	ldr	r3, [pc, #396]	; (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0b8      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d020      	beq.n	8006cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c84:	4b59      	ldr	r3, [pc, #356]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4a58      	ldr	r2, [pc, #352]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c9c:	4b53      	ldr	r3, [pc, #332]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	4a52      	ldr	r2, [pc, #328]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ca8:	4b50      	ldr	r3, [pc, #320]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	494d      	ldr	r1, [pc, #308]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d044      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cce:	4b47      	ldr	r3, [pc, #284]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d119      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e07f      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d003      	beq.n	8006cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d107      	bne.n	8006cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cee:	4b3f      	ldr	r3, [pc, #252]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e06f      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cfe:	4b3b      	ldr	r3, [pc, #236]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e067      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d0e:	4b37      	ldr	r3, [pc, #220]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f023 0203 	bic.w	r2, r3, #3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	4934      	ldr	r1, [pc, #208]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d20:	f7fe f854 	bl	8004dcc <HAL_GetTick>
 8006d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d26:	e00a      	b.n	8006d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d28:	f7fe f850 	bl	8004dcc <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e04f      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3e:	4b2b      	ldr	r3, [pc, #172]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 020c 	and.w	r2, r3, #12
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d1eb      	bne.n	8006d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d20c      	bcs.n	8006d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d5e:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d66:	4b20      	ldr	r3, [pc, #128]	; (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d001      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e032      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d84:	4b19      	ldr	r3, [pc, #100]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	4916      	ldr	r1, [pc, #88]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006da2:	4b12      	ldr	r3, [pc, #72]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	490e      	ldr	r1, [pc, #56]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006db6:	f000 f821 	bl	8006dfc <HAL_RCC_GetSysClockFreq>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	490a      	ldr	r1, [pc, #40]	; (8006df0 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc8:	5ccb      	ldrb	r3, [r1, r3]
 8006dca:	fa22 f303 	lsr.w	r3, r2, r3
 8006dce:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fd ffb4 	bl	8004d44 <HAL_InitTick>

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40023c00 	.word	0x40023c00
 8006dec:	40023800 	.word	0x40023800
 8006df0:	0800b938 	.word	0x0800b938
 8006df4:	20000070 	.word	0x20000070
 8006df8:	20000074 	.word	0x20000074

08006dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e00:	b094      	sub	sp, #80	; 0x50
 8006e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	647b      	str	r3, [r7, #68]	; 0x44
 8006e08:	2300      	movs	r3, #0
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e14:	4b79      	ldr	r3, [pc, #484]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 030c 	and.w	r3, r3, #12
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d00d      	beq.n	8006e3c <HAL_RCC_GetSysClockFreq+0x40>
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	f200 80e1 	bhi.w	8006fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0x34>
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d003      	beq.n	8006e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e2e:	e0db      	b.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e30:	4b73      	ldr	r3, [pc, #460]	; (8007000 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e34:	e0db      	b.n	8006fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e36:	4b73      	ldr	r3, [pc, #460]	; (8007004 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e3a:	e0d8      	b.n	8006fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e3c:	4b6f      	ldr	r3, [pc, #444]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e46:	4b6d      	ldr	r3, [pc, #436]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d063      	beq.n	8006f1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e52:	4b6a      	ldr	r3, [pc, #424]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	099b      	lsrs	r3, r3, #6
 8006e58:	2200      	movs	r2, #0
 8006e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e64:	633b      	str	r3, [r7, #48]	; 0x30
 8006e66:	2300      	movs	r3, #0
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e6e:	4622      	mov	r2, r4
 8006e70:	462b      	mov	r3, r5
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f04f 0100 	mov.w	r1, #0
 8006e7a:	0159      	lsls	r1, r3, #5
 8006e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e80:	0150      	lsls	r0, r2, #5
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4621      	mov	r1, r4
 8006e88:	1a51      	subs	r1, r2, r1
 8006e8a:	6139      	str	r1, [r7, #16]
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	018b      	lsls	r3, r1, #6
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eaa:	4651      	mov	r1, sl
 8006eac:	018a      	lsls	r2, r1, #6
 8006eae:	4651      	mov	r1, sl
 8006eb0:	ebb2 0801 	subs.w	r8, r2, r1
 8006eb4:	4659      	mov	r1, fp
 8006eb6:	eb63 0901 	sbc.w	r9, r3, r1
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ece:	4690      	mov	r8, r2
 8006ed0:	4699      	mov	r9, r3
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	eb18 0303 	adds.w	r3, r8, r3
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	462b      	mov	r3, r5
 8006edc:	eb49 0303 	adc.w	r3, r9, r3
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006eee:	4629      	mov	r1, r5
 8006ef0:	024b      	lsls	r3, r1, #9
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ef8:	4621      	mov	r1, r4
 8006efa:	024a      	lsls	r2, r1, #9
 8006efc:	4610      	mov	r0, r2
 8006efe:	4619      	mov	r1, r3
 8006f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f02:	2200      	movs	r2, #0
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f0c:	f7f9 fe54 	bl	8000bb8 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4613      	mov	r3, r2
 8006f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f18:	e058      	b.n	8006fcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f1a:	4b38      	ldr	r3, [pc, #224]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	099b      	lsrs	r3, r3, #6
 8006f20:	2200      	movs	r2, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	4611      	mov	r1, r2
 8006f26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f2a:	623b      	str	r3, [r7, #32]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	f04f 0000 	mov.w	r0, #0
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	0159      	lsls	r1, r3, #5
 8006f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f46:	0150      	lsls	r0, r2, #5
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f52:	4649      	mov	r1, r9
 8006f54:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f6c:	ebb2 040a 	subs.w	r4, r2, sl
 8006f70:	eb63 050b 	sbc.w	r5, r3, fp
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	00eb      	lsls	r3, r5, #3
 8006f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f82:	00e2      	lsls	r2, r4, #3
 8006f84:	4614      	mov	r4, r2
 8006f86:	461d      	mov	r5, r3
 8006f88:	4643      	mov	r3, r8
 8006f8a:	18e3      	adds	r3, r4, r3
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	464b      	mov	r3, r9
 8006f90:	eb45 0303 	adc.w	r3, r5, r3
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	028b      	lsls	r3, r1, #10
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fac:	4621      	mov	r1, r4
 8006fae:	028a      	lsls	r2, r1, #10
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	61fa      	str	r2, [r7, #28]
 8006fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fc0:	f7f9 fdfa 	bl	8000bb8 <__aeabi_uldivmod>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4613      	mov	r3, r2
 8006fca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fcc:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006fdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fe6:	e002      	b.n	8006fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3750      	adds	r7, #80	; 0x50
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40023800 	.word	0x40023800
 8007000:	00f42400 	.word	0x00f42400
 8007004:	007a1200 	.word	0x007a1200

08007008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800700c:	4b03      	ldr	r3, [pc, #12]	; (800701c <HAL_RCC_GetHCLKFreq+0x14>)
 800700e:	681b      	ldr	r3, [r3, #0]
}
 8007010:	4618      	mov	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000070 	.word	0x20000070

08007020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007024:	f7ff fff0 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 8007028:	4602      	mov	r2, r0
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	0a9b      	lsrs	r3, r3, #10
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	4903      	ldr	r1, [pc, #12]	; (8007044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007036:	5ccb      	ldrb	r3, [r1, r3]
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800703c:	4618      	mov	r0, r3
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40023800 	.word	0x40023800
 8007044:	0800b948 	.word	0x0800b948

08007048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800704c:	f7ff ffdc 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 8007050:	4602      	mov	r2, r0
 8007052:	4b05      	ldr	r3, [pc, #20]	; (8007068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	0b5b      	lsrs	r3, r3, #13
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	4903      	ldr	r1, [pc, #12]	; (800706c <HAL_RCC_GetPCLK2Freq+0x24>)
 800705e:	5ccb      	ldrb	r3, [r1, r3]
 8007060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007064:	4618      	mov	r0, r3
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40023800 	.word	0x40023800
 800706c:	0800b948 	.word	0x0800b948

08007070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e042      	b.n	8007108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fd fc76 	bl	8004988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2224      	movs	r2, #36	; 0x24
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa09 	bl	80074cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695a      	ldr	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08a      	sub	sp, #40	; 0x28
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b20      	cmp	r3, #32
 800712e:	d175      	bne.n	800721c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_UART_Transmit+0x2c>
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e06e      	b.n	800721e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2221      	movs	r2, #33	; 0x21
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800714e:	f7fd fe3d 	bl	8004dcc <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007168:	d108      	bne.n	800717c <HAL_UART_Transmit+0x6c>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e003      	b.n	8007184 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007184:	e02e      	b.n	80071e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2200      	movs	r2, #0
 800718e:	2180      	movs	r1, #128	; 0x80
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f8df 	bl	8007354 <UART_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e03a      	b.n	800721e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	3302      	adds	r3, #2
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	e007      	b.n	80071d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cb      	bne.n	8007186 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2140      	movs	r1, #64	; 0x40
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f8ab 	bl	8007354 <UART_WaitOnFlagUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e006      	b.n	800721e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800721c:	2302      	movs	r3, #2
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b08a      	sub	sp, #40	; 0x28
 800722a:	af02      	add	r7, sp, #8
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b20      	cmp	r3, #32
 8007244:	f040 8081 	bne.w	800734a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <HAL_UART_Receive+0x2e>
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e079      	b.n	800734c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2222      	movs	r2, #34	; 0x22
 8007262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800726c:	f7fd fdae 	bl	8004dcc <HAL_GetTick>
 8007270:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d108      	bne.n	800729a <HAL_UART_Receive+0x74>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007290:	2300      	movs	r3, #0
 8007292:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	e003      	b.n	80072a2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80072a2:	e047      	b.n	8007334 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2200      	movs	r2, #0
 80072ac:	2120      	movs	r1, #32
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f850 	bl	8007354 <UART_WaitOnFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e042      	b.n	800734c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10c      	bne.n	80072e6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d8:	b29a      	uxth	r2, r3
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3302      	adds	r3, #2
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	e01f      	b.n	8007326 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ee:	d007      	beq.n	8007300 <HAL_UART_Receive+0xda>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <HAL_UART_Receive+0xe8>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	b2da      	uxtb	r2, r3
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	e008      	b.n	8007320 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	b2da      	uxtb	r2, r3
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3301      	adds	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1b2      	bne.n	80072a4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3720      	adds	r7, #32
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007364:	e03b      	b.n	80073de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736c:	d037      	beq.n	80073de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736e:	f7fd fd2d 	bl	8004dcc <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	6a3a      	ldr	r2, [r7, #32]
 800737a:	429a      	cmp	r2, r3
 800737c:	d302      	bcc.n	8007384 <UART_WaitOnFlagUntilTimeout+0x30>
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e03a      	b.n	80073fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	2b00      	cmp	r3, #0
 8007394:	d023      	beq.n	80073de <UART_WaitOnFlagUntilTimeout+0x8a>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b80      	cmp	r3, #128	; 0x80
 800739a:	d020      	beq.n	80073de <UART_WaitOnFlagUntilTimeout+0x8a>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d01d      	beq.n	80073de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d116      	bne.n	80073de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 f81d 	bl	8007406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2208      	movs	r2, #8
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e00f      	b.n	80073fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4013      	ands	r3, r2
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	bf0c      	ite	eq
 80073ee:	2301      	moveq	r3, #1
 80073f0:	2300      	movne	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d0b4      	beq.n	8007366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007406:	b480      	push	{r7}
 8007408:	b095      	sub	sp, #84	; 0x54
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	330c      	adds	r3, #12
 800742c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800742e:	643a      	str	r2, [r7, #64]	; 0x40
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3314      	adds	r3, #20
 8007448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	61fb      	str	r3, [r7, #28]
   return(result);
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	64bb      	str	r3, [r7, #72]	; 0x48
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3314      	adds	r3, #20
 8007460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	2b01      	cmp	r3, #1
 800747c:	d119      	bne.n	80074b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	330c      	adds	r3, #12
 8007484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	60bb      	str	r3, [r7, #8]
   return(result);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f023 0310 	bic.w	r3, r3, #16
 8007494:	647b      	str	r3, [r7, #68]	; 0x44
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	330c      	adds	r3, #12
 800749c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800749e:	61ba      	str	r2, [r7, #24]
 80074a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	613b      	str	r3, [r7, #16]
   return(result);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e5      	bne.n	800747e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074c0:	bf00      	nop
 80074c2:	3754      	adds	r7, #84	; 0x54
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074d0:	b0c0      	sub	sp, #256	; 0x100
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e8:	68d9      	ldr	r1, [r3, #12]
 80074ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	ea40 0301 	orr.w	r3, r0, r1
 80074f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	431a      	orrs	r2, r3
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	431a      	orrs	r2, r3
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007524:	f021 010c 	bic.w	r1, r1, #12
 8007528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007532:	430b      	orrs	r3, r1
 8007534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	6999      	ldr	r1, [r3, #24]
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	ea40 0301 	orr.w	r3, r0, r1
 8007552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b8f      	ldr	r3, [pc, #572]	; (8007798 <UART_SetConfig+0x2cc>)
 800755c:	429a      	cmp	r2, r3
 800755e:	d005      	beq.n	800756c <UART_SetConfig+0xa0>
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4b8d      	ldr	r3, [pc, #564]	; (800779c <UART_SetConfig+0x2d0>)
 8007568:	429a      	cmp	r2, r3
 800756a:	d104      	bne.n	8007576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800756c:	f7ff fd6c 	bl	8007048 <HAL_RCC_GetPCLK2Freq>
 8007570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007574:	e003      	b.n	800757e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007576:	f7ff fd53 	bl	8007020 <HAL_RCC_GetPCLK1Freq>
 800757a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007588:	f040 810c 	bne.w	80077a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800758c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007590:	2200      	movs	r2, #0
 8007592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800759a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800759e:	4622      	mov	r2, r4
 80075a0:	462b      	mov	r3, r5
 80075a2:	1891      	adds	r1, r2, r2
 80075a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80075a6:	415b      	adcs	r3, r3
 80075a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075ae:	4621      	mov	r1, r4
 80075b0:	eb12 0801 	adds.w	r8, r2, r1
 80075b4:	4629      	mov	r1, r5
 80075b6:	eb43 0901 	adc.w	r9, r3, r1
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075ce:	4690      	mov	r8, r2
 80075d0:	4699      	mov	r9, r3
 80075d2:	4623      	mov	r3, r4
 80075d4:	eb18 0303 	adds.w	r3, r8, r3
 80075d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075dc:	462b      	mov	r3, r5
 80075de:	eb49 0303 	adc.w	r3, r9, r3
 80075e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075fa:	460b      	mov	r3, r1
 80075fc:	18db      	adds	r3, r3, r3
 80075fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007600:	4613      	mov	r3, r2
 8007602:	eb42 0303 	adc.w	r3, r2, r3
 8007606:	657b      	str	r3, [r7, #84]	; 0x54
 8007608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800760c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007610:	f7f9 fad2 	bl	8000bb8 <__aeabi_uldivmod>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4b61      	ldr	r3, [pc, #388]	; (80077a0 <UART_SetConfig+0x2d4>)
 800761a:	fba3 2302 	umull	r2, r3, r3, r2
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	011c      	lsls	r4, r3, #4
 8007622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007626:	2200      	movs	r2, #0
 8007628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800762c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	1891      	adds	r1, r2, r2
 800763a:	64b9      	str	r1, [r7, #72]	; 0x48
 800763c:	415b      	adcs	r3, r3
 800763e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007644:	4641      	mov	r1, r8
 8007646:	eb12 0a01 	adds.w	sl, r2, r1
 800764a:	4649      	mov	r1, r9
 800764c:	eb43 0b01 	adc.w	fp, r3, r1
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800765c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007664:	4692      	mov	sl, r2
 8007666:	469b      	mov	fp, r3
 8007668:	4643      	mov	r3, r8
 800766a:	eb1a 0303 	adds.w	r3, sl, r3
 800766e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007672:	464b      	mov	r3, r9
 8007674:	eb4b 0303 	adc.w	r3, fp, r3
 8007678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800768c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007690:	460b      	mov	r3, r1
 8007692:	18db      	adds	r3, r3, r3
 8007694:	643b      	str	r3, [r7, #64]	; 0x40
 8007696:	4613      	mov	r3, r2
 8007698:	eb42 0303 	adc.w	r3, r2, r3
 800769c:	647b      	str	r3, [r7, #68]	; 0x44
 800769e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076a6:	f7f9 fa87 	bl	8000bb8 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	4b3b      	ldr	r3, [pc, #236]	; (80077a0 <UART_SetConfig+0x2d4>)
 80076b2:	fba3 2301 	umull	r2, r3, r3, r1
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	2264      	movs	r2, #100	; 0x64
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	1acb      	subs	r3, r1, r3
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076c6:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <UART_SetConfig+0x2d4>)
 80076c8:	fba3 2302 	umull	r2, r3, r3, r2
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076d4:	441c      	add	r4, r3
 80076d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076e8:	4642      	mov	r2, r8
 80076ea:	464b      	mov	r3, r9
 80076ec:	1891      	adds	r1, r2, r2
 80076ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80076f0:	415b      	adcs	r3, r3
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076f8:	4641      	mov	r1, r8
 80076fa:	1851      	adds	r1, r2, r1
 80076fc:	6339      	str	r1, [r7, #48]	; 0x30
 80076fe:	4649      	mov	r1, r9
 8007700:	414b      	adcs	r3, r1
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007710:	4659      	mov	r1, fp
 8007712:	00cb      	lsls	r3, r1, #3
 8007714:	4651      	mov	r1, sl
 8007716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800771a:	4651      	mov	r1, sl
 800771c:	00ca      	lsls	r2, r1, #3
 800771e:	4610      	mov	r0, r2
 8007720:	4619      	mov	r1, r3
 8007722:	4603      	mov	r3, r0
 8007724:	4642      	mov	r2, r8
 8007726:	189b      	adds	r3, r3, r2
 8007728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800772c:	464b      	mov	r3, r9
 800772e:	460a      	mov	r2, r1
 8007730:	eb42 0303 	adc.w	r3, r2, r3
 8007734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800774c:	460b      	mov	r3, r1
 800774e:	18db      	adds	r3, r3, r3
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
 8007752:	4613      	mov	r3, r2
 8007754:	eb42 0303 	adc.w	r3, r2, r3
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800775a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800775e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007762:	f7f9 fa29 	bl	8000bb8 <__aeabi_uldivmod>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <UART_SetConfig+0x2d4>)
 800776c:	fba3 1302 	umull	r1, r3, r3, r2
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	2164      	movs	r1, #100	; 0x64
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	3332      	adds	r3, #50	; 0x32
 800777e:	4a08      	ldr	r2, [pc, #32]	; (80077a0 <UART_SetConfig+0x2d4>)
 8007780:	fba2 2303 	umull	r2, r3, r2, r3
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	f003 0207 	and.w	r2, r3, #7
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4422      	add	r2, r4
 8007792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007794:	e106      	b.n	80079a4 <UART_SetConfig+0x4d8>
 8007796:	bf00      	nop
 8007798:	40011000 	.word	0x40011000
 800779c:	40011400 	.word	0x40011400
 80077a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a8:	2200      	movs	r2, #0
 80077aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077b6:	4642      	mov	r2, r8
 80077b8:	464b      	mov	r3, r9
 80077ba:	1891      	adds	r1, r2, r2
 80077bc:	6239      	str	r1, [r7, #32]
 80077be:	415b      	adcs	r3, r3
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
 80077c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077c6:	4641      	mov	r1, r8
 80077c8:	1854      	adds	r4, r2, r1
 80077ca:	4649      	mov	r1, r9
 80077cc:	eb43 0501 	adc.w	r5, r3, r1
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	00eb      	lsls	r3, r5, #3
 80077da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077de:	00e2      	lsls	r2, r4, #3
 80077e0:	4614      	mov	r4, r2
 80077e2:	461d      	mov	r5, r3
 80077e4:	4643      	mov	r3, r8
 80077e6:	18e3      	adds	r3, r4, r3
 80077e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077ec:	464b      	mov	r3, r9
 80077ee:	eb45 0303 	adc.w	r3, r5, r3
 80077f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007812:	4629      	mov	r1, r5
 8007814:	008b      	lsls	r3, r1, #2
 8007816:	4621      	mov	r1, r4
 8007818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800781c:	4621      	mov	r1, r4
 800781e:	008a      	lsls	r2, r1, #2
 8007820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007824:	f7f9 f9c8 	bl	8000bb8 <__aeabi_uldivmod>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <UART_SetConfig+0x4e4>)
 800782e:	fba3 2302 	umull	r2, r3, r3, r2
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	011c      	lsls	r4, r3, #4
 8007836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783a:	2200      	movs	r2, #0
 800783c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007848:	4642      	mov	r2, r8
 800784a:	464b      	mov	r3, r9
 800784c:	1891      	adds	r1, r2, r2
 800784e:	61b9      	str	r1, [r7, #24]
 8007850:	415b      	adcs	r3, r3
 8007852:	61fb      	str	r3, [r7, #28]
 8007854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007858:	4641      	mov	r1, r8
 800785a:	1851      	adds	r1, r2, r1
 800785c:	6139      	str	r1, [r7, #16]
 800785e:	4649      	mov	r1, r9
 8007860:	414b      	adcs	r3, r1
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007870:	4659      	mov	r1, fp
 8007872:	00cb      	lsls	r3, r1, #3
 8007874:	4651      	mov	r1, sl
 8007876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800787a:	4651      	mov	r1, sl
 800787c:	00ca      	lsls	r2, r1, #3
 800787e:	4610      	mov	r0, r2
 8007880:	4619      	mov	r1, r3
 8007882:	4603      	mov	r3, r0
 8007884:	4642      	mov	r2, r8
 8007886:	189b      	adds	r3, r3, r2
 8007888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800788c:	464b      	mov	r3, r9
 800788e:	460a      	mov	r2, r1
 8007890:	eb42 0303 	adc.w	r3, r2, r3
 8007894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80078a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078b0:	4649      	mov	r1, r9
 80078b2:	008b      	lsls	r3, r1, #2
 80078b4:	4641      	mov	r1, r8
 80078b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ba:	4641      	mov	r1, r8
 80078bc:	008a      	lsls	r2, r1, #2
 80078be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078c2:	f7f9 f979 	bl	8000bb8 <__aeabi_uldivmod>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4611      	mov	r1, r2
 80078cc:	4b38      	ldr	r3, [pc, #224]	; (80079b0 <UART_SetConfig+0x4e4>)
 80078ce:	fba3 2301 	umull	r2, r3, r3, r1
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	2264      	movs	r2, #100	; 0x64
 80078d6:	fb02 f303 	mul.w	r3, r2, r3
 80078da:	1acb      	subs	r3, r1, r3
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	3332      	adds	r3, #50	; 0x32
 80078e0:	4a33      	ldr	r2, [pc, #204]	; (80079b0 <UART_SetConfig+0x4e4>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ec:	441c      	add	r4, r3
 80078ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f2:	2200      	movs	r2, #0
 80078f4:	673b      	str	r3, [r7, #112]	; 0x70
 80078f6:	677a      	str	r2, [r7, #116]	; 0x74
 80078f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078fc:	4642      	mov	r2, r8
 80078fe:	464b      	mov	r3, r9
 8007900:	1891      	adds	r1, r2, r2
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	415b      	adcs	r3, r3
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800790c:	4641      	mov	r1, r8
 800790e:	1851      	adds	r1, r2, r1
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	4649      	mov	r1, r9
 8007914:	414b      	adcs	r3, r1
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007924:	4659      	mov	r1, fp
 8007926:	00cb      	lsls	r3, r1, #3
 8007928:	4651      	mov	r1, sl
 800792a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800792e:	4651      	mov	r1, sl
 8007930:	00ca      	lsls	r2, r1, #3
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	4603      	mov	r3, r0
 8007938:	4642      	mov	r2, r8
 800793a:	189b      	adds	r3, r3, r2
 800793c:	66bb      	str	r3, [r7, #104]	; 0x68
 800793e:	464b      	mov	r3, r9
 8007940:	460a      	mov	r2, r1
 8007942:	eb42 0303 	adc.w	r3, r2, r3
 8007946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	663b      	str	r3, [r7, #96]	; 0x60
 8007952:	667a      	str	r2, [r7, #100]	; 0x64
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007960:	4649      	mov	r1, r9
 8007962:	008b      	lsls	r3, r1, #2
 8007964:	4641      	mov	r1, r8
 8007966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800796a:	4641      	mov	r1, r8
 800796c:	008a      	lsls	r2, r1, #2
 800796e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007972:	f7f9 f921 	bl	8000bb8 <__aeabi_uldivmod>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <UART_SetConfig+0x4e4>)
 800797c:	fba3 1302 	umull	r1, r3, r3, r2
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	2164      	movs	r1, #100	; 0x64
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	3332      	adds	r3, #50	; 0x32
 800798e:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <UART_SetConfig+0x4e4>)
 8007990:	fba2 2303 	umull	r2, r3, r2, r3
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	f003 020f 	and.w	r2, r3, #15
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4422      	add	r2, r4
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079aa:	46bd      	mov	sp, r7
 80079ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b0:	51eb851f 	.word	0x51eb851f

080079b4 <malloc>:
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <malloc+0xc>)
 80079b6:	4601      	mov	r1, r0
 80079b8:	6818      	ldr	r0, [r3, #0]
 80079ba:	f000 b823 	b.w	8007a04 <_malloc_r>
 80079be:	bf00      	nop
 80079c0:	200000d4 	.word	0x200000d4

080079c4 <sbrk_aligned>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	4e0e      	ldr	r6, [pc, #56]	; (8007a00 <sbrk_aligned+0x3c>)
 80079c8:	460c      	mov	r4, r1
 80079ca:	6831      	ldr	r1, [r6, #0]
 80079cc:	4605      	mov	r5, r0
 80079ce:	b911      	cbnz	r1, 80079d6 <sbrk_aligned+0x12>
 80079d0:	f000 fe70 	bl	80086b4 <_sbrk_r>
 80079d4:	6030      	str	r0, [r6, #0]
 80079d6:	4621      	mov	r1, r4
 80079d8:	4628      	mov	r0, r5
 80079da:	f000 fe6b 	bl	80086b4 <_sbrk_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d00a      	beq.n	80079f8 <sbrk_aligned+0x34>
 80079e2:	1cc4      	adds	r4, r0, #3
 80079e4:	f024 0403 	bic.w	r4, r4, #3
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d007      	beq.n	80079fc <sbrk_aligned+0x38>
 80079ec:	1a21      	subs	r1, r4, r0
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fe60 	bl	80086b4 <_sbrk_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d101      	bne.n	80079fc <sbrk_aligned+0x38>
 80079f8:	f04f 34ff 	mov.w	r4, #4294967295
 80079fc:	4620      	mov	r0, r4
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	200007c0 	.word	0x200007c0

08007a04 <_malloc_r>:
 8007a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a08:	1ccd      	adds	r5, r1, #3
 8007a0a:	f025 0503 	bic.w	r5, r5, #3
 8007a0e:	3508      	adds	r5, #8
 8007a10:	2d0c      	cmp	r5, #12
 8007a12:	bf38      	it	cc
 8007a14:	250c      	movcc	r5, #12
 8007a16:	2d00      	cmp	r5, #0
 8007a18:	4607      	mov	r7, r0
 8007a1a:	db01      	blt.n	8007a20 <_malloc_r+0x1c>
 8007a1c:	42a9      	cmp	r1, r5
 8007a1e:	d905      	bls.n	8007a2c <_malloc_r+0x28>
 8007a20:	230c      	movs	r3, #12
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	2600      	movs	r6, #0
 8007a26:	4630      	mov	r0, r6
 8007a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b00 <_malloc_r+0xfc>
 8007a30:	f000 f868 	bl	8007b04 <__malloc_lock>
 8007a34:	f8d8 3000 	ldr.w	r3, [r8]
 8007a38:	461c      	mov	r4, r3
 8007a3a:	bb5c      	cbnz	r4, 8007a94 <_malloc_r+0x90>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7ff ffc0 	bl	80079c4 <sbrk_aligned>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	4604      	mov	r4, r0
 8007a48:	d155      	bne.n	8007af6 <_malloc_r+0xf2>
 8007a4a:	f8d8 4000 	ldr.w	r4, [r8]
 8007a4e:	4626      	mov	r6, r4
 8007a50:	2e00      	cmp	r6, #0
 8007a52:	d145      	bne.n	8007ae0 <_malloc_r+0xdc>
 8007a54:	2c00      	cmp	r4, #0
 8007a56:	d048      	beq.n	8007aea <_malloc_r+0xe6>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	eb04 0903 	add.w	r9, r4, r3
 8007a62:	f000 fe27 	bl	80086b4 <_sbrk_r>
 8007a66:	4581      	cmp	r9, r0
 8007a68:	d13f      	bne.n	8007aea <_malloc_r+0xe6>
 8007a6a:	6821      	ldr	r1, [r4, #0]
 8007a6c:	1a6d      	subs	r5, r5, r1
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ffa7 	bl	80079c4 <sbrk_aligned>
 8007a76:	3001      	adds	r0, #1
 8007a78:	d037      	beq.n	8007aea <_malloc_r+0xe6>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	442b      	add	r3, r5
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	f8d8 3000 	ldr.w	r3, [r8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d038      	beq.n	8007afa <_malloc_r+0xf6>
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	42a2      	cmp	r2, r4
 8007a8c:	d12b      	bne.n	8007ae6 <_malloc_r+0xe2>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	605a      	str	r2, [r3, #4]
 8007a92:	e00f      	b.n	8007ab4 <_malloc_r+0xb0>
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	1b52      	subs	r2, r2, r5
 8007a98:	d41f      	bmi.n	8007ada <_malloc_r+0xd6>
 8007a9a:	2a0b      	cmp	r2, #11
 8007a9c:	d917      	bls.n	8007ace <_malloc_r+0xca>
 8007a9e:	1961      	adds	r1, r4, r5
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	6025      	str	r5, [r4, #0]
 8007aa4:	bf18      	it	ne
 8007aa6:	6059      	strne	r1, [r3, #4]
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	bf08      	it	eq
 8007aac:	f8c8 1000 	streq.w	r1, [r8]
 8007ab0:	5162      	str	r2, [r4, r5]
 8007ab2:	604b      	str	r3, [r1, #4]
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f104 060b 	add.w	r6, r4, #11
 8007aba:	f000 f829 	bl	8007b10 <__malloc_unlock>
 8007abe:	f026 0607 	bic.w	r6, r6, #7
 8007ac2:	1d23      	adds	r3, r4, #4
 8007ac4:	1af2      	subs	r2, r6, r3
 8007ac6:	d0ae      	beq.n	8007a26 <_malloc_r+0x22>
 8007ac8:	1b9b      	subs	r3, r3, r6
 8007aca:	50a3      	str	r3, [r4, r2]
 8007acc:	e7ab      	b.n	8007a26 <_malloc_r+0x22>
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	6862      	ldr	r2, [r4, #4]
 8007ad2:	d1dd      	bne.n	8007a90 <_malloc_r+0x8c>
 8007ad4:	f8c8 2000 	str.w	r2, [r8]
 8007ad8:	e7ec      	b.n	8007ab4 <_malloc_r+0xb0>
 8007ada:	4623      	mov	r3, r4
 8007adc:	6864      	ldr	r4, [r4, #4]
 8007ade:	e7ac      	b.n	8007a3a <_malloc_r+0x36>
 8007ae0:	4634      	mov	r4, r6
 8007ae2:	6876      	ldr	r6, [r6, #4]
 8007ae4:	e7b4      	b.n	8007a50 <_malloc_r+0x4c>
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	e7cc      	b.n	8007a84 <_malloc_r+0x80>
 8007aea:	230c      	movs	r3, #12
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	4638      	mov	r0, r7
 8007af0:	f000 f80e 	bl	8007b10 <__malloc_unlock>
 8007af4:	e797      	b.n	8007a26 <_malloc_r+0x22>
 8007af6:	6025      	str	r5, [r4, #0]
 8007af8:	e7dc      	b.n	8007ab4 <_malloc_r+0xb0>
 8007afa:	605b      	str	r3, [r3, #4]
 8007afc:	deff      	udf	#255	; 0xff
 8007afe:	bf00      	nop
 8007b00:	200007bc 	.word	0x200007bc

08007b04 <__malloc_lock>:
 8007b04:	4801      	ldr	r0, [pc, #4]	; (8007b0c <__malloc_lock+0x8>)
 8007b06:	f000 be22 	b.w	800874e <__retarget_lock_acquire_recursive>
 8007b0a:	bf00      	nop
 8007b0c:	20000904 	.word	0x20000904

08007b10 <__malloc_unlock>:
 8007b10:	4801      	ldr	r0, [pc, #4]	; (8007b18 <__malloc_unlock+0x8>)
 8007b12:	f000 be1d 	b.w	8008750 <__retarget_lock_release_recursive>
 8007b16:	bf00      	nop
 8007b18:	20000904 	.word	0x20000904

08007b1c <__cvt>:
 8007b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	ec55 4b10 	vmov	r4, r5, d0
 8007b24:	2d00      	cmp	r5, #0
 8007b26:	460e      	mov	r6, r1
 8007b28:	4619      	mov	r1, r3
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	bfbb      	ittet	lt
 8007b2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b32:	461d      	movlt	r5, r3
 8007b34:	2300      	movge	r3, #0
 8007b36:	232d      	movlt	r3, #45	; 0x2d
 8007b38:	700b      	strb	r3, [r1, #0]
 8007b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b40:	4691      	mov	r9, r2
 8007b42:	f023 0820 	bic.w	r8, r3, #32
 8007b46:	bfbc      	itt	lt
 8007b48:	4622      	movlt	r2, r4
 8007b4a:	4614      	movlt	r4, r2
 8007b4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b50:	d005      	beq.n	8007b5e <__cvt+0x42>
 8007b52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b56:	d100      	bne.n	8007b5a <__cvt+0x3e>
 8007b58:	3601      	adds	r6, #1
 8007b5a:	2102      	movs	r1, #2
 8007b5c:	e000      	b.n	8007b60 <__cvt+0x44>
 8007b5e:	2103      	movs	r1, #3
 8007b60:	ab03      	add	r3, sp, #12
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	ab02      	add	r3, sp, #8
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	ec45 4b10 	vmov	d0, r4, r5
 8007b6c:	4653      	mov	r3, sl
 8007b6e:	4632      	mov	r2, r6
 8007b70:	f000 fe86 	bl	8008880 <_dtoa_r>
 8007b74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b78:	4607      	mov	r7, r0
 8007b7a:	d102      	bne.n	8007b82 <__cvt+0x66>
 8007b7c:	f019 0f01 	tst.w	r9, #1
 8007b80:	d022      	beq.n	8007bc8 <__cvt+0xac>
 8007b82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b86:	eb07 0906 	add.w	r9, r7, r6
 8007b8a:	d110      	bne.n	8007bae <__cvt+0x92>
 8007b8c:	783b      	ldrb	r3, [r7, #0]
 8007b8e:	2b30      	cmp	r3, #48	; 0x30
 8007b90:	d10a      	bne.n	8007ba8 <__cvt+0x8c>
 8007b92:	2200      	movs	r2, #0
 8007b94:	2300      	movs	r3, #0
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 ff9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b9e:	b918      	cbnz	r0, 8007ba8 <__cvt+0x8c>
 8007ba0:	f1c6 0601 	rsb	r6, r6, #1
 8007ba4:	f8ca 6000 	str.w	r6, [sl]
 8007ba8:	f8da 3000 	ldr.w	r3, [sl]
 8007bac:	4499      	add	r9, r3
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	f7f8 ff8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bba:	b108      	cbz	r0, 8007bc0 <__cvt+0xa4>
 8007bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bc0:	2230      	movs	r2, #48	; 0x30
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	454b      	cmp	r3, r9
 8007bc6:	d307      	bcc.n	8007bd8 <__cvt+0xbc>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bcc:	1bdb      	subs	r3, r3, r7
 8007bce:	4638      	mov	r0, r7
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	b004      	add	sp, #16
 8007bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd8:	1c59      	adds	r1, r3, #1
 8007bda:	9103      	str	r1, [sp, #12]
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	e7f0      	b.n	8007bc2 <__cvt+0xa6>

08007be0 <__exponent>:
 8007be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be2:	4603      	mov	r3, r0
 8007be4:	2900      	cmp	r1, #0
 8007be6:	bfb8      	it	lt
 8007be8:	4249      	neglt	r1, r1
 8007bea:	f803 2b02 	strb.w	r2, [r3], #2
 8007bee:	bfb4      	ite	lt
 8007bf0:	222d      	movlt	r2, #45	; 0x2d
 8007bf2:	222b      	movge	r2, #43	; 0x2b
 8007bf4:	2909      	cmp	r1, #9
 8007bf6:	7042      	strb	r2, [r0, #1]
 8007bf8:	dd2a      	ble.n	8007c50 <__exponent+0x70>
 8007bfa:	f10d 0207 	add.w	r2, sp, #7
 8007bfe:	4617      	mov	r7, r2
 8007c00:	260a      	movs	r6, #10
 8007c02:	4694      	mov	ip, r2
 8007c04:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c08:	fb06 1415 	mls	r4, r6, r5, r1
 8007c0c:	3430      	adds	r4, #48	; 0x30
 8007c0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007c12:	460c      	mov	r4, r1
 8007c14:	2c63      	cmp	r4, #99	; 0x63
 8007c16:	f102 32ff 	add.w	r2, r2, #4294967295
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	dcf1      	bgt.n	8007c02 <__exponent+0x22>
 8007c1e:	3130      	adds	r1, #48	; 0x30
 8007c20:	f1ac 0402 	sub.w	r4, ip, #2
 8007c24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c28:	1c41      	adds	r1, r0, #1
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	42ba      	cmp	r2, r7
 8007c2e:	d30a      	bcc.n	8007c46 <__exponent+0x66>
 8007c30:	f10d 0209 	add.w	r2, sp, #9
 8007c34:	eba2 020c 	sub.w	r2, r2, ip
 8007c38:	42bc      	cmp	r4, r7
 8007c3a:	bf88      	it	hi
 8007c3c:	2200      	movhi	r2, #0
 8007c3e:	4413      	add	r3, r2
 8007c40:	1a18      	subs	r0, r3, r0
 8007c42:	b003      	add	sp, #12
 8007c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c4e:	e7ed      	b.n	8007c2c <__exponent+0x4c>
 8007c50:	2330      	movs	r3, #48	; 0x30
 8007c52:	3130      	adds	r1, #48	; 0x30
 8007c54:	7083      	strb	r3, [r0, #2]
 8007c56:	70c1      	strb	r1, [r0, #3]
 8007c58:	1d03      	adds	r3, r0, #4
 8007c5a:	e7f1      	b.n	8007c40 <__exponent+0x60>

08007c5c <_printf_float>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	ed2d 8b02 	vpush	{d8}
 8007c64:	b08d      	sub	sp, #52	; 0x34
 8007c66:	460c      	mov	r4, r1
 8007c68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	461f      	mov	r7, r3
 8007c70:	4605      	mov	r5, r0
 8007c72:	f000 fce7 	bl	8008644 <_localeconv_r>
 8007c76:	f8d0 a000 	ldr.w	sl, [r0]
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	f7f8 fb00 	bl	8000280 <strlen>
 8007c80:	2300      	movs	r3, #0
 8007c82:	930a      	str	r3, [sp, #40]	; 0x28
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	9305      	str	r3, [sp, #20]
 8007c88:	f8d8 3000 	ldr.w	r3, [r8]
 8007c8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c90:	3307      	adds	r3, #7
 8007c92:	f023 0307 	bic.w	r3, r3, #7
 8007c96:	f103 0208 	add.w	r2, r3, #8
 8007c9a:	f8c8 2000 	str.w	r2, [r8]
 8007c9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ca6:	9307      	str	r3, [sp, #28]
 8007ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cac:	ee08 0a10 	vmov	s16, r0
 8007cb0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cb8:	4b9e      	ldr	r3, [pc, #632]	; (8007f34 <_printf_float+0x2d8>)
 8007cba:	f04f 32ff 	mov.w	r2, #4294967295
 8007cbe:	f7f8 ff3d 	bl	8000b3c <__aeabi_dcmpun>
 8007cc2:	bb88      	cbnz	r0, 8007d28 <_printf_float+0xcc>
 8007cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cc8:	4b9a      	ldr	r3, [pc, #616]	; (8007f34 <_printf_float+0x2d8>)
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295
 8007cce:	f7f8 ff17 	bl	8000b00 <__aeabi_dcmple>
 8007cd2:	bb48      	cbnz	r0, 8007d28 <_printf_float+0xcc>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4640      	mov	r0, r8
 8007cda:	4649      	mov	r1, r9
 8007cdc:	f7f8 ff06 	bl	8000aec <__aeabi_dcmplt>
 8007ce0:	b110      	cbz	r0, 8007ce8 <_printf_float+0x8c>
 8007ce2:	232d      	movs	r3, #45	; 0x2d
 8007ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce8:	4a93      	ldr	r2, [pc, #588]	; (8007f38 <_printf_float+0x2dc>)
 8007cea:	4b94      	ldr	r3, [pc, #592]	; (8007f3c <_printf_float+0x2e0>)
 8007cec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cf0:	bf94      	ite	ls
 8007cf2:	4690      	movls	r8, r2
 8007cf4:	4698      	movhi	r8, r3
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	6123      	str	r3, [r4, #16]
 8007cfa:	9b05      	ldr	r3, [sp, #20]
 8007cfc:	f023 0304 	bic.w	r3, r3, #4
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	f04f 0900 	mov.w	r9, #0
 8007d06:	9700      	str	r7, [sp, #0]
 8007d08:	4633      	mov	r3, r6
 8007d0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 f9da 	bl	80080c8 <_printf_common>
 8007d14:	3001      	adds	r0, #1
 8007d16:	f040 8090 	bne.w	8007e3a <_printf_float+0x1de>
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1e:	b00d      	add	sp, #52	; 0x34
 8007d20:	ecbd 8b02 	vpop	{d8}
 8007d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d28:	4642      	mov	r2, r8
 8007d2a:	464b      	mov	r3, r9
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	4649      	mov	r1, r9
 8007d30:	f7f8 ff04 	bl	8000b3c <__aeabi_dcmpun>
 8007d34:	b140      	cbz	r0, 8007d48 <_printf_float+0xec>
 8007d36:	464b      	mov	r3, r9
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bfbc      	itt	lt
 8007d3c:	232d      	movlt	r3, #45	; 0x2d
 8007d3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d42:	4a7f      	ldr	r2, [pc, #508]	; (8007f40 <_printf_float+0x2e4>)
 8007d44:	4b7f      	ldr	r3, [pc, #508]	; (8007f44 <_printf_float+0x2e8>)
 8007d46:	e7d1      	b.n	8007cec <_printf_float+0x90>
 8007d48:	6863      	ldr	r3, [r4, #4]
 8007d4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d4e:	9206      	str	r2, [sp, #24]
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	d13f      	bne.n	8007dd4 <_printf_float+0x178>
 8007d54:	2306      	movs	r3, #6
 8007d56:	6063      	str	r3, [r4, #4]
 8007d58:	9b05      	ldr	r3, [sp, #20]
 8007d5a:	6861      	ldr	r1, [r4, #4]
 8007d5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d60:	2300      	movs	r3, #0
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	ab0a      	add	r3, sp, #40	; 0x28
 8007d66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d6a:	ab09      	add	r3, sp, #36	; 0x24
 8007d6c:	ec49 8b10 	vmov	d0, r8, r9
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	6022      	str	r2, [r4, #0]
 8007d74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f7ff fecf 	bl	8007b1c <__cvt>
 8007d7e:	9b06      	ldr	r3, [sp, #24]
 8007d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d82:	2b47      	cmp	r3, #71	; 0x47
 8007d84:	4680      	mov	r8, r0
 8007d86:	d108      	bne.n	8007d9a <_printf_float+0x13e>
 8007d88:	1cc8      	adds	r0, r1, #3
 8007d8a:	db02      	blt.n	8007d92 <_printf_float+0x136>
 8007d8c:	6863      	ldr	r3, [r4, #4]
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	dd41      	ble.n	8007e16 <_printf_float+0x1ba>
 8007d92:	f1ab 0302 	sub.w	r3, fp, #2
 8007d96:	fa5f fb83 	uxtb.w	fp, r3
 8007d9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d9e:	d820      	bhi.n	8007de2 <_printf_float+0x186>
 8007da0:	3901      	subs	r1, #1
 8007da2:	465a      	mov	r2, fp
 8007da4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007da8:	9109      	str	r1, [sp, #36]	; 0x24
 8007daa:	f7ff ff19 	bl	8007be0 <__exponent>
 8007dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db0:	1813      	adds	r3, r2, r0
 8007db2:	2a01      	cmp	r2, #1
 8007db4:	4681      	mov	r9, r0
 8007db6:	6123      	str	r3, [r4, #16]
 8007db8:	dc02      	bgt.n	8007dc0 <_printf_float+0x164>
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	07d2      	lsls	r2, r2, #31
 8007dbe:	d501      	bpl.n	8007dc4 <_printf_float+0x168>
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	6123      	str	r3, [r4, #16]
 8007dc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d09c      	beq.n	8007d06 <_printf_float+0xaa>
 8007dcc:	232d      	movs	r3, #45	; 0x2d
 8007dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd2:	e798      	b.n	8007d06 <_printf_float+0xaa>
 8007dd4:	9a06      	ldr	r2, [sp, #24]
 8007dd6:	2a47      	cmp	r2, #71	; 0x47
 8007dd8:	d1be      	bne.n	8007d58 <_printf_float+0xfc>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1bc      	bne.n	8007d58 <_printf_float+0xfc>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7b9      	b.n	8007d56 <_printf_float+0xfa>
 8007de2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007de6:	d118      	bne.n	8007e1a <_printf_float+0x1be>
 8007de8:	2900      	cmp	r1, #0
 8007dea:	6863      	ldr	r3, [r4, #4]
 8007dec:	dd0b      	ble.n	8007e06 <_printf_float+0x1aa>
 8007dee:	6121      	str	r1, [r4, #16]
 8007df0:	b913      	cbnz	r3, 8007df8 <_printf_float+0x19c>
 8007df2:	6822      	ldr	r2, [r4, #0]
 8007df4:	07d0      	lsls	r0, r2, #31
 8007df6:	d502      	bpl.n	8007dfe <_printf_float+0x1a2>
 8007df8:	3301      	adds	r3, #1
 8007dfa:	440b      	add	r3, r1
 8007dfc:	6123      	str	r3, [r4, #16]
 8007dfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e00:	f04f 0900 	mov.w	r9, #0
 8007e04:	e7de      	b.n	8007dc4 <_printf_float+0x168>
 8007e06:	b913      	cbnz	r3, 8007e0e <_printf_float+0x1b2>
 8007e08:	6822      	ldr	r2, [r4, #0]
 8007e0a:	07d2      	lsls	r2, r2, #31
 8007e0c:	d501      	bpl.n	8007e12 <_printf_float+0x1b6>
 8007e0e:	3302      	adds	r3, #2
 8007e10:	e7f4      	b.n	8007dfc <_printf_float+0x1a0>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7f2      	b.n	8007dfc <_printf_float+0x1a0>
 8007e16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1c:	4299      	cmp	r1, r3
 8007e1e:	db05      	blt.n	8007e2c <_printf_float+0x1d0>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	6121      	str	r1, [r4, #16]
 8007e24:	07d8      	lsls	r0, r3, #31
 8007e26:	d5ea      	bpl.n	8007dfe <_printf_float+0x1a2>
 8007e28:	1c4b      	adds	r3, r1, #1
 8007e2a:	e7e7      	b.n	8007dfc <_printf_float+0x1a0>
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	bfd4      	ite	le
 8007e30:	f1c1 0202 	rsble	r2, r1, #2
 8007e34:	2201      	movgt	r2, #1
 8007e36:	4413      	add	r3, r2
 8007e38:	e7e0      	b.n	8007dfc <_printf_float+0x1a0>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	055a      	lsls	r2, r3, #21
 8007e3e:	d407      	bmi.n	8007e50 <_printf_float+0x1f4>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	4642      	mov	r2, r8
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	d12c      	bne.n	8007ea8 <_printf_float+0x24c>
 8007e4e:	e764      	b.n	8007d1a <_printf_float+0xbe>
 8007e50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e54:	f240 80e0 	bls.w	8008018 <_printf_float+0x3bc>
 8007e58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f7f8 fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d034      	beq.n	8007ed2 <_printf_float+0x276>
 8007e68:	4a37      	ldr	r2, [pc, #220]	; (8007f48 <_printf_float+0x2ec>)
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f af51 	beq.w	8007d1a <_printf_float+0xbe>
 8007e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	db02      	blt.n	8007e86 <_printf_float+0x22a>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07d8      	lsls	r0, r3, #31
 8007e84:	d510      	bpl.n	8007ea8 <_printf_float+0x24c>
 8007e86:	ee18 3a10 	vmov	r3, s16
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f af41 	beq.w	8007d1a <_printf_float+0xbe>
 8007e98:	f04f 0800 	mov.w	r8, #0
 8007e9c:	f104 091a 	add.w	r9, r4, #26
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	4543      	cmp	r3, r8
 8007ea6:	dc09      	bgt.n	8007ebc <_printf_float+0x260>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	079b      	lsls	r3, r3, #30
 8007eac:	f100 8107 	bmi.w	80080be <_printf_float+0x462>
 8007eb0:	68e0      	ldr	r0, [r4, #12]
 8007eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb4:	4298      	cmp	r0, r3
 8007eb6:	bfb8      	it	lt
 8007eb8:	4618      	movlt	r0, r3
 8007eba:	e730      	b.n	8007d1e <_printf_float+0xc2>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	464a      	mov	r2, r9
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	f43f af27 	beq.w	8007d1a <_printf_float+0xbe>
 8007ecc:	f108 0801 	add.w	r8, r8, #1
 8007ed0:	e7e6      	b.n	8007ea0 <_printf_float+0x244>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dc39      	bgt.n	8007f4c <_printf_float+0x2f0>
 8007ed8:	4a1b      	ldr	r2, [pc, #108]	; (8007f48 <_printf_float+0x2ec>)
 8007eda:	2301      	movs	r3, #1
 8007edc:	4631      	mov	r1, r6
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b8      	blx	r7
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	f43f af19 	beq.w	8007d1a <_printf_float+0xbe>
 8007ee8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d102      	bne.n	8007ef6 <_printf_float+0x29a>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	07d9      	lsls	r1, r3, #31
 8007ef4:	d5d8      	bpl.n	8007ea8 <_printf_float+0x24c>
 8007ef6:	ee18 3a10 	vmov	r3, s16
 8007efa:	4652      	mov	r2, sl
 8007efc:	4631      	mov	r1, r6
 8007efe:	4628      	mov	r0, r5
 8007f00:	47b8      	blx	r7
 8007f02:	3001      	adds	r0, #1
 8007f04:	f43f af09 	beq.w	8007d1a <_printf_float+0xbe>
 8007f08:	f04f 0900 	mov.w	r9, #0
 8007f0c:	f104 0a1a 	add.w	sl, r4, #26
 8007f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f12:	425b      	negs	r3, r3
 8007f14:	454b      	cmp	r3, r9
 8007f16:	dc01      	bgt.n	8007f1c <_printf_float+0x2c0>
 8007f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1a:	e792      	b.n	8007e42 <_printf_float+0x1e6>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4652      	mov	r2, sl
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	f43f aef7 	beq.w	8007d1a <_printf_float+0xbe>
 8007f2c:	f109 0901 	add.w	r9, r9, #1
 8007f30:	e7ee      	b.n	8007f10 <_printf_float+0x2b4>
 8007f32:	bf00      	nop
 8007f34:	7fefffff 	.word	0x7fefffff
 8007f38:	0800b958 	.word	0x0800b958
 8007f3c:	0800b95c 	.word	0x0800b95c
 8007f40:	0800b960 	.word	0x0800b960
 8007f44:	0800b964 	.word	0x0800b964
 8007f48:	0800b968 	.word	0x0800b968
 8007f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f50:	429a      	cmp	r2, r3
 8007f52:	bfa8      	it	ge
 8007f54:	461a      	movge	r2, r3
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	4691      	mov	r9, r2
 8007f5a:	dc37      	bgt.n	8007fcc <_printf_float+0x370>
 8007f5c:	f04f 0b00 	mov.w	fp, #0
 8007f60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f64:	f104 021a 	add.w	r2, r4, #26
 8007f68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	eba3 0309 	sub.w	r3, r3, r9
 8007f70:	455b      	cmp	r3, fp
 8007f72:	dc33      	bgt.n	8007fdc <_printf_float+0x380>
 8007f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	db3b      	blt.n	8007ff4 <_printf_float+0x398>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	07da      	lsls	r2, r3, #31
 8007f80:	d438      	bmi.n	8007ff4 <_printf_float+0x398>
 8007f82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f86:	eba2 0903 	sub.w	r9, r2, r3
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	1ad2      	subs	r2, r2, r3
 8007f8e:	4591      	cmp	r9, r2
 8007f90:	bfa8      	it	ge
 8007f92:	4691      	movge	r9, r2
 8007f94:	f1b9 0f00 	cmp.w	r9, #0
 8007f98:	dc35      	bgt.n	8008006 <_printf_float+0x3aa>
 8007f9a:	f04f 0800 	mov.w	r8, #0
 8007f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fa2:	f104 0a1a 	add.w	sl, r4, #26
 8007fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	eba3 0309 	sub.w	r3, r3, r9
 8007fb0:	4543      	cmp	r3, r8
 8007fb2:	f77f af79 	ble.w	8007ea8 <_printf_float+0x24c>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4652      	mov	r2, sl
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	47b8      	blx	r7
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	f43f aeaa 	beq.w	8007d1a <_printf_float+0xbe>
 8007fc6:	f108 0801 	add.w	r8, r8, #1
 8007fca:	e7ec      	b.n	8007fa6 <_printf_float+0x34a>
 8007fcc:	4613      	mov	r3, r2
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d1c0      	bne.n	8007f5c <_printf_float+0x300>
 8007fda:	e69e      	b.n	8007d1a <_printf_float+0xbe>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	9205      	str	r2, [sp, #20]
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f ae97 	beq.w	8007d1a <_printf_float+0xbe>
 8007fec:	9a05      	ldr	r2, [sp, #20]
 8007fee:	f10b 0b01 	add.w	fp, fp, #1
 8007ff2:	e7b9      	b.n	8007f68 <_printf_float+0x30c>
 8007ff4:	ee18 3a10 	vmov	r3, s16
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b8      	blx	r7
 8008000:	3001      	adds	r0, #1
 8008002:	d1be      	bne.n	8007f82 <_printf_float+0x326>
 8008004:	e689      	b.n	8007d1a <_printf_float+0xbe>
 8008006:	9a05      	ldr	r2, [sp, #20]
 8008008:	464b      	mov	r3, r9
 800800a:	4442      	add	r2, r8
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	d1c1      	bne.n	8007f9a <_printf_float+0x33e>
 8008016:	e680      	b.n	8007d1a <_printf_float+0xbe>
 8008018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800801a:	2a01      	cmp	r2, #1
 800801c:	dc01      	bgt.n	8008022 <_printf_float+0x3c6>
 800801e:	07db      	lsls	r3, r3, #31
 8008020:	d53a      	bpl.n	8008098 <_printf_float+0x43c>
 8008022:	2301      	movs	r3, #1
 8008024:	4642      	mov	r2, r8
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f ae74 	beq.w	8007d1a <_printf_float+0xbe>
 8008032:	ee18 3a10 	vmov	r3, s16
 8008036:	4652      	mov	r2, sl
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	f43f ae6b 	beq.w	8007d1a <_printf_float+0xbe>
 8008044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008048:	2200      	movs	r2, #0
 800804a:	2300      	movs	r3, #0
 800804c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008050:	f7f8 fd42 	bl	8000ad8 <__aeabi_dcmpeq>
 8008054:	b9d8      	cbnz	r0, 800808e <_printf_float+0x432>
 8008056:	f10a 33ff 	add.w	r3, sl, #4294967295
 800805a:	f108 0201 	add.w	r2, r8, #1
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	47b8      	blx	r7
 8008064:	3001      	adds	r0, #1
 8008066:	d10e      	bne.n	8008086 <_printf_float+0x42a>
 8008068:	e657      	b.n	8007d1a <_printf_float+0xbe>
 800806a:	2301      	movs	r3, #1
 800806c:	4652      	mov	r2, sl
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f ae50 	beq.w	8007d1a <_printf_float+0xbe>
 800807a:	f108 0801 	add.w	r8, r8, #1
 800807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008080:	3b01      	subs	r3, #1
 8008082:	4543      	cmp	r3, r8
 8008084:	dcf1      	bgt.n	800806a <_printf_float+0x40e>
 8008086:	464b      	mov	r3, r9
 8008088:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800808c:	e6da      	b.n	8007e44 <_printf_float+0x1e8>
 800808e:	f04f 0800 	mov.w	r8, #0
 8008092:	f104 0a1a 	add.w	sl, r4, #26
 8008096:	e7f2      	b.n	800807e <_printf_float+0x422>
 8008098:	2301      	movs	r3, #1
 800809a:	4642      	mov	r2, r8
 800809c:	e7df      	b.n	800805e <_printf_float+0x402>
 800809e:	2301      	movs	r3, #1
 80080a0:	464a      	mov	r2, r9
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	f43f ae36 	beq.w	8007d1a <_printf_float+0xbe>
 80080ae:	f108 0801 	add.w	r8, r8, #1
 80080b2:	68e3      	ldr	r3, [r4, #12]
 80080b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080b6:	1a5b      	subs	r3, r3, r1
 80080b8:	4543      	cmp	r3, r8
 80080ba:	dcf0      	bgt.n	800809e <_printf_float+0x442>
 80080bc:	e6f8      	b.n	8007eb0 <_printf_float+0x254>
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	f104 0919 	add.w	r9, r4, #25
 80080c6:	e7f4      	b.n	80080b2 <_printf_float+0x456>

080080c8 <_printf_common>:
 80080c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	4616      	mov	r6, r2
 80080ce:	4699      	mov	r9, r3
 80080d0:	688a      	ldr	r2, [r1, #8]
 80080d2:	690b      	ldr	r3, [r1, #16]
 80080d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080d8:	4293      	cmp	r3, r2
 80080da:	bfb8      	it	lt
 80080dc:	4613      	movlt	r3, r2
 80080de:	6033      	str	r3, [r6, #0]
 80080e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080e4:	4607      	mov	r7, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b10a      	cbz	r2, 80080ee <_printf_common+0x26>
 80080ea:	3301      	adds	r3, #1
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	0699      	lsls	r1, r3, #26
 80080f2:	bf42      	ittt	mi
 80080f4:	6833      	ldrmi	r3, [r6, #0]
 80080f6:	3302      	addmi	r3, #2
 80080f8:	6033      	strmi	r3, [r6, #0]
 80080fa:	6825      	ldr	r5, [r4, #0]
 80080fc:	f015 0506 	ands.w	r5, r5, #6
 8008100:	d106      	bne.n	8008110 <_printf_common+0x48>
 8008102:	f104 0a19 	add.w	sl, r4, #25
 8008106:	68e3      	ldr	r3, [r4, #12]
 8008108:	6832      	ldr	r2, [r6, #0]
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	42ab      	cmp	r3, r5
 800810e:	dc26      	bgt.n	800815e <_printf_common+0x96>
 8008110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008114:	1e13      	subs	r3, r2, #0
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	bf18      	it	ne
 800811a:	2301      	movne	r3, #1
 800811c:	0692      	lsls	r2, r2, #26
 800811e:	d42b      	bmi.n	8008178 <_printf_common+0xb0>
 8008120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008124:	4649      	mov	r1, r9
 8008126:	4638      	mov	r0, r7
 8008128:	47c0      	blx	r8
 800812a:	3001      	adds	r0, #1
 800812c:	d01e      	beq.n	800816c <_printf_common+0xa4>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	6922      	ldr	r2, [r4, #16]
 8008132:	f003 0306 	and.w	r3, r3, #6
 8008136:	2b04      	cmp	r3, #4
 8008138:	bf02      	ittt	eq
 800813a:	68e5      	ldreq	r5, [r4, #12]
 800813c:	6833      	ldreq	r3, [r6, #0]
 800813e:	1aed      	subeq	r5, r5, r3
 8008140:	68a3      	ldr	r3, [r4, #8]
 8008142:	bf0c      	ite	eq
 8008144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008148:	2500      	movne	r5, #0
 800814a:	4293      	cmp	r3, r2
 800814c:	bfc4      	itt	gt
 800814e:	1a9b      	subgt	r3, r3, r2
 8008150:	18ed      	addgt	r5, r5, r3
 8008152:	2600      	movs	r6, #0
 8008154:	341a      	adds	r4, #26
 8008156:	42b5      	cmp	r5, r6
 8008158:	d11a      	bne.n	8008190 <_printf_common+0xc8>
 800815a:	2000      	movs	r0, #0
 800815c:	e008      	b.n	8008170 <_printf_common+0xa8>
 800815e:	2301      	movs	r3, #1
 8008160:	4652      	mov	r2, sl
 8008162:	4649      	mov	r1, r9
 8008164:	4638      	mov	r0, r7
 8008166:	47c0      	blx	r8
 8008168:	3001      	adds	r0, #1
 800816a:	d103      	bne.n	8008174 <_printf_common+0xac>
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008174:	3501      	adds	r5, #1
 8008176:	e7c6      	b.n	8008106 <_printf_common+0x3e>
 8008178:	18e1      	adds	r1, r4, r3
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	2030      	movs	r0, #48	; 0x30
 800817e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008182:	4422      	add	r2, r4
 8008184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800818c:	3302      	adds	r3, #2
 800818e:	e7c7      	b.n	8008120 <_printf_common+0x58>
 8008190:	2301      	movs	r3, #1
 8008192:	4622      	mov	r2, r4
 8008194:	4649      	mov	r1, r9
 8008196:	4638      	mov	r0, r7
 8008198:	47c0      	blx	r8
 800819a:	3001      	adds	r0, #1
 800819c:	d0e6      	beq.n	800816c <_printf_common+0xa4>
 800819e:	3601      	adds	r6, #1
 80081a0:	e7d9      	b.n	8008156 <_printf_common+0x8e>
	...

080081a4 <_printf_i>:
 80081a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	7e0f      	ldrb	r7, [r1, #24]
 80081aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081ac:	2f78      	cmp	r7, #120	; 0x78
 80081ae:	4691      	mov	r9, r2
 80081b0:	4680      	mov	r8, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	469a      	mov	sl, r3
 80081b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081ba:	d807      	bhi.n	80081cc <_printf_i+0x28>
 80081bc:	2f62      	cmp	r7, #98	; 0x62
 80081be:	d80a      	bhi.n	80081d6 <_printf_i+0x32>
 80081c0:	2f00      	cmp	r7, #0
 80081c2:	f000 80d4 	beq.w	800836e <_printf_i+0x1ca>
 80081c6:	2f58      	cmp	r7, #88	; 0x58
 80081c8:	f000 80c0 	beq.w	800834c <_printf_i+0x1a8>
 80081cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081d4:	e03a      	b.n	800824c <_printf_i+0xa8>
 80081d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081da:	2b15      	cmp	r3, #21
 80081dc:	d8f6      	bhi.n	80081cc <_printf_i+0x28>
 80081de:	a101      	add	r1, pc, #4	; (adr r1, 80081e4 <_printf_i+0x40>)
 80081e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081e4:	0800823d 	.word	0x0800823d
 80081e8:	08008251 	.word	0x08008251
 80081ec:	080081cd 	.word	0x080081cd
 80081f0:	080081cd 	.word	0x080081cd
 80081f4:	080081cd 	.word	0x080081cd
 80081f8:	080081cd 	.word	0x080081cd
 80081fc:	08008251 	.word	0x08008251
 8008200:	080081cd 	.word	0x080081cd
 8008204:	080081cd 	.word	0x080081cd
 8008208:	080081cd 	.word	0x080081cd
 800820c:	080081cd 	.word	0x080081cd
 8008210:	08008355 	.word	0x08008355
 8008214:	0800827d 	.word	0x0800827d
 8008218:	0800830f 	.word	0x0800830f
 800821c:	080081cd 	.word	0x080081cd
 8008220:	080081cd 	.word	0x080081cd
 8008224:	08008377 	.word	0x08008377
 8008228:	080081cd 	.word	0x080081cd
 800822c:	0800827d 	.word	0x0800827d
 8008230:	080081cd 	.word	0x080081cd
 8008234:	080081cd 	.word	0x080081cd
 8008238:	08008317 	.word	0x08008317
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	1d1a      	adds	r2, r3, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	602a      	str	r2, [r5, #0]
 8008244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800824c:	2301      	movs	r3, #1
 800824e:	e09f      	b.n	8008390 <_printf_i+0x1ec>
 8008250:	6820      	ldr	r0, [r4, #0]
 8008252:	682b      	ldr	r3, [r5, #0]
 8008254:	0607      	lsls	r7, r0, #24
 8008256:	f103 0104 	add.w	r1, r3, #4
 800825a:	6029      	str	r1, [r5, #0]
 800825c:	d501      	bpl.n	8008262 <_printf_i+0xbe>
 800825e:	681e      	ldr	r6, [r3, #0]
 8008260:	e003      	b.n	800826a <_printf_i+0xc6>
 8008262:	0646      	lsls	r6, r0, #25
 8008264:	d5fb      	bpl.n	800825e <_printf_i+0xba>
 8008266:	f9b3 6000 	ldrsh.w	r6, [r3]
 800826a:	2e00      	cmp	r6, #0
 800826c:	da03      	bge.n	8008276 <_printf_i+0xd2>
 800826e:	232d      	movs	r3, #45	; 0x2d
 8008270:	4276      	negs	r6, r6
 8008272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008276:	485a      	ldr	r0, [pc, #360]	; (80083e0 <_printf_i+0x23c>)
 8008278:	230a      	movs	r3, #10
 800827a:	e012      	b.n	80082a2 <_printf_i+0xfe>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	6820      	ldr	r0, [r4, #0]
 8008280:	1d19      	adds	r1, r3, #4
 8008282:	6029      	str	r1, [r5, #0]
 8008284:	0605      	lsls	r5, r0, #24
 8008286:	d501      	bpl.n	800828c <_printf_i+0xe8>
 8008288:	681e      	ldr	r6, [r3, #0]
 800828a:	e002      	b.n	8008292 <_printf_i+0xee>
 800828c:	0641      	lsls	r1, r0, #25
 800828e:	d5fb      	bpl.n	8008288 <_printf_i+0xe4>
 8008290:	881e      	ldrh	r6, [r3, #0]
 8008292:	4853      	ldr	r0, [pc, #332]	; (80083e0 <_printf_i+0x23c>)
 8008294:	2f6f      	cmp	r7, #111	; 0x6f
 8008296:	bf0c      	ite	eq
 8008298:	2308      	moveq	r3, #8
 800829a:	230a      	movne	r3, #10
 800829c:	2100      	movs	r1, #0
 800829e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082a2:	6865      	ldr	r5, [r4, #4]
 80082a4:	60a5      	str	r5, [r4, #8]
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	bfa2      	ittt	ge
 80082aa:	6821      	ldrge	r1, [r4, #0]
 80082ac:	f021 0104 	bicge.w	r1, r1, #4
 80082b0:	6021      	strge	r1, [r4, #0]
 80082b2:	b90e      	cbnz	r6, 80082b8 <_printf_i+0x114>
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	d04b      	beq.n	8008350 <_printf_i+0x1ac>
 80082b8:	4615      	mov	r5, r2
 80082ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80082be:	fb03 6711 	mls	r7, r3, r1, r6
 80082c2:	5dc7      	ldrb	r7, [r0, r7]
 80082c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082c8:	4637      	mov	r7, r6
 80082ca:	42bb      	cmp	r3, r7
 80082cc:	460e      	mov	r6, r1
 80082ce:	d9f4      	bls.n	80082ba <_printf_i+0x116>
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d10b      	bne.n	80082ec <_printf_i+0x148>
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	07de      	lsls	r6, r3, #31
 80082d8:	d508      	bpl.n	80082ec <_printf_i+0x148>
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	6861      	ldr	r1, [r4, #4]
 80082de:	4299      	cmp	r1, r3
 80082e0:	bfde      	ittt	le
 80082e2:	2330      	movle	r3, #48	; 0x30
 80082e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082ec:	1b52      	subs	r2, r2, r5
 80082ee:	6122      	str	r2, [r4, #16]
 80082f0:	f8cd a000 	str.w	sl, [sp]
 80082f4:	464b      	mov	r3, r9
 80082f6:	aa03      	add	r2, sp, #12
 80082f8:	4621      	mov	r1, r4
 80082fa:	4640      	mov	r0, r8
 80082fc:	f7ff fee4 	bl	80080c8 <_printf_common>
 8008300:	3001      	adds	r0, #1
 8008302:	d14a      	bne.n	800839a <_printf_i+0x1f6>
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	b004      	add	sp, #16
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	f043 0320 	orr.w	r3, r3, #32
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	4833      	ldr	r0, [pc, #204]	; (80083e4 <_printf_i+0x240>)
 8008318:	2778      	movs	r7, #120	; 0x78
 800831a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	6829      	ldr	r1, [r5, #0]
 8008322:	061f      	lsls	r7, r3, #24
 8008324:	f851 6b04 	ldr.w	r6, [r1], #4
 8008328:	d402      	bmi.n	8008330 <_printf_i+0x18c>
 800832a:	065f      	lsls	r7, r3, #25
 800832c:	bf48      	it	mi
 800832e:	b2b6      	uxthmi	r6, r6
 8008330:	07df      	lsls	r7, r3, #31
 8008332:	bf48      	it	mi
 8008334:	f043 0320 	orrmi.w	r3, r3, #32
 8008338:	6029      	str	r1, [r5, #0]
 800833a:	bf48      	it	mi
 800833c:	6023      	strmi	r3, [r4, #0]
 800833e:	b91e      	cbnz	r6, 8008348 <_printf_i+0x1a4>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	f023 0320 	bic.w	r3, r3, #32
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	2310      	movs	r3, #16
 800834a:	e7a7      	b.n	800829c <_printf_i+0xf8>
 800834c:	4824      	ldr	r0, [pc, #144]	; (80083e0 <_printf_i+0x23c>)
 800834e:	e7e4      	b.n	800831a <_printf_i+0x176>
 8008350:	4615      	mov	r5, r2
 8008352:	e7bd      	b.n	80082d0 <_printf_i+0x12c>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	6826      	ldr	r6, [r4, #0]
 8008358:	6961      	ldr	r1, [r4, #20]
 800835a:	1d18      	adds	r0, r3, #4
 800835c:	6028      	str	r0, [r5, #0]
 800835e:	0635      	lsls	r5, r6, #24
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	d501      	bpl.n	8008368 <_printf_i+0x1c4>
 8008364:	6019      	str	r1, [r3, #0]
 8008366:	e002      	b.n	800836e <_printf_i+0x1ca>
 8008368:	0670      	lsls	r0, r6, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0x1c0>
 800836c:	8019      	strh	r1, [r3, #0]
 800836e:	2300      	movs	r3, #0
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	4615      	mov	r5, r2
 8008374:	e7bc      	b.n	80082f0 <_printf_i+0x14c>
 8008376:	682b      	ldr	r3, [r5, #0]
 8008378:	1d1a      	adds	r2, r3, #4
 800837a:	602a      	str	r2, [r5, #0]
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	6862      	ldr	r2, [r4, #4]
 8008380:	2100      	movs	r1, #0
 8008382:	4628      	mov	r0, r5
 8008384:	f7f7 ff2c 	bl	80001e0 <memchr>
 8008388:	b108      	cbz	r0, 800838e <_printf_i+0x1ea>
 800838a:	1b40      	subs	r0, r0, r5
 800838c:	6060      	str	r0, [r4, #4]
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	6123      	str	r3, [r4, #16]
 8008392:	2300      	movs	r3, #0
 8008394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008398:	e7aa      	b.n	80082f0 <_printf_i+0x14c>
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	462a      	mov	r2, r5
 800839e:	4649      	mov	r1, r9
 80083a0:	4640      	mov	r0, r8
 80083a2:	47d0      	blx	sl
 80083a4:	3001      	adds	r0, #1
 80083a6:	d0ad      	beq.n	8008304 <_printf_i+0x160>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	079b      	lsls	r3, r3, #30
 80083ac:	d413      	bmi.n	80083d6 <_printf_i+0x232>
 80083ae:	68e0      	ldr	r0, [r4, #12]
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	4298      	cmp	r0, r3
 80083b4:	bfb8      	it	lt
 80083b6:	4618      	movlt	r0, r3
 80083b8:	e7a6      	b.n	8008308 <_printf_i+0x164>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4632      	mov	r2, r6
 80083be:	4649      	mov	r1, r9
 80083c0:	4640      	mov	r0, r8
 80083c2:	47d0      	blx	sl
 80083c4:	3001      	adds	r0, #1
 80083c6:	d09d      	beq.n	8008304 <_printf_i+0x160>
 80083c8:	3501      	adds	r5, #1
 80083ca:	68e3      	ldr	r3, [r4, #12]
 80083cc:	9903      	ldr	r1, [sp, #12]
 80083ce:	1a5b      	subs	r3, r3, r1
 80083d0:	42ab      	cmp	r3, r5
 80083d2:	dcf2      	bgt.n	80083ba <_printf_i+0x216>
 80083d4:	e7eb      	b.n	80083ae <_printf_i+0x20a>
 80083d6:	2500      	movs	r5, #0
 80083d8:	f104 0619 	add.w	r6, r4, #25
 80083dc:	e7f5      	b.n	80083ca <_printf_i+0x226>
 80083de:	bf00      	nop
 80083e0:	0800b96a 	.word	0x0800b96a
 80083e4:	0800b97b 	.word	0x0800b97b

080083e8 <std>:
 80083e8:	2300      	movs	r3, #0
 80083ea:	b510      	push	{r4, lr}
 80083ec:	4604      	mov	r4, r0
 80083ee:	e9c0 3300 	strd	r3, r3, [r0]
 80083f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083f6:	6083      	str	r3, [r0, #8]
 80083f8:	8181      	strh	r1, [r0, #12]
 80083fa:	6643      	str	r3, [r0, #100]	; 0x64
 80083fc:	81c2      	strh	r2, [r0, #14]
 80083fe:	6183      	str	r3, [r0, #24]
 8008400:	4619      	mov	r1, r3
 8008402:	2208      	movs	r2, #8
 8008404:	305c      	adds	r0, #92	; 0x5c
 8008406:	f000 f914 	bl	8008632 <memset>
 800840a:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <std+0x58>)
 800840c:	6263      	str	r3, [r4, #36]	; 0x24
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <std+0x5c>)
 8008410:	62a3      	str	r3, [r4, #40]	; 0x28
 8008412:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <std+0x60>)
 8008414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008416:	4b0d      	ldr	r3, [pc, #52]	; (800844c <std+0x64>)
 8008418:	6323      	str	r3, [r4, #48]	; 0x30
 800841a:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <std+0x68>)
 800841c:	6224      	str	r4, [r4, #32]
 800841e:	429c      	cmp	r4, r3
 8008420:	d006      	beq.n	8008430 <std+0x48>
 8008422:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008426:	4294      	cmp	r4, r2
 8008428:	d002      	beq.n	8008430 <std+0x48>
 800842a:	33d0      	adds	r3, #208	; 0xd0
 800842c:	429c      	cmp	r4, r3
 800842e:	d105      	bne.n	800843c <std+0x54>
 8008430:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008438:	f000 b988 	b.w	800874c <__retarget_lock_init_recursive>
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	080085ad 	.word	0x080085ad
 8008444:	080085cf 	.word	0x080085cf
 8008448:	08008607 	.word	0x08008607
 800844c:	0800862b 	.word	0x0800862b
 8008450:	200007c4 	.word	0x200007c4

08008454 <stdio_exit_handler>:
 8008454:	4a02      	ldr	r2, [pc, #8]	; (8008460 <stdio_exit_handler+0xc>)
 8008456:	4903      	ldr	r1, [pc, #12]	; (8008464 <stdio_exit_handler+0x10>)
 8008458:	4803      	ldr	r0, [pc, #12]	; (8008468 <stdio_exit_handler+0x14>)
 800845a:	f000 b869 	b.w	8008530 <_fwalk_sglue>
 800845e:	bf00      	nop
 8008460:	2000007c 	.word	0x2000007c
 8008464:	08009fb1 	.word	0x08009fb1
 8008468:	20000088 	.word	0x20000088

0800846c <cleanup_stdio>:
 800846c:	6841      	ldr	r1, [r0, #4]
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <cleanup_stdio+0x34>)
 8008470:	4299      	cmp	r1, r3
 8008472:	b510      	push	{r4, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	d001      	beq.n	800847c <cleanup_stdio+0x10>
 8008478:	f001 fd9a 	bl	8009fb0 <_fflush_r>
 800847c:	68a1      	ldr	r1, [r4, #8]
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <cleanup_stdio+0x38>)
 8008480:	4299      	cmp	r1, r3
 8008482:	d002      	beq.n	800848a <cleanup_stdio+0x1e>
 8008484:	4620      	mov	r0, r4
 8008486:	f001 fd93 	bl	8009fb0 <_fflush_r>
 800848a:	68e1      	ldr	r1, [r4, #12]
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <cleanup_stdio+0x3c>)
 800848e:	4299      	cmp	r1, r3
 8008490:	d004      	beq.n	800849c <cleanup_stdio+0x30>
 8008492:	4620      	mov	r0, r4
 8008494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008498:	f001 bd8a 	b.w	8009fb0 <_fflush_r>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	bf00      	nop
 80084a0:	200007c4 	.word	0x200007c4
 80084a4:	2000082c 	.word	0x2000082c
 80084a8:	20000894 	.word	0x20000894

080084ac <global_stdio_init.part.0>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <global_stdio_init.part.0+0x30>)
 80084b0:	4c0b      	ldr	r4, [pc, #44]	; (80084e0 <global_stdio_init.part.0+0x34>)
 80084b2:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <global_stdio_init.part.0+0x38>)
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	4620      	mov	r0, r4
 80084b8:	2200      	movs	r2, #0
 80084ba:	2104      	movs	r1, #4
 80084bc:	f7ff ff94 	bl	80083e8 <std>
 80084c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80084c4:	2201      	movs	r2, #1
 80084c6:	2109      	movs	r1, #9
 80084c8:	f7ff ff8e 	bl	80083e8 <std>
 80084cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084d0:	2202      	movs	r2, #2
 80084d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d6:	2112      	movs	r1, #18
 80084d8:	f7ff bf86 	b.w	80083e8 <std>
 80084dc:	200008fc 	.word	0x200008fc
 80084e0:	200007c4 	.word	0x200007c4
 80084e4:	08008455 	.word	0x08008455

080084e8 <__sfp_lock_acquire>:
 80084e8:	4801      	ldr	r0, [pc, #4]	; (80084f0 <__sfp_lock_acquire+0x8>)
 80084ea:	f000 b930 	b.w	800874e <__retarget_lock_acquire_recursive>
 80084ee:	bf00      	nop
 80084f0:	20000905 	.word	0x20000905

080084f4 <__sfp_lock_release>:
 80084f4:	4801      	ldr	r0, [pc, #4]	; (80084fc <__sfp_lock_release+0x8>)
 80084f6:	f000 b92b 	b.w	8008750 <__retarget_lock_release_recursive>
 80084fa:	bf00      	nop
 80084fc:	20000905 	.word	0x20000905

08008500 <__sinit>:
 8008500:	b510      	push	{r4, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	f7ff fff0 	bl	80084e8 <__sfp_lock_acquire>
 8008508:	6a23      	ldr	r3, [r4, #32]
 800850a:	b11b      	cbz	r3, 8008514 <__sinit+0x14>
 800850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008510:	f7ff bff0 	b.w	80084f4 <__sfp_lock_release>
 8008514:	4b04      	ldr	r3, [pc, #16]	; (8008528 <__sinit+0x28>)
 8008516:	6223      	str	r3, [r4, #32]
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <__sinit+0x2c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1f5      	bne.n	800850c <__sinit+0xc>
 8008520:	f7ff ffc4 	bl	80084ac <global_stdio_init.part.0>
 8008524:	e7f2      	b.n	800850c <__sinit+0xc>
 8008526:	bf00      	nop
 8008528:	0800846d 	.word	0x0800846d
 800852c:	200008fc 	.word	0x200008fc

08008530 <_fwalk_sglue>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4607      	mov	r7, r0
 8008536:	4688      	mov	r8, r1
 8008538:	4614      	mov	r4, r2
 800853a:	2600      	movs	r6, #0
 800853c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008540:	f1b9 0901 	subs.w	r9, r9, #1
 8008544:	d505      	bpl.n	8008552 <_fwalk_sglue+0x22>
 8008546:	6824      	ldr	r4, [r4, #0]
 8008548:	2c00      	cmp	r4, #0
 800854a:	d1f7      	bne.n	800853c <_fwalk_sglue+0xc>
 800854c:	4630      	mov	r0, r6
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d907      	bls.n	8008568 <_fwalk_sglue+0x38>
 8008558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800855c:	3301      	adds	r3, #1
 800855e:	d003      	beq.n	8008568 <_fwalk_sglue+0x38>
 8008560:	4629      	mov	r1, r5
 8008562:	4638      	mov	r0, r7
 8008564:	47c0      	blx	r8
 8008566:	4306      	orrs	r6, r0
 8008568:	3568      	adds	r5, #104	; 0x68
 800856a:	e7e9      	b.n	8008540 <_fwalk_sglue+0x10>

0800856c <siprintf>:
 800856c:	b40e      	push	{r1, r2, r3}
 800856e:	b500      	push	{lr}
 8008570:	b09c      	sub	sp, #112	; 0x70
 8008572:	ab1d      	add	r3, sp, #116	; 0x74
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	9006      	str	r0, [sp, #24]
 8008578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800857c:	4809      	ldr	r0, [pc, #36]	; (80085a4 <siprintf+0x38>)
 800857e:	9107      	str	r1, [sp, #28]
 8008580:	9104      	str	r1, [sp, #16]
 8008582:	4909      	ldr	r1, [pc, #36]	; (80085a8 <siprintf+0x3c>)
 8008584:	f853 2b04 	ldr.w	r2, [r3], #4
 8008588:	9105      	str	r1, [sp, #20]
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	a902      	add	r1, sp, #8
 8008590:	f001 fb8a 	bl	8009ca8 <_svfiprintf_r>
 8008594:	9b02      	ldr	r3, [sp, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	b01c      	add	sp, #112	; 0x70
 800859c:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a0:	b003      	add	sp, #12
 80085a2:	4770      	bx	lr
 80085a4:	200000d4 	.word	0x200000d4
 80085a8:	ffff0208 	.word	0xffff0208

080085ac <__sread>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	460c      	mov	r4, r1
 80085b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b4:	f000 f86c 	bl	8008690 <_read_r>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	bfab      	itete	ge
 80085bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085be:	89a3      	ldrhlt	r3, [r4, #12]
 80085c0:	181b      	addge	r3, r3, r0
 80085c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085c6:	bfac      	ite	ge
 80085c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ca:	81a3      	strhlt	r3, [r4, #12]
 80085cc:	bd10      	pop	{r4, pc}

080085ce <__swrite>:
 80085ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d2:	461f      	mov	r7, r3
 80085d4:	898b      	ldrh	r3, [r1, #12]
 80085d6:	05db      	lsls	r3, r3, #23
 80085d8:	4605      	mov	r5, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	4616      	mov	r6, r2
 80085de:	d505      	bpl.n	80085ec <__swrite+0x1e>
 80085e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e4:	2302      	movs	r3, #2
 80085e6:	2200      	movs	r2, #0
 80085e8:	f000 f840 	bl	800866c <_lseek_r>
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	4632      	mov	r2, r6
 80085fa:	463b      	mov	r3, r7
 80085fc:	4628      	mov	r0, r5
 80085fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008602:	f000 b867 	b.w	80086d4 <_write_r>

08008606 <__sseek>:
 8008606:	b510      	push	{r4, lr}
 8008608:	460c      	mov	r4, r1
 800860a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860e:	f000 f82d 	bl	800866c <_lseek_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	bf15      	itete	ne
 8008618:	6560      	strne	r0, [r4, #84]	; 0x54
 800861a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800861e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008622:	81a3      	strheq	r3, [r4, #12]
 8008624:	bf18      	it	ne
 8008626:	81a3      	strhne	r3, [r4, #12]
 8008628:	bd10      	pop	{r4, pc}

0800862a <__sclose>:
 800862a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862e:	f000 b80d 	b.w	800864c <_close_r>

08008632 <memset>:
 8008632:	4402      	add	r2, r0
 8008634:	4603      	mov	r3, r0
 8008636:	4293      	cmp	r3, r2
 8008638:	d100      	bne.n	800863c <memset+0xa>
 800863a:	4770      	bx	lr
 800863c:	f803 1b01 	strb.w	r1, [r3], #1
 8008640:	e7f9      	b.n	8008636 <memset+0x4>
	...

08008644 <_localeconv_r>:
 8008644:	4800      	ldr	r0, [pc, #0]	; (8008648 <_localeconv_r+0x4>)
 8008646:	4770      	bx	lr
 8008648:	200001c8 	.word	0x200001c8

0800864c <_close_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d06      	ldr	r5, [pc, #24]	; (8008668 <_close_r+0x1c>)
 8008650:	2300      	movs	r3, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	602b      	str	r3, [r5, #0]
 8008658:	f7fc faab 	bl	8004bb2 <_close>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_close_r+0x1a>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_close_r+0x1a>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20000900 	.word	0x20000900

0800866c <_lseek_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d07      	ldr	r5, [pc, #28]	; (800868c <_lseek_r+0x20>)
 8008670:	4604      	mov	r4, r0
 8008672:	4608      	mov	r0, r1
 8008674:	4611      	mov	r1, r2
 8008676:	2200      	movs	r2, #0
 8008678:	602a      	str	r2, [r5, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f7fc fac0 	bl	8004c00 <_lseek>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_lseek_r+0x1e>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_lseek_r+0x1e>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000900 	.word	0x20000900

08008690 <_read_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_read_r+0x20>)
 8008694:	4604      	mov	r4, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7fc fa4e 	bl	8004b40 <_read>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_read_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_read_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	20000900 	.word	0x20000900

080086b4 <_sbrk_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	; (80086d0 <_sbrk_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7fc faac 	bl	8004c1c <_sbrk>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_sbrk_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_sbrk_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20000900 	.word	0x20000900

080086d4 <_write_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d07      	ldr	r5, [pc, #28]	; (80086f4 <_write_r+0x20>)
 80086d8:	4604      	mov	r4, r0
 80086da:	4608      	mov	r0, r1
 80086dc:	4611      	mov	r1, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	602a      	str	r2, [r5, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f7fc fa49 	bl	8004b7a <_write>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_write_r+0x1e>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_write_r+0x1e>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000900 	.word	0x20000900

080086f8 <__errno>:
 80086f8:	4b01      	ldr	r3, [pc, #4]	; (8008700 <__errno+0x8>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	200000d4 	.word	0x200000d4

08008704 <__libc_init_array>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4d0d      	ldr	r5, [pc, #52]	; (800873c <__libc_init_array+0x38>)
 8008708:	4c0d      	ldr	r4, [pc, #52]	; (8008740 <__libc_init_array+0x3c>)
 800870a:	1b64      	subs	r4, r4, r5
 800870c:	10a4      	asrs	r4, r4, #2
 800870e:	2600      	movs	r6, #0
 8008710:	42a6      	cmp	r6, r4
 8008712:	d109      	bne.n	8008728 <__libc_init_array+0x24>
 8008714:	4d0b      	ldr	r5, [pc, #44]	; (8008744 <__libc_init_array+0x40>)
 8008716:	4c0c      	ldr	r4, [pc, #48]	; (8008748 <__libc_init_array+0x44>)
 8008718:	f001 ffd0 	bl	800a6bc <_init>
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	10a4      	asrs	r4, r4, #2
 8008720:	2600      	movs	r6, #0
 8008722:	42a6      	cmp	r6, r4
 8008724:	d105      	bne.n	8008732 <__libc_init_array+0x2e>
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	f855 3b04 	ldr.w	r3, [r5], #4
 800872c:	4798      	blx	r3
 800872e:	3601      	adds	r6, #1
 8008730:	e7ee      	b.n	8008710 <__libc_init_array+0xc>
 8008732:	f855 3b04 	ldr.w	r3, [r5], #4
 8008736:	4798      	blx	r3
 8008738:	3601      	adds	r6, #1
 800873a:	e7f2      	b.n	8008722 <__libc_init_array+0x1e>
 800873c:	0800bcd4 	.word	0x0800bcd4
 8008740:	0800bcd4 	.word	0x0800bcd4
 8008744:	0800bcd4 	.word	0x0800bcd4
 8008748:	0800bcd8 	.word	0x0800bcd8

0800874c <__retarget_lock_init_recursive>:
 800874c:	4770      	bx	lr

0800874e <__retarget_lock_acquire_recursive>:
 800874e:	4770      	bx	lr

08008750 <__retarget_lock_release_recursive>:
 8008750:	4770      	bx	lr

08008752 <memcpy>:
 8008752:	440a      	add	r2, r1
 8008754:	4291      	cmp	r1, r2
 8008756:	f100 33ff 	add.w	r3, r0, #4294967295
 800875a:	d100      	bne.n	800875e <memcpy+0xc>
 800875c:	4770      	bx	lr
 800875e:	b510      	push	{r4, lr}
 8008760:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008764:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008768:	4291      	cmp	r1, r2
 800876a:	d1f9      	bne.n	8008760 <memcpy+0xe>
 800876c:	bd10      	pop	{r4, pc}

0800876e <quorem>:
 800876e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008772:	6903      	ldr	r3, [r0, #16]
 8008774:	690c      	ldr	r4, [r1, #16]
 8008776:	42a3      	cmp	r3, r4
 8008778:	4607      	mov	r7, r0
 800877a:	db7e      	blt.n	800887a <quorem+0x10c>
 800877c:	3c01      	subs	r4, #1
 800877e:	f101 0814 	add.w	r8, r1, #20
 8008782:	f100 0514 	add.w	r5, r0, #20
 8008786:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008790:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008794:	3301      	adds	r3, #1
 8008796:	429a      	cmp	r2, r3
 8008798:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800879c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80087a4:	d331      	bcc.n	800880a <quorem+0x9c>
 80087a6:	f04f 0e00 	mov.w	lr, #0
 80087aa:	4640      	mov	r0, r8
 80087ac:	46ac      	mov	ip, r5
 80087ae:	46f2      	mov	sl, lr
 80087b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80087b4:	b293      	uxth	r3, r2
 80087b6:	fb06 e303 	mla	r3, r6, r3, lr
 80087ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087be:	0c1a      	lsrs	r2, r3, #16
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	ebaa 0303 	sub.w	r3, sl, r3
 80087c6:	f8dc a000 	ldr.w	sl, [ip]
 80087ca:	fa13 f38a 	uxtah	r3, r3, sl
 80087ce:	fb06 220e 	mla	r2, r6, lr, r2
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087da:	b292      	uxth	r2, r2
 80087dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80087e8:	4581      	cmp	r9, r0
 80087ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087ee:	f84c 3b04 	str.w	r3, [ip], #4
 80087f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087f6:	d2db      	bcs.n	80087b0 <quorem+0x42>
 80087f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80087fc:	b92b      	cbnz	r3, 800880a <quorem+0x9c>
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	3b04      	subs	r3, #4
 8008802:	429d      	cmp	r5, r3
 8008804:	461a      	mov	r2, r3
 8008806:	d32c      	bcc.n	8008862 <quorem+0xf4>
 8008808:	613c      	str	r4, [r7, #16]
 800880a:	4638      	mov	r0, r7
 800880c:	f001 f8f2 	bl	80099f4 <__mcmp>
 8008810:	2800      	cmp	r0, #0
 8008812:	db22      	blt.n	800885a <quorem+0xec>
 8008814:	3601      	adds	r6, #1
 8008816:	4629      	mov	r1, r5
 8008818:	2000      	movs	r0, #0
 800881a:	f858 2b04 	ldr.w	r2, [r8], #4
 800881e:	f8d1 c000 	ldr.w	ip, [r1]
 8008822:	b293      	uxth	r3, r2
 8008824:	1ac3      	subs	r3, r0, r3
 8008826:	0c12      	lsrs	r2, r2, #16
 8008828:	fa13 f38c 	uxtah	r3, r3, ip
 800882c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008834:	b29b      	uxth	r3, r3
 8008836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800883a:	45c1      	cmp	r9, r8
 800883c:	f841 3b04 	str.w	r3, [r1], #4
 8008840:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008844:	d2e9      	bcs.n	800881a <quorem+0xac>
 8008846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800884a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800884e:	b922      	cbnz	r2, 800885a <quorem+0xec>
 8008850:	3b04      	subs	r3, #4
 8008852:	429d      	cmp	r5, r3
 8008854:	461a      	mov	r2, r3
 8008856:	d30a      	bcc.n	800886e <quorem+0x100>
 8008858:	613c      	str	r4, [r7, #16]
 800885a:	4630      	mov	r0, r6
 800885c:	b003      	add	sp, #12
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	3b04      	subs	r3, #4
 8008866:	2a00      	cmp	r2, #0
 8008868:	d1ce      	bne.n	8008808 <quorem+0x9a>
 800886a:	3c01      	subs	r4, #1
 800886c:	e7c9      	b.n	8008802 <quorem+0x94>
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	3b04      	subs	r3, #4
 8008872:	2a00      	cmp	r2, #0
 8008874:	d1f0      	bne.n	8008858 <quorem+0xea>
 8008876:	3c01      	subs	r4, #1
 8008878:	e7eb      	b.n	8008852 <quorem+0xe4>
 800887a:	2000      	movs	r0, #0
 800887c:	e7ee      	b.n	800885c <quorem+0xee>
	...

08008880 <_dtoa_r>:
 8008880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008884:	ed2d 8b04 	vpush	{d8-d9}
 8008888:	69c5      	ldr	r5, [r0, #28]
 800888a:	b093      	sub	sp, #76	; 0x4c
 800888c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008890:	ec57 6b10 	vmov	r6, r7, d0
 8008894:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008898:	9107      	str	r1, [sp, #28]
 800889a:	4604      	mov	r4, r0
 800889c:	920a      	str	r2, [sp, #40]	; 0x28
 800889e:	930d      	str	r3, [sp, #52]	; 0x34
 80088a0:	b975      	cbnz	r5, 80088c0 <_dtoa_r+0x40>
 80088a2:	2010      	movs	r0, #16
 80088a4:	f7ff f886 	bl	80079b4 <malloc>
 80088a8:	4602      	mov	r2, r0
 80088aa:	61e0      	str	r0, [r4, #28]
 80088ac:	b920      	cbnz	r0, 80088b8 <_dtoa_r+0x38>
 80088ae:	4bae      	ldr	r3, [pc, #696]	; (8008b68 <_dtoa_r+0x2e8>)
 80088b0:	21ef      	movs	r1, #239	; 0xef
 80088b2:	48ae      	ldr	r0, [pc, #696]	; (8008b6c <_dtoa_r+0x2ec>)
 80088b4:	f001 fbbe 	bl	800a034 <__assert_func>
 80088b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088bc:	6005      	str	r5, [r0, #0]
 80088be:	60c5      	str	r5, [r0, #12]
 80088c0:	69e3      	ldr	r3, [r4, #28]
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	b151      	cbz	r1, 80088dc <_dtoa_r+0x5c>
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	604a      	str	r2, [r1, #4]
 80088ca:	2301      	movs	r3, #1
 80088cc:	4093      	lsls	r3, r2
 80088ce:	608b      	str	r3, [r1, #8]
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fe53 	bl	800957c <_Bfree>
 80088d6:	69e3      	ldr	r3, [r4, #28]
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	1e3b      	subs	r3, r7, #0
 80088de:	bfbb      	ittet	lt
 80088e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088e4:	9303      	strlt	r3, [sp, #12]
 80088e6:	2300      	movge	r3, #0
 80088e8:	2201      	movlt	r2, #1
 80088ea:	bfac      	ite	ge
 80088ec:	f8c8 3000 	strge.w	r3, [r8]
 80088f0:	f8c8 2000 	strlt.w	r2, [r8]
 80088f4:	4b9e      	ldr	r3, [pc, #632]	; (8008b70 <_dtoa_r+0x2f0>)
 80088f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80088fa:	ea33 0308 	bics.w	r3, r3, r8
 80088fe:	d11b      	bne.n	8008938 <_dtoa_r+0xb8>
 8008900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008902:	f242 730f 	movw	r3, #9999	; 0x270f
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800890c:	4333      	orrs	r3, r6
 800890e:	f000 8593 	beq.w	8009438 <_dtoa_r+0xbb8>
 8008912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008914:	b963      	cbnz	r3, 8008930 <_dtoa_r+0xb0>
 8008916:	4b97      	ldr	r3, [pc, #604]	; (8008b74 <_dtoa_r+0x2f4>)
 8008918:	e027      	b.n	800896a <_dtoa_r+0xea>
 800891a:	4b97      	ldr	r3, [pc, #604]	; (8008b78 <_dtoa_r+0x2f8>)
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	3308      	adds	r3, #8
 8008920:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	9800      	ldr	r0, [sp, #0]
 8008926:	b013      	add	sp, #76	; 0x4c
 8008928:	ecbd 8b04 	vpop	{d8-d9}
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	4b90      	ldr	r3, [pc, #576]	; (8008b74 <_dtoa_r+0x2f4>)
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	3303      	adds	r3, #3
 8008936:	e7f3      	b.n	8008920 <_dtoa_r+0xa0>
 8008938:	ed9d 7b02 	vldr	d7, [sp, #8]
 800893c:	2200      	movs	r2, #0
 800893e:	ec51 0b17 	vmov	r0, r1, d7
 8008942:	eeb0 8a47 	vmov.f32	s16, s14
 8008946:	eef0 8a67 	vmov.f32	s17, s15
 800894a:	2300      	movs	r3, #0
 800894c:	f7f8 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008950:	4681      	mov	r9, r0
 8008952:	b160      	cbz	r0, 800896e <_dtoa_r+0xee>
 8008954:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008956:	2301      	movs	r3, #1
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 8568 	beq.w	8009432 <_dtoa_r+0xbb2>
 8008962:	4b86      	ldr	r3, [pc, #536]	; (8008b7c <_dtoa_r+0x2fc>)
 8008964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	3b01      	subs	r3, #1
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	e7da      	b.n	8008924 <_dtoa_r+0xa4>
 800896e:	aa10      	add	r2, sp, #64	; 0x40
 8008970:	a911      	add	r1, sp, #68	; 0x44
 8008972:	4620      	mov	r0, r4
 8008974:	eeb0 0a48 	vmov.f32	s0, s16
 8008978:	eef0 0a68 	vmov.f32	s1, s17
 800897c:	f001 f8e0 	bl	8009b40 <__d2b>
 8008980:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008984:	4682      	mov	sl, r0
 8008986:	2d00      	cmp	r5, #0
 8008988:	d07f      	beq.n	8008a8a <_dtoa_r+0x20a>
 800898a:	ee18 3a90 	vmov	r3, s17
 800898e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008992:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008996:	ec51 0b18 	vmov	r0, r1, d8
 800899a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800899e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80089a6:	4619      	mov	r1, r3
 80089a8:	2200      	movs	r2, #0
 80089aa:	4b75      	ldr	r3, [pc, #468]	; (8008b80 <_dtoa_r+0x300>)
 80089ac:	f7f7 fc74 	bl	8000298 <__aeabi_dsub>
 80089b0:	a367      	add	r3, pc, #412	; (adr r3, 8008b50 <_dtoa_r+0x2d0>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f7f7 fe27 	bl	8000608 <__aeabi_dmul>
 80089ba:	a367      	add	r3, pc, #412	; (adr r3, 8008b58 <_dtoa_r+0x2d8>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fc6c 	bl	800029c <__adddf3>
 80089c4:	4606      	mov	r6, r0
 80089c6:	4628      	mov	r0, r5
 80089c8:	460f      	mov	r7, r1
 80089ca:	f7f7 fdb3 	bl	8000534 <__aeabi_i2d>
 80089ce:	a364      	add	r3, pc, #400	; (adr r3, 8008b60 <_dtoa_r+0x2e0>)
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	f7f7 fe18 	bl	8000608 <__aeabi_dmul>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4630      	mov	r0, r6
 80089de:	4639      	mov	r1, r7
 80089e0:	f7f7 fc5c 	bl	800029c <__adddf3>
 80089e4:	4606      	mov	r6, r0
 80089e6:	460f      	mov	r7, r1
 80089e8:	f7f8 f8be 	bl	8000b68 <__aeabi_d2iz>
 80089ec:	2200      	movs	r2, #0
 80089ee:	4683      	mov	fp, r0
 80089f0:	2300      	movs	r3, #0
 80089f2:	4630      	mov	r0, r6
 80089f4:	4639      	mov	r1, r7
 80089f6:	f7f8 f879 	bl	8000aec <__aeabi_dcmplt>
 80089fa:	b148      	cbz	r0, 8008a10 <_dtoa_r+0x190>
 80089fc:	4658      	mov	r0, fp
 80089fe:	f7f7 fd99 	bl	8000534 <__aeabi_i2d>
 8008a02:	4632      	mov	r2, r6
 8008a04:	463b      	mov	r3, r7
 8008a06:	f7f8 f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a0a:	b908      	cbnz	r0, 8008a10 <_dtoa_r+0x190>
 8008a0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a10:	f1bb 0f16 	cmp.w	fp, #22
 8008a14:	d857      	bhi.n	8008ac6 <_dtoa_r+0x246>
 8008a16:	4b5b      	ldr	r3, [pc, #364]	; (8008b84 <_dtoa_r+0x304>)
 8008a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	ec51 0b18 	vmov	r0, r1, d8
 8008a24:	f7f8 f862 	bl	8000aec <__aeabi_dcmplt>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d04e      	beq.n	8008aca <_dtoa_r+0x24a>
 8008a2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a30:	2300      	movs	r3, #0
 8008a32:	930c      	str	r3, [sp, #48]	; 0x30
 8008a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a36:	1b5b      	subs	r3, r3, r5
 8008a38:	1e5a      	subs	r2, r3, #1
 8008a3a:	bf45      	ittet	mi
 8008a3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a40:	9305      	strmi	r3, [sp, #20]
 8008a42:	2300      	movpl	r3, #0
 8008a44:	2300      	movmi	r3, #0
 8008a46:	9206      	str	r2, [sp, #24]
 8008a48:	bf54      	ite	pl
 8008a4a:	9305      	strpl	r3, [sp, #20]
 8008a4c:	9306      	strmi	r3, [sp, #24]
 8008a4e:	f1bb 0f00 	cmp.w	fp, #0
 8008a52:	db3c      	blt.n	8008ace <_dtoa_r+0x24e>
 8008a54:	9b06      	ldr	r3, [sp, #24]
 8008a56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008a5a:	445b      	add	r3, fp
 8008a5c:	9306      	str	r3, [sp, #24]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	9b07      	ldr	r3, [sp, #28]
 8008a64:	2b09      	cmp	r3, #9
 8008a66:	d868      	bhi.n	8008b3a <_dtoa_r+0x2ba>
 8008a68:	2b05      	cmp	r3, #5
 8008a6a:	bfc4      	itt	gt
 8008a6c:	3b04      	subgt	r3, #4
 8008a6e:	9307      	strgt	r3, [sp, #28]
 8008a70:	9b07      	ldr	r3, [sp, #28]
 8008a72:	f1a3 0302 	sub.w	r3, r3, #2
 8008a76:	bfcc      	ite	gt
 8008a78:	2500      	movgt	r5, #0
 8008a7a:	2501      	movle	r5, #1
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	f200 8085 	bhi.w	8008b8c <_dtoa_r+0x30c>
 8008a82:	e8df f003 	tbb	[pc, r3]
 8008a86:	3b2e      	.short	0x3b2e
 8008a88:	5839      	.short	0x5839
 8008a8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a8e:	441d      	add	r5, r3
 8008a90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	bfc1      	itttt	gt
 8008a98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008aa0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008aa4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008aa8:	bfd6      	itet	le
 8008aaa:	f1c3 0320 	rsble	r3, r3, #32
 8008aae:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ab2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ab6:	f7f7 fd2d 	bl	8000514 <__aeabi_ui2d>
 8008aba:	2201      	movs	r2, #1
 8008abc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ac0:	3d01      	subs	r5, #1
 8008ac2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ac4:	e76f      	b.n	80089a6 <_dtoa_r+0x126>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e7b3      	b.n	8008a32 <_dtoa_r+0x1b2>
 8008aca:	900c      	str	r0, [sp, #48]	; 0x30
 8008acc:	e7b2      	b.n	8008a34 <_dtoa_r+0x1b4>
 8008ace:	9b05      	ldr	r3, [sp, #20]
 8008ad0:	eba3 030b 	sub.w	r3, r3, fp
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	f1cb 0300 	rsb	r3, fp, #0
 8008ada:	9308      	str	r3, [sp, #32]
 8008adc:	2300      	movs	r3, #0
 8008ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ae0:	e7bf      	b.n	8008a62 <_dtoa_r+0x1e2>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc52      	bgt.n	8008b92 <_dtoa_r+0x312>
 8008aec:	2301      	movs	r3, #1
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	461a      	mov	r2, r3
 8008af4:	920a      	str	r2, [sp, #40]	; 0x28
 8008af6:	e00b      	b.n	8008b10 <_dtoa_r+0x290>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e7f3      	b.n	8008ae4 <_dtoa_r+0x264>
 8008afc:	2300      	movs	r3, #0
 8008afe:	9309      	str	r3, [sp, #36]	; 0x24
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	445b      	add	r3, fp
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	3301      	adds	r3, #1
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	bfb8      	it	lt
 8008b0e:	2301      	movlt	r3, #1
 8008b10:	69e0      	ldr	r0, [r4, #28]
 8008b12:	2100      	movs	r1, #0
 8008b14:	2204      	movs	r2, #4
 8008b16:	f102 0614 	add.w	r6, r2, #20
 8008b1a:	429e      	cmp	r6, r3
 8008b1c:	d93d      	bls.n	8008b9a <_dtoa_r+0x31a>
 8008b1e:	6041      	str	r1, [r0, #4]
 8008b20:	4620      	mov	r0, r4
 8008b22:	f000 fceb 	bl	80094fc <_Balloc>
 8008b26:	9000      	str	r0, [sp, #0]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d139      	bne.n	8008ba0 <_dtoa_r+0x320>
 8008b2c:	4b16      	ldr	r3, [pc, #88]	; (8008b88 <_dtoa_r+0x308>)
 8008b2e:	4602      	mov	r2, r0
 8008b30:	f240 11af 	movw	r1, #431	; 0x1af
 8008b34:	e6bd      	b.n	80088b2 <_dtoa_r+0x32>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e7e1      	b.n	8008afe <_dtoa_r+0x27e>
 8008b3a:	2501      	movs	r5, #1
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	9509      	str	r5, [sp, #36]	; 0x24
 8008b42:	f04f 33ff 	mov.w	r3, #4294967295
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2312      	movs	r3, #18
 8008b4e:	e7d1      	b.n	8008af4 <_dtoa_r+0x274>
 8008b50:	636f4361 	.word	0x636f4361
 8008b54:	3fd287a7 	.word	0x3fd287a7
 8008b58:	8b60c8b3 	.word	0x8b60c8b3
 8008b5c:	3fc68a28 	.word	0x3fc68a28
 8008b60:	509f79fb 	.word	0x509f79fb
 8008b64:	3fd34413 	.word	0x3fd34413
 8008b68:	0800b999 	.word	0x0800b999
 8008b6c:	0800b9b0 	.word	0x0800b9b0
 8008b70:	7ff00000 	.word	0x7ff00000
 8008b74:	0800b995 	.word	0x0800b995
 8008b78:	0800b98c 	.word	0x0800b98c
 8008b7c:	0800b969 	.word	0x0800b969
 8008b80:	3ff80000 	.word	0x3ff80000
 8008b84:	0800baa0 	.word	0x0800baa0
 8008b88:	0800ba08 	.word	0x0800ba08
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b90:	e7d7      	b.n	8008b42 <_dtoa_r+0x2c2>
 8008b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	9304      	str	r3, [sp, #16]
 8008b98:	e7ba      	b.n	8008b10 <_dtoa_r+0x290>
 8008b9a:	3101      	adds	r1, #1
 8008b9c:	0052      	lsls	r2, r2, #1
 8008b9e:	e7ba      	b.n	8008b16 <_dtoa_r+0x296>
 8008ba0:	69e3      	ldr	r3, [r4, #28]
 8008ba2:	9a00      	ldr	r2, [sp, #0]
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	2b0e      	cmp	r3, #14
 8008baa:	f200 80a8 	bhi.w	8008cfe <_dtoa_r+0x47e>
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	f000 80a5 	beq.w	8008cfe <_dtoa_r+0x47e>
 8008bb4:	f1bb 0f00 	cmp.w	fp, #0
 8008bb8:	dd38      	ble.n	8008c2c <_dtoa_r+0x3ac>
 8008bba:	4bc0      	ldr	r3, [pc, #768]	; (8008ebc <_dtoa_r+0x63c>)
 8008bbc:	f00b 020f 	and.w	r2, fp, #15
 8008bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008bc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008bcc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008bd0:	d019      	beq.n	8008c06 <_dtoa_r+0x386>
 8008bd2:	4bbb      	ldr	r3, [pc, #748]	; (8008ec0 <_dtoa_r+0x640>)
 8008bd4:	ec51 0b18 	vmov	r0, r1, d8
 8008bd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bdc:	f7f7 fe3e 	bl	800085c <__aeabi_ddiv>
 8008be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be4:	f008 080f 	and.w	r8, r8, #15
 8008be8:	2503      	movs	r5, #3
 8008bea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008ec0 <_dtoa_r+0x640>
 8008bee:	f1b8 0f00 	cmp.w	r8, #0
 8008bf2:	d10a      	bne.n	8008c0a <_dtoa_r+0x38a>
 8008bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf8:	4632      	mov	r2, r6
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	f7f7 fe2e 	bl	800085c <__aeabi_ddiv>
 8008c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c04:	e02b      	b.n	8008c5e <_dtoa_r+0x3de>
 8008c06:	2502      	movs	r5, #2
 8008c08:	e7ef      	b.n	8008bea <_dtoa_r+0x36a>
 8008c0a:	f018 0f01 	tst.w	r8, #1
 8008c0e:	d008      	beq.n	8008c22 <_dtoa_r+0x3a2>
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460f      	mov	r7, r1
 8008c22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c26:	f109 0908 	add.w	r9, r9, #8
 8008c2a:	e7e0      	b.n	8008bee <_dtoa_r+0x36e>
 8008c2c:	f000 809f 	beq.w	8008d6e <_dtoa_r+0x4ee>
 8008c30:	f1cb 0600 	rsb	r6, fp, #0
 8008c34:	4ba1      	ldr	r3, [pc, #644]	; (8008ebc <_dtoa_r+0x63c>)
 8008c36:	4fa2      	ldr	r7, [pc, #648]	; (8008ec0 <_dtoa_r+0x640>)
 8008c38:	f006 020f 	and.w	r2, r6, #15
 8008c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	ec51 0b18 	vmov	r0, r1, d8
 8008c48:	f7f7 fcde 	bl	8000608 <__aeabi_dmul>
 8008c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c50:	1136      	asrs	r6, r6, #4
 8008c52:	2300      	movs	r3, #0
 8008c54:	2502      	movs	r5, #2
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	d17e      	bne.n	8008d58 <_dtoa_r+0x4d8>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1d0      	bne.n	8008c00 <_dtoa_r+0x380>
 8008c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 8084 	beq.w	8008d72 <_dtoa_r+0x4f2>
 8008c6a:	4b96      	ldr	r3, [pc, #600]	; (8008ec4 <_dtoa_r+0x644>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 ff3b 	bl	8000aec <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d07b      	beq.n	8008d72 <_dtoa_r+0x4f2>
 8008c7a:	9b04      	ldr	r3, [sp, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d078      	beq.n	8008d72 <_dtoa_r+0x4f2>
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dd39      	ble.n	8008cfa <_dtoa_r+0x47a>
 8008c86:	4b90      	ldr	r3, [pc, #576]	; (8008ec8 <_dtoa_r+0x648>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	f7f7 fcbb 	bl	8000608 <__aeabi_dmul>
 8008c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c96:	9e01      	ldr	r6, [sp, #4]
 8008c98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f7f7 fc46 	bl	8000534 <__aeabi_i2d>
 8008ca8:	4642      	mov	r2, r8
 8008caa:	464b      	mov	r3, r9
 8008cac:	f7f7 fcac 	bl	8000608 <__aeabi_dmul>
 8008cb0:	4b86      	ldr	r3, [pc, #536]	; (8008ecc <_dtoa_r+0x64c>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f7f7 faf2 	bl	800029c <__adddf3>
 8008cb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc0:	9303      	str	r3, [sp, #12]
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	d158      	bne.n	8008d78 <_dtoa_r+0x4f8>
 8008cc6:	4b82      	ldr	r3, [pc, #520]	; (8008ed0 <_dtoa_r+0x650>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4640      	mov	r0, r8
 8008ccc:	4649      	mov	r1, r9
 8008cce:	f7f7 fae3 	bl	8000298 <__aeabi_dsub>
 8008cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	4689      	mov	r9, r1
 8008cda:	f7f7 ff25 	bl	8000b28 <__aeabi_dcmpgt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f040 8296 	bne.w	8009210 <_dtoa_r+0x990>
 8008ce4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ce8:	4640      	mov	r0, r8
 8008cea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 fefc 	bl	8000aec <__aeabi_dcmplt>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f040 8289 	bne.w	800920c <_dtoa_r+0x98c>
 8008cfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f2c0 814e 	blt.w	8008fa2 <_dtoa_r+0x722>
 8008d06:	f1bb 0f0e 	cmp.w	fp, #14
 8008d0a:	f300 814a 	bgt.w	8008fa2 <_dtoa_r+0x722>
 8008d0e:	4b6b      	ldr	r3, [pc, #428]	; (8008ebc <_dtoa_r+0x63c>)
 8008d10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f280 80dc 	bge.w	8008ed8 <_dtoa_r+0x658>
 8008d20:	9b04      	ldr	r3, [sp, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f300 80d8 	bgt.w	8008ed8 <_dtoa_r+0x658>
 8008d28:	f040 826f 	bne.w	800920a <_dtoa_r+0x98a>
 8008d2c:	4b68      	ldr	r3, [pc, #416]	; (8008ed0 <_dtoa_r+0x650>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4640      	mov	r0, r8
 8008d32:	4649      	mov	r1, r9
 8008d34:	f7f7 fc68 	bl	8000608 <__aeabi_dmul>
 8008d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d3c:	f7f7 feea 	bl	8000b14 <__aeabi_dcmpge>
 8008d40:	9e04      	ldr	r6, [sp, #16]
 8008d42:	4637      	mov	r7, r6
 8008d44:	2800      	cmp	r0, #0
 8008d46:	f040 8245 	bne.w	80091d4 <_dtoa_r+0x954>
 8008d4a:	9d00      	ldr	r5, [sp, #0]
 8008d4c:	2331      	movs	r3, #49	; 0x31
 8008d4e:	f805 3b01 	strb.w	r3, [r5], #1
 8008d52:	f10b 0b01 	add.w	fp, fp, #1
 8008d56:	e241      	b.n	80091dc <_dtoa_r+0x95c>
 8008d58:	07f2      	lsls	r2, r6, #31
 8008d5a:	d505      	bpl.n	8008d68 <_dtoa_r+0x4e8>
 8008d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d60:	f7f7 fc52 	bl	8000608 <__aeabi_dmul>
 8008d64:	3501      	adds	r5, #1
 8008d66:	2301      	movs	r3, #1
 8008d68:	1076      	asrs	r6, r6, #1
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	e773      	b.n	8008c56 <_dtoa_r+0x3d6>
 8008d6e:	2502      	movs	r5, #2
 8008d70:	e775      	b.n	8008c5e <_dtoa_r+0x3de>
 8008d72:	9e04      	ldr	r6, [sp, #16]
 8008d74:	465f      	mov	r7, fp
 8008d76:	e792      	b.n	8008c9e <_dtoa_r+0x41e>
 8008d78:	9900      	ldr	r1, [sp, #0]
 8008d7a:	4b50      	ldr	r3, [pc, #320]	; (8008ebc <_dtoa_r+0x63c>)
 8008d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d80:	4431      	add	r1, r6
 8008d82:	9102      	str	r1, [sp, #8]
 8008d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d86:	eeb0 9a47 	vmov.f32	s18, s14
 8008d8a:	eef0 9a67 	vmov.f32	s19, s15
 8008d8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d044      	beq.n	8008e24 <_dtoa_r+0x5a4>
 8008d9a:	494e      	ldr	r1, [pc, #312]	; (8008ed4 <_dtoa_r+0x654>)
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f7f7 fd5d 	bl	800085c <__aeabi_ddiv>
 8008da2:	ec53 2b19 	vmov	r2, r3, d9
 8008da6:	f7f7 fa77 	bl	8000298 <__aeabi_dsub>
 8008daa:	9d00      	ldr	r5, [sp, #0]
 8008dac:	ec41 0b19 	vmov	d9, r0, r1
 8008db0:	4649      	mov	r1, r9
 8008db2:	4640      	mov	r0, r8
 8008db4:	f7f7 fed8 	bl	8000b68 <__aeabi_d2iz>
 8008db8:	4606      	mov	r6, r0
 8008dba:	f7f7 fbbb 	bl	8000534 <__aeabi_i2d>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	f7f7 fa67 	bl	8000298 <__aeabi_dsub>
 8008dca:	3630      	adds	r6, #48	; 0x30
 8008dcc:	f805 6b01 	strb.w	r6, [r5], #1
 8008dd0:	ec53 2b19 	vmov	r2, r3, d9
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	4689      	mov	r9, r1
 8008dd8:	f7f7 fe88 	bl	8000aec <__aeabi_dcmplt>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d164      	bne.n	8008eaa <_dtoa_r+0x62a>
 8008de0:	4642      	mov	r2, r8
 8008de2:	464b      	mov	r3, r9
 8008de4:	4937      	ldr	r1, [pc, #220]	; (8008ec4 <_dtoa_r+0x644>)
 8008de6:	2000      	movs	r0, #0
 8008de8:	f7f7 fa56 	bl	8000298 <__aeabi_dsub>
 8008dec:	ec53 2b19 	vmov	r2, r3, d9
 8008df0:	f7f7 fe7c 	bl	8000aec <__aeabi_dcmplt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f040 80b6 	bne.w	8008f66 <_dtoa_r+0x6e6>
 8008dfa:	9b02      	ldr	r3, [sp, #8]
 8008dfc:	429d      	cmp	r5, r3
 8008dfe:	f43f af7c 	beq.w	8008cfa <_dtoa_r+0x47a>
 8008e02:	4b31      	ldr	r3, [pc, #196]	; (8008ec8 <_dtoa_r+0x648>)
 8008e04:	ec51 0b19 	vmov	r0, r1, d9
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f7f7 fbfd 	bl	8000608 <__aeabi_dmul>
 8008e0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <_dtoa_r+0x648>)
 8008e10:	ec41 0b19 	vmov	d9, r0, r1
 8008e14:	2200      	movs	r2, #0
 8008e16:	4640      	mov	r0, r8
 8008e18:	4649      	mov	r1, r9
 8008e1a:	f7f7 fbf5 	bl	8000608 <__aeabi_dmul>
 8008e1e:	4680      	mov	r8, r0
 8008e20:	4689      	mov	r9, r1
 8008e22:	e7c5      	b.n	8008db0 <_dtoa_r+0x530>
 8008e24:	ec51 0b17 	vmov	r0, r1, d7
 8008e28:	f7f7 fbee 	bl	8000608 <__aeabi_dmul>
 8008e2c:	9b02      	ldr	r3, [sp, #8]
 8008e2e:	9d00      	ldr	r5, [sp, #0]
 8008e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e32:	ec41 0b19 	vmov	d9, r0, r1
 8008e36:	4649      	mov	r1, r9
 8008e38:	4640      	mov	r0, r8
 8008e3a:	f7f7 fe95 	bl	8000b68 <__aeabi_d2iz>
 8008e3e:	4606      	mov	r6, r0
 8008e40:	f7f7 fb78 	bl	8000534 <__aeabi_i2d>
 8008e44:	3630      	adds	r6, #48	; 0x30
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	f7f7 fa23 	bl	8000298 <__aeabi_dsub>
 8008e52:	f805 6b01 	strb.w	r6, [r5], #1
 8008e56:	9b02      	ldr	r3, [sp, #8]
 8008e58:	429d      	cmp	r5, r3
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	4689      	mov	r9, r1
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	d124      	bne.n	8008eae <_dtoa_r+0x62e>
 8008e64:	4b1b      	ldr	r3, [pc, #108]	; (8008ed4 <_dtoa_r+0x654>)
 8008e66:	ec51 0b19 	vmov	r0, r1, d9
 8008e6a:	f7f7 fa17 	bl	800029c <__adddf3>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	f7f7 fe57 	bl	8000b28 <__aeabi_dcmpgt>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d173      	bne.n	8008f66 <_dtoa_r+0x6e6>
 8008e7e:	ec53 2b19 	vmov	r2, r3, d9
 8008e82:	4914      	ldr	r1, [pc, #80]	; (8008ed4 <_dtoa_r+0x654>)
 8008e84:	2000      	movs	r0, #0
 8008e86:	f7f7 fa07 	bl	8000298 <__aeabi_dsub>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4640      	mov	r0, r8
 8008e90:	4649      	mov	r1, r9
 8008e92:	f7f7 fe2b 	bl	8000aec <__aeabi_dcmplt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f43f af2f 	beq.w	8008cfa <_dtoa_r+0x47a>
 8008e9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e9e:	1e6b      	subs	r3, r5, #1
 8008ea0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ea2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ea6:	2b30      	cmp	r3, #48	; 0x30
 8008ea8:	d0f8      	beq.n	8008e9c <_dtoa_r+0x61c>
 8008eaa:	46bb      	mov	fp, r7
 8008eac:	e04a      	b.n	8008f44 <_dtoa_r+0x6c4>
 8008eae:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <_dtoa_r+0x648>)
 8008eb0:	f7f7 fbaa 	bl	8000608 <__aeabi_dmul>
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4689      	mov	r9, r1
 8008eb8:	e7bd      	b.n	8008e36 <_dtoa_r+0x5b6>
 8008eba:	bf00      	nop
 8008ebc:	0800baa0 	.word	0x0800baa0
 8008ec0:	0800ba78 	.word	0x0800ba78
 8008ec4:	3ff00000 	.word	0x3ff00000
 8008ec8:	40240000 	.word	0x40240000
 8008ecc:	401c0000 	.word	0x401c0000
 8008ed0:	40140000 	.word	0x40140000
 8008ed4:	3fe00000 	.word	0x3fe00000
 8008ed8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008edc:	9d00      	ldr	r5, [sp, #0]
 8008ede:	4642      	mov	r2, r8
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 fcb9 	bl	800085c <__aeabi_ddiv>
 8008eea:	f7f7 fe3d 	bl	8000b68 <__aeabi_d2iz>
 8008eee:	9001      	str	r0, [sp, #4]
 8008ef0:	f7f7 fb20 	bl	8000534 <__aeabi_i2d>
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	f7f7 fb86 	bl	8000608 <__aeabi_dmul>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4630      	mov	r0, r6
 8008f02:	4639      	mov	r1, r7
 8008f04:	f7f7 f9c8 	bl	8000298 <__aeabi_dsub>
 8008f08:	9e01      	ldr	r6, [sp, #4]
 8008f0a:	9f04      	ldr	r7, [sp, #16]
 8008f0c:	3630      	adds	r6, #48	; 0x30
 8008f0e:	f805 6b01 	strb.w	r6, [r5], #1
 8008f12:	9e00      	ldr	r6, [sp, #0]
 8008f14:	1bae      	subs	r6, r5, r6
 8008f16:	42b7      	cmp	r7, r6
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	d134      	bne.n	8008f88 <_dtoa_r+0x708>
 8008f1e:	f7f7 f9bd 	bl	800029c <__adddf3>
 8008f22:	4642      	mov	r2, r8
 8008f24:	464b      	mov	r3, r9
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	f7f7 fdfd 	bl	8000b28 <__aeabi_dcmpgt>
 8008f2e:	b9c8      	cbnz	r0, 8008f64 <_dtoa_r+0x6e4>
 8008f30:	4642      	mov	r2, r8
 8008f32:	464b      	mov	r3, r9
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f3c:	b110      	cbz	r0, 8008f44 <_dtoa_r+0x6c4>
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	07db      	lsls	r3, r3, #31
 8008f42:	d40f      	bmi.n	8008f64 <_dtoa_r+0x6e4>
 8008f44:	4651      	mov	r1, sl
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fb18 	bl	800957c <_Bfree>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f50:	702b      	strb	r3, [r5, #0]
 8008f52:	f10b 0301 	add.w	r3, fp, #1
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f43f ace2 	beq.w	8008924 <_dtoa_r+0xa4>
 8008f60:	601d      	str	r5, [r3, #0]
 8008f62:	e4df      	b.n	8008924 <_dtoa_r+0xa4>
 8008f64:	465f      	mov	r7, fp
 8008f66:	462b      	mov	r3, r5
 8008f68:	461d      	mov	r5, r3
 8008f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f6e:	2a39      	cmp	r2, #57	; 0x39
 8008f70:	d106      	bne.n	8008f80 <_dtoa_r+0x700>
 8008f72:	9a00      	ldr	r2, [sp, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d1f7      	bne.n	8008f68 <_dtoa_r+0x6e8>
 8008f78:	9900      	ldr	r1, [sp, #0]
 8008f7a:	2230      	movs	r2, #48	; 0x30
 8008f7c:	3701      	adds	r7, #1
 8008f7e:	700a      	strb	r2, [r1, #0]
 8008f80:	781a      	ldrb	r2, [r3, #0]
 8008f82:	3201      	adds	r2, #1
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	e790      	b.n	8008eaa <_dtoa_r+0x62a>
 8008f88:	4ba3      	ldr	r3, [pc, #652]	; (8009218 <_dtoa_r+0x998>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f7f7 fb3c 	bl	8000608 <__aeabi_dmul>
 8008f90:	2200      	movs	r2, #0
 8008f92:	2300      	movs	r3, #0
 8008f94:	4606      	mov	r6, r0
 8008f96:	460f      	mov	r7, r1
 8008f98:	f7f7 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d09e      	beq.n	8008ede <_dtoa_r+0x65e>
 8008fa0:	e7d0      	b.n	8008f44 <_dtoa_r+0x6c4>
 8008fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa4:	2a00      	cmp	r2, #0
 8008fa6:	f000 80ca 	beq.w	800913e <_dtoa_r+0x8be>
 8008faa:	9a07      	ldr	r2, [sp, #28]
 8008fac:	2a01      	cmp	r2, #1
 8008fae:	f300 80ad 	bgt.w	800910c <_dtoa_r+0x88c>
 8008fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	f000 80a5 	beq.w	8009104 <_dtoa_r+0x884>
 8008fba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fbe:	9e08      	ldr	r6, [sp, #32]
 8008fc0:	9d05      	ldr	r5, [sp, #20]
 8008fc2:	9a05      	ldr	r2, [sp, #20]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	9205      	str	r2, [sp, #20]
 8008fc8:	9a06      	ldr	r2, [sp, #24]
 8008fca:	2101      	movs	r1, #1
 8008fcc:	441a      	add	r2, r3
 8008fce:	4620      	mov	r0, r4
 8008fd0:	9206      	str	r2, [sp, #24]
 8008fd2:	f000 fb89 	bl	80096e8 <__i2b>
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	b165      	cbz	r5, 8008ff4 <_dtoa_r+0x774>
 8008fda:	9b06      	ldr	r3, [sp, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	dd09      	ble.n	8008ff4 <_dtoa_r+0x774>
 8008fe0:	42ab      	cmp	r3, r5
 8008fe2:	9a05      	ldr	r2, [sp, #20]
 8008fe4:	bfa8      	it	ge
 8008fe6:	462b      	movge	r3, r5
 8008fe8:	1ad2      	subs	r2, r2, r3
 8008fea:	9205      	str	r2, [sp, #20]
 8008fec:	9a06      	ldr	r2, [sp, #24]
 8008fee:	1aed      	subs	r5, r5, r3
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	9306      	str	r3, [sp, #24]
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	b1f3      	cbz	r3, 8009036 <_dtoa_r+0x7b6>
 8008ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 80a3 	beq.w	8009146 <_dtoa_r+0x8c6>
 8009000:	2e00      	cmp	r6, #0
 8009002:	dd10      	ble.n	8009026 <_dtoa_r+0x7a6>
 8009004:	4639      	mov	r1, r7
 8009006:	4632      	mov	r2, r6
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fc2d 	bl	8009868 <__pow5mult>
 800900e:	4652      	mov	r2, sl
 8009010:	4601      	mov	r1, r0
 8009012:	4607      	mov	r7, r0
 8009014:	4620      	mov	r0, r4
 8009016:	f000 fb7d 	bl	8009714 <__multiply>
 800901a:	4651      	mov	r1, sl
 800901c:	4680      	mov	r8, r0
 800901e:	4620      	mov	r0, r4
 8009020:	f000 faac 	bl	800957c <_Bfree>
 8009024:	46c2      	mov	sl, r8
 8009026:	9b08      	ldr	r3, [sp, #32]
 8009028:	1b9a      	subs	r2, r3, r6
 800902a:	d004      	beq.n	8009036 <_dtoa_r+0x7b6>
 800902c:	4651      	mov	r1, sl
 800902e:	4620      	mov	r0, r4
 8009030:	f000 fc1a 	bl	8009868 <__pow5mult>
 8009034:	4682      	mov	sl, r0
 8009036:	2101      	movs	r1, #1
 8009038:	4620      	mov	r0, r4
 800903a:	f000 fb55 	bl	80096e8 <__i2b>
 800903e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009040:	2b00      	cmp	r3, #0
 8009042:	4606      	mov	r6, r0
 8009044:	f340 8081 	ble.w	800914a <_dtoa_r+0x8ca>
 8009048:	461a      	mov	r2, r3
 800904a:	4601      	mov	r1, r0
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fc0b 	bl	8009868 <__pow5mult>
 8009052:	9b07      	ldr	r3, [sp, #28]
 8009054:	2b01      	cmp	r3, #1
 8009056:	4606      	mov	r6, r0
 8009058:	dd7a      	ble.n	8009150 <_dtoa_r+0x8d0>
 800905a:	f04f 0800 	mov.w	r8, #0
 800905e:	6933      	ldr	r3, [r6, #16]
 8009060:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009064:	6918      	ldr	r0, [r3, #16]
 8009066:	f000 faf1 	bl	800964c <__hi0bits>
 800906a:	f1c0 0020 	rsb	r0, r0, #32
 800906e:	9b06      	ldr	r3, [sp, #24]
 8009070:	4418      	add	r0, r3
 8009072:	f010 001f 	ands.w	r0, r0, #31
 8009076:	f000 8094 	beq.w	80091a2 <_dtoa_r+0x922>
 800907a:	f1c0 0320 	rsb	r3, r0, #32
 800907e:	2b04      	cmp	r3, #4
 8009080:	f340 8085 	ble.w	800918e <_dtoa_r+0x90e>
 8009084:	9b05      	ldr	r3, [sp, #20]
 8009086:	f1c0 001c 	rsb	r0, r0, #28
 800908a:	4403      	add	r3, r0
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	9b06      	ldr	r3, [sp, #24]
 8009090:	4403      	add	r3, r0
 8009092:	4405      	add	r5, r0
 8009094:	9306      	str	r3, [sp, #24]
 8009096:	9b05      	ldr	r3, [sp, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	dd05      	ble.n	80090a8 <_dtoa_r+0x828>
 800909c:	4651      	mov	r1, sl
 800909e:	461a      	mov	r2, r3
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fc3b 	bl	800991c <__lshift>
 80090a6:	4682      	mov	sl, r0
 80090a8:	9b06      	ldr	r3, [sp, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	dd05      	ble.n	80090ba <_dtoa_r+0x83a>
 80090ae:	4631      	mov	r1, r6
 80090b0:	461a      	mov	r2, r3
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 fc32 	bl	800991c <__lshift>
 80090b8:	4606      	mov	r6, r0
 80090ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d072      	beq.n	80091a6 <_dtoa_r+0x926>
 80090c0:	4631      	mov	r1, r6
 80090c2:	4650      	mov	r0, sl
 80090c4:	f000 fc96 	bl	80099f4 <__mcmp>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	da6c      	bge.n	80091a6 <_dtoa_r+0x926>
 80090cc:	2300      	movs	r3, #0
 80090ce:	4651      	mov	r1, sl
 80090d0:	220a      	movs	r2, #10
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fa74 	bl	80095c0 <__multadd>
 80090d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090de:	4682      	mov	sl, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 81b0 	beq.w	8009446 <_dtoa_r+0xbc6>
 80090e6:	2300      	movs	r3, #0
 80090e8:	4639      	mov	r1, r7
 80090ea:	220a      	movs	r2, #10
 80090ec:	4620      	mov	r0, r4
 80090ee:	f000 fa67 	bl	80095c0 <__multadd>
 80090f2:	9b01      	ldr	r3, [sp, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	4607      	mov	r7, r0
 80090f8:	f300 8096 	bgt.w	8009228 <_dtoa_r+0x9a8>
 80090fc:	9b07      	ldr	r3, [sp, #28]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	dc59      	bgt.n	80091b6 <_dtoa_r+0x936>
 8009102:	e091      	b.n	8009228 <_dtoa_r+0x9a8>
 8009104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800910a:	e758      	b.n	8008fbe <_dtoa_r+0x73e>
 800910c:	9b04      	ldr	r3, [sp, #16]
 800910e:	1e5e      	subs	r6, r3, #1
 8009110:	9b08      	ldr	r3, [sp, #32]
 8009112:	42b3      	cmp	r3, r6
 8009114:	bfbf      	itttt	lt
 8009116:	9b08      	ldrlt	r3, [sp, #32]
 8009118:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800911a:	9608      	strlt	r6, [sp, #32]
 800911c:	1af3      	sublt	r3, r6, r3
 800911e:	bfb4      	ite	lt
 8009120:	18d2      	addlt	r2, r2, r3
 8009122:	1b9e      	subge	r6, r3, r6
 8009124:	9b04      	ldr	r3, [sp, #16]
 8009126:	bfbc      	itt	lt
 8009128:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800912a:	2600      	movlt	r6, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	bfb7      	itett	lt
 8009130:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009134:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009138:	1a9d      	sublt	r5, r3, r2
 800913a:	2300      	movlt	r3, #0
 800913c:	e741      	b.n	8008fc2 <_dtoa_r+0x742>
 800913e:	9e08      	ldr	r6, [sp, #32]
 8009140:	9d05      	ldr	r5, [sp, #20]
 8009142:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009144:	e748      	b.n	8008fd8 <_dtoa_r+0x758>
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	e770      	b.n	800902c <_dtoa_r+0x7ac>
 800914a:	9b07      	ldr	r3, [sp, #28]
 800914c:	2b01      	cmp	r3, #1
 800914e:	dc19      	bgt.n	8009184 <_dtoa_r+0x904>
 8009150:	9b02      	ldr	r3, [sp, #8]
 8009152:	b9bb      	cbnz	r3, 8009184 <_dtoa_r+0x904>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800915a:	b99b      	cbnz	r3, 8009184 <_dtoa_r+0x904>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009162:	0d1b      	lsrs	r3, r3, #20
 8009164:	051b      	lsls	r3, r3, #20
 8009166:	b183      	cbz	r3, 800918a <_dtoa_r+0x90a>
 8009168:	9b05      	ldr	r3, [sp, #20]
 800916a:	3301      	adds	r3, #1
 800916c:	9305      	str	r3, [sp, #20]
 800916e:	9b06      	ldr	r3, [sp, #24]
 8009170:	3301      	adds	r3, #1
 8009172:	9306      	str	r3, [sp, #24]
 8009174:	f04f 0801 	mov.w	r8, #1
 8009178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800917a:	2b00      	cmp	r3, #0
 800917c:	f47f af6f 	bne.w	800905e <_dtoa_r+0x7de>
 8009180:	2001      	movs	r0, #1
 8009182:	e774      	b.n	800906e <_dtoa_r+0x7ee>
 8009184:	f04f 0800 	mov.w	r8, #0
 8009188:	e7f6      	b.n	8009178 <_dtoa_r+0x8f8>
 800918a:	4698      	mov	r8, r3
 800918c:	e7f4      	b.n	8009178 <_dtoa_r+0x8f8>
 800918e:	d082      	beq.n	8009096 <_dtoa_r+0x816>
 8009190:	9a05      	ldr	r2, [sp, #20]
 8009192:	331c      	adds	r3, #28
 8009194:	441a      	add	r2, r3
 8009196:	9205      	str	r2, [sp, #20]
 8009198:	9a06      	ldr	r2, [sp, #24]
 800919a:	441a      	add	r2, r3
 800919c:	441d      	add	r5, r3
 800919e:	9206      	str	r2, [sp, #24]
 80091a0:	e779      	b.n	8009096 <_dtoa_r+0x816>
 80091a2:	4603      	mov	r3, r0
 80091a4:	e7f4      	b.n	8009190 <_dtoa_r+0x910>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dc37      	bgt.n	800921c <_dtoa_r+0x99c>
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	dd34      	ble.n	800921c <_dtoa_r+0x99c>
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	b963      	cbnz	r3, 80091d4 <_dtoa_r+0x954>
 80091ba:	4631      	mov	r1, r6
 80091bc:	2205      	movs	r2, #5
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 f9fe 	bl	80095c0 <__multadd>
 80091c4:	4601      	mov	r1, r0
 80091c6:	4606      	mov	r6, r0
 80091c8:	4650      	mov	r0, sl
 80091ca:	f000 fc13 	bl	80099f4 <__mcmp>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	f73f adbb 	bgt.w	8008d4a <_dtoa_r+0x4ca>
 80091d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d6:	9d00      	ldr	r5, [sp, #0]
 80091d8:	ea6f 0b03 	mvn.w	fp, r3
 80091dc:	f04f 0800 	mov.w	r8, #0
 80091e0:	4631      	mov	r1, r6
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 f9ca 	bl	800957c <_Bfree>
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	f43f aeab 	beq.w	8008f44 <_dtoa_r+0x6c4>
 80091ee:	f1b8 0f00 	cmp.w	r8, #0
 80091f2:	d005      	beq.n	8009200 <_dtoa_r+0x980>
 80091f4:	45b8      	cmp	r8, r7
 80091f6:	d003      	beq.n	8009200 <_dtoa_r+0x980>
 80091f8:	4641      	mov	r1, r8
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 f9be 	bl	800957c <_Bfree>
 8009200:	4639      	mov	r1, r7
 8009202:	4620      	mov	r0, r4
 8009204:	f000 f9ba 	bl	800957c <_Bfree>
 8009208:	e69c      	b.n	8008f44 <_dtoa_r+0x6c4>
 800920a:	2600      	movs	r6, #0
 800920c:	4637      	mov	r7, r6
 800920e:	e7e1      	b.n	80091d4 <_dtoa_r+0x954>
 8009210:	46bb      	mov	fp, r7
 8009212:	4637      	mov	r7, r6
 8009214:	e599      	b.n	8008d4a <_dtoa_r+0x4ca>
 8009216:	bf00      	nop
 8009218:	40240000 	.word	0x40240000
 800921c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 80c8 	beq.w	80093b4 <_dtoa_r+0xb34>
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	2d00      	cmp	r5, #0
 800922a:	dd05      	ble.n	8009238 <_dtoa_r+0x9b8>
 800922c:	4639      	mov	r1, r7
 800922e:	462a      	mov	r2, r5
 8009230:	4620      	mov	r0, r4
 8009232:	f000 fb73 	bl	800991c <__lshift>
 8009236:	4607      	mov	r7, r0
 8009238:	f1b8 0f00 	cmp.w	r8, #0
 800923c:	d05b      	beq.n	80092f6 <_dtoa_r+0xa76>
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	4620      	mov	r0, r4
 8009242:	f000 f95b 	bl	80094fc <_Balloc>
 8009246:	4605      	mov	r5, r0
 8009248:	b928      	cbnz	r0, 8009256 <_dtoa_r+0x9d6>
 800924a:	4b83      	ldr	r3, [pc, #524]	; (8009458 <_dtoa_r+0xbd8>)
 800924c:	4602      	mov	r2, r0
 800924e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009252:	f7ff bb2e 	b.w	80088b2 <_dtoa_r+0x32>
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	3202      	adds	r2, #2
 800925a:	0092      	lsls	r2, r2, #2
 800925c:	f107 010c 	add.w	r1, r7, #12
 8009260:	300c      	adds	r0, #12
 8009262:	f7ff fa76 	bl	8008752 <memcpy>
 8009266:	2201      	movs	r2, #1
 8009268:	4629      	mov	r1, r5
 800926a:	4620      	mov	r0, r4
 800926c:	f000 fb56 	bl	800991c <__lshift>
 8009270:	9b00      	ldr	r3, [sp, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	e9dd 2300 	ldrd	r2, r3, [sp]
 800927a:	4413      	add	r3, r2
 800927c:	9308      	str	r3, [sp, #32]
 800927e:	9b02      	ldr	r3, [sp, #8]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	46b8      	mov	r8, r7
 8009286:	9306      	str	r3, [sp, #24]
 8009288:	4607      	mov	r7, r0
 800928a:	9b04      	ldr	r3, [sp, #16]
 800928c:	4631      	mov	r1, r6
 800928e:	3b01      	subs	r3, #1
 8009290:	4650      	mov	r0, sl
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	f7ff fa6b 	bl	800876e <quorem>
 8009298:	4641      	mov	r1, r8
 800929a:	9002      	str	r0, [sp, #8]
 800929c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092a0:	4650      	mov	r0, sl
 80092a2:	f000 fba7 	bl	80099f4 <__mcmp>
 80092a6:	463a      	mov	r2, r7
 80092a8:	9005      	str	r0, [sp, #20]
 80092aa:	4631      	mov	r1, r6
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fbbd 	bl	8009a2c <__mdiff>
 80092b2:	68c2      	ldr	r2, [r0, #12]
 80092b4:	4605      	mov	r5, r0
 80092b6:	bb02      	cbnz	r2, 80092fa <_dtoa_r+0xa7a>
 80092b8:	4601      	mov	r1, r0
 80092ba:	4650      	mov	r0, sl
 80092bc:	f000 fb9a 	bl	80099f4 <__mcmp>
 80092c0:	4602      	mov	r2, r0
 80092c2:	4629      	mov	r1, r5
 80092c4:	4620      	mov	r0, r4
 80092c6:	9209      	str	r2, [sp, #36]	; 0x24
 80092c8:	f000 f958 	bl	800957c <_Bfree>
 80092cc:	9b07      	ldr	r3, [sp, #28]
 80092ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d0:	9d04      	ldr	r5, [sp, #16]
 80092d2:	ea43 0102 	orr.w	r1, r3, r2
 80092d6:	9b06      	ldr	r3, [sp, #24]
 80092d8:	4319      	orrs	r1, r3
 80092da:	d110      	bne.n	80092fe <_dtoa_r+0xa7e>
 80092dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092e0:	d029      	beq.n	8009336 <_dtoa_r+0xab6>
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dd02      	ble.n	80092ee <_dtoa_r+0xa6e>
 80092e8:	9b02      	ldr	r3, [sp, #8]
 80092ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	f883 9000 	strb.w	r9, [r3]
 80092f4:	e774      	b.n	80091e0 <_dtoa_r+0x960>
 80092f6:	4638      	mov	r0, r7
 80092f8:	e7ba      	b.n	8009270 <_dtoa_r+0x9f0>
 80092fa:	2201      	movs	r2, #1
 80092fc:	e7e1      	b.n	80092c2 <_dtoa_r+0xa42>
 80092fe:	9b05      	ldr	r3, [sp, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	db04      	blt.n	800930e <_dtoa_r+0xa8e>
 8009304:	9907      	ldr	r1, [sp, #28]
 8009306:	430b      	orrs	r3, r1
 8009308:	9906      	ldr	r1, [sp, #24]
 800930a:	430b      	orrs	r3, r1
 800930c:	d120      	bne.n	8009350 <_dtoa_r+0xad0>
 800930e:	2a00      	cmp	r2, #0
 8009310:	dded      	ble.n	80092ee <_dtoa_r+0xa6e>
 8009312:	4651      	mov	r1, sl
 8009314:	2201      	movs	r2, #1
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fb00 	bl	800991c <__lshift>
 800931c:	4631      	mov	r1, r6
 800931e:	4682      	mov	sl, r0
 8009320:	f000 fb68 	bl	80099f4 <__mcmp>
 8009324:	2800      	cmp	r0, #0
 8009326:	dc03      	bgt.n	8009330 <_dtoa_r+0xab0>
 8009328:	d1e1      	bne.n	80092ee <_dtoa_r+0xa6e>
 800932a:	f019 0f01 	tst.w	r9, #1
 800932e:	d0de      	beq.n	80092ee <_dtoa_r+0xa6e>
 8009330:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009334:	d1d8      	bne.n	80092e8 <_dtoa_r+0xa68>
 8009336:	9a01      	ldr	r2, [sp, #4]
 8009338:	2339      	movs	r3, #57	; 0x39
 800933a:	7013      	strb	r3, [r2, #0]
 800933c:	462b      	mov	r3, r5
 800933e:	461d      	mov	r5, r3
 8009340:	3b01      	subs	r3, #1
 8009342:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009346:	2a39      	cmp	r2, #57	; 0x39
 8009348:	d06c      	beq.n	8009424 <_dtoa_r+0xba4>
 800934a:	3201      	adds	r2, #1
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	e747      	b.n	80091e0 <_dtoa_r+0x960>
 8009350:	2a00      	cmp	r2, #0
 8009352:	dd07      	ble.n	8009364 <_dtoa_r+0xae4>
 8009354:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009358:	d0ed      	beq.n	8009336 <_dtoa_r+0xab6>
 800935a:	9a01      	ldr	r2, [sp, #4]
 800935c:	f109 0301 	add.w	r3, r9, #1
 8009360:	7013      	strb	r3, [r2, #0]
 8009362:	e73d      	b.n	80091e0 <_dtoa_r+0x960>
 8009364:	9b04      	ldr	r3, [sp, #16]
 8009366:	9a08      	ldr	r2, [sp, #32]
 8009368:	f803 9c01 	strb.w	r9, [r3, #-1]
 800936c:	4293      	cmp	r3, r2
 800936e:	d043      	beq.n	80093f8 <_dtoa_r+0xb78>
 8009370:	4651      	mov	r1, sl
 8009372:	2300      	movs	r3, #0
 8009374:	220a      	movs	r2, #10
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f922 	bl	80095c0 <__multadd>
 800937c:	45b8      	cmp	r8, r7
 800937e:	4682      	mov	sl, r0
 8009380:	f04f 0300 	mov.w	r3, #0
 8009384:	f04f 020a 	mov.w	r2, #10
 8009388:	4641      	mov	r1, r8
 800938a:	4620      	mov	r0, r4
 800938c:	d107      	bne.n	800939e <_dtoa_r+0xb1e>
 800938e:	f000 f917 	bl	80095c0 <__multadd>
 8009392:	4680      	mov	r8, r0
 8009394:	4607      	mov	r7, r0
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	3301      	adds	r3, #1
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	e775      	b.n	800928a <_dtoa_r+0xa0a>
 800939e:	f000 f90f 	bl	80095c0 <__multadd>
 80093a2:	4639      	mov	r1, r7
 80093a4:	4680      	mov	r8, r0
 80093a6:	2300      	movs	r3, #0
 80093a8:	220a      	movs	r2, #10
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f908 	bl	80095c0 <__multadd>
 80093b0:	4607      	mov	r7, r0
 80093b2:	e7f0      	b.n	8009396 <_dtoa_r+0xb16>
 80093b4:	9b04      	ldr	r3, [sp, #16]
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	9d00      	ldr	r5, [sp, #0]
 80093ba:	4631      	mov	r1, r6
 80093bc:	4650      	mov	r0, sl
 80093be:	f7ff f9d6 	bl	800876e <quorem>
 80093c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093c6:	9b00      	ldr	r3, [sp, #0]
 80093c8:	f805 9b01 	strb.w	r9, [r5], #1
 80093cc:	1aea      	subs	r2, r5, r3
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	4293      	cmp	r3, r2
 80093d2:	dd07      	ble.n	80093e4 <_dtoa_r+0xb64>
 80093d4:	4651      	mov	r1, sl
 80093d6:	2300      	movs	r3, #0
 80093d8:	220a      	movs	r2, #10
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 f8f0 	bl	80095c0 <__multadd>
 80093e0:	4682      	mov	sl, r0
 80093e2:	e7ea      	b.n	80093ba <_dtoa_r+0xb3a>
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfc8      	it	gt
 80093ea:	461d      	movgt	r5, r3
 80093ec:	9b00      	ldr	r3, [sp, #0]
 80093ee:	bfd8      	it	le
 80093f0:	2501      	movle	r5, #1
 80093f2:	441d      	add	r5, r3
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	4651      	mov	r1, sl
 80093fa:	2201      	movs	r2, #1
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fa8d 	bl	800991c <__lshift>
 8009402:	4631      	mov	r1, r6
 8009404:	4682      	mov	sl, r0
 8009406:	f000 faf5 	bl	80099f4 <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	dc96      	bgt.n	800933c <_dtoa_r+0xabc>
 800940e:	d102      	bne.n	8009416 <_dtoa_r+0xb96>
 8009410:	f019 0f01 	tst.w	r9, #1
 8009414:	d192      	bne.n	800933c <_dtoa_r+0xabc>
 8009416:	462b      	mov	r3, r5
 8009418:	461d      	mov	r5, r3
 800941a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800941e:	2a30      	cmp	r2, #48	; 0x30
 8009420:	d0fa      	beq.n	8009418 <_dtoa_r+0xb98>
 8009422:	e6dd      	b.n	80091e0 <_dtoa_r+0x960>
 8009424:	9a00      	ldr	r2, [sp, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d189      	bne.n	800933e <_dtoa_r+0xabe>
 800942a:	f10b 0b01 	add.w	fp, fp, #1
 800942e:	2331      	movs	r3, #49	; 0x31
 8009430:	e796      	b.n	8009360 <_dtoa_r+0xae0>
 8009432:	4b0a      	ldr	r3, [pc, #40]	; (800945c <_dtoa_r+0xbdc>)
 8009434:	f7ff ba99 	b.w	800896a <_dtoa_r+0xea>
 8009438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800943a:	2b00      	cmp	r3, #0
 800943c:	f47f aa6d 	bne.w	800891a <_dtoa_r+0x9a>
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <_dtoa_r+0xbe0>)
 8009442:	f7ff ba92 	b.w	800896a <_dtoa_r+0xea>
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	dcb5      	bgt.n	80093b8 <_dtoa_r+0xb38>
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	2b02      	cmp	r3, #2
 8009450:	f73f aeb1 	bgt.w	80091b6 <_dtoa_r+0x936>
 8009454:	e7b0      	b.n	80093b8 <_dtoa_r+0xb38>
 8009456:	bf00      	nop
 8009458:	0800ba08 	.word	0x0800ba08
 800945c:	0800b968 	.word	0x0800b968
 8009460:	0800b98c 	.word	0x0800b98c

08009464 <_free_r>:
 8009464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009466:	2900      	cmp	r1, #0
 8009468:	d044      	beq.n	80094f4 <_free_r+0x90>
 800946a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946e:	9001      	str	r0, [sp, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f1a1 0404 	sub.w	r4, r1, #4
 8009476:	bfb8      	it	lt
 8009478:	18e4      	addlt	r4, r4, r3
 800947a:	f7fe fb43 	bl	8007b04 <__malloc_lock>
 800947e:	4a1e      	ldr	r2, [pc, #120]	; (80094f8 <_free_r+0x94>)
 8009480:	9801      	ldr	r0, [sp, #4]
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	b933      	cbnz	r3, 8009494 <_free_r+0x30>
 8009486:	6063      	str	r3, [r4, #4]
 8009488:	6014      	str	r4, [r2, #0]
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009490:	f7fe bb3e 	b.w	8007b10 <__malloc_unlock>
 8009494:	42a3      	cmp	r3, r4
 8009496:	d908      	bls.n	80094aa <_free_r+0x46>
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1961      	adds	r1, r4, r5
 800949c:	428b      	cmp	r3, r1
 800949e:	bf01      	itttt	eq
 80094a0:	6819      	ldreq	r1, [r3, #0]
 80094a2:	685b      	ldreq	r3, [r3, #4]
 80094a4:	1949      	addeq	r1, r1, r5
 80094a6:	6021      	streq	r1, [r4, #0]
 80094a8:	e7ed      	b.n	8009486 <_free_r+0x22>
 80094aa:	461a      	mov	r2, r3
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	b10b      	cbz	r3, 80094b4 <_free_r+0x50>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d9fa      	bls.n	80094aa <_free_r+0x46>
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	1855      	adds	r5, r2, r1
 80094b8:	42a5      	cmp	r5, r4
 80094ba:	d10b      	bne.n	80094d4 <_free_r+0x70>
 80094bc:	6824      	ldr	r4, [r4, #0]
 80094be:	4421      	add	r1, r4
 80094c0:	1854      	adds	r4, r2, r1
 80094c2:	42a3      	cmp	r3, r4
 80094c4:	6011      	str	r1, [r2, #0]
 80094c6:	d1e0      	bne.n	800948a <_free_r+0x26>
 80094c8:	681c      	ldr	r4, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	6053      	str	r3, [r2, #4]
 80094ce:	440c      	add	r4, r1
 80094d0:	6014      	str	r4, [r2, #0]
 80094d2:	e7da      	b.n	800948a <_free_r+0x26>
 80094d4:	d902      	bls.n	80094dc <_free_r+0x78>
 80094d6:	230c      	movs	r3, #12
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	e7d6      	b.n	800948a <_free_r+0x26>
 80094dc:	6825      	ldr	r5, [r4, #0]
 80094de:	1961      	adds	r1, r4, r5
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf04      	itt	eq
 80094e4:	6819      	ldreq	r1, [r3, #0]
 80094e6:	685b      	ldreq	r3, [r3, #4]
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	bf04      	itt	eq
 80094ec:	1949      	addeq	r1, r1, r5
 80094ee:	6021      	streq	r1, [r4, #0]
 80094f0:	6054      	str	r4, [r2, #4]
 80094f2:	e7ca      	b.n	800948a <_free_r+0x26>
 80094f4:	b003      	add	sp, #12
 80094f6:	bd30      	pop	{r4, r5, pc}
 80094f8:	200007bc 	.word	0x200007bc

080094fc <_Balloc>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	69c6      	ldr	r6, [r0, #28]
 8009500:	4604      	mov	r4, r0
 8009502:	460d      	mov	r5, r1
 8009504:	b976      	cbnz	r6, 8009524 <_Balloc+0x28>
 8009506:	2010      	movs	r0, #16
 8009508:	f7fe fa54 	bl	80079b4 <malloc>
 800950c:	4602      	mov	r2, r0
 800950e:	61e0      	str	r0, [r4, #28]
 8009510:	b920      	cbnz	r0, 800951c <_Balloc+0x20>
 8009512:	4b18      	ldr	r3, [pc, #96]	; (8009574 <_Balloc+0x78>)
 8009514:	4818      	ldr	r0, [pc, #96]	; (8009578 <_Balloc+0x7c>)
 8009516:	216b      	movs	r1, #107	; 0x6b
 8009518:	f000 fd8c 	bl	800a034 <__assert_func>
 800951c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009520:	6006      	str	r6, [r0, #0]
 8009522:	60c6      	str	r6, [r0, #12]
 8009524:	69e6      	ldr	r6, [r4, #28]
 8009526:	68f3      	ldr	r3, [r6, #12]
 8009528:	b183      	cbz	r3, 800954c <_Balloc+0x50>
 800952a:	69e3      	ldr	r3, [r4, #28]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009532:	b9b8      	cbnz	r0, 8009564 <_Balloc+0x68>
 8009534:	2101      	movs	r1, #1
 8009536:	fa01 f605 	lsl.w	r6, r1, r5
 800953a:	1d72      	adds	r2, r6, #5
 800953c:	0092      	lsls	r2, r2, #2
 800953e:	4620      	mov	r0, r4
 8009540:	f000 fd96 	bl	800a070 <_calloc_r>
 8009544:	b160      	cbz	r0, 8009560 <_Balloc+0x64>
 8009546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800954a:	e00e      	b.n	800956a <_Balloc+0x6e>
 800954c:	2221      	movs	r2, #33	; 0x21
 800954e:	2104      	movs	r1, #4
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fd8d 	bl	800a070 <_calloc_r>
 8009556:	69e3      	ldr	r3, [r4, #28]
 8009558:	60f0      	str	r0, [r6, #12]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e4      	bne.n	800952a <_Balloc+0x2e>
 8009560:	2000      	movs	r0, #0
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	6802      	ldr	r2, [r0, #0]
 8009566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800956a:	2300      	movs	r3, #0
 800956c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009570:	e7f7      	b.n	8009562 <_Balloc+0x66>
 8009572:	bf00      	nop
 8009574:	0800b999 	.word	0x0800b999
 8009578:	0800ba19 	.word	0x0800ba19

0800957c <_Bfree>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	69c6      	ldr	r6, [r0, #28]
 8009580:	4605      	mov	r5, r0
 8009582:	460c      	mov	r4, r1
 8009584:	b976      	cbnz	r6, 80095a4 <_Bfree+0x28>
 8009586:	2010      	movs	r0, #16
 8009588:	f7fe fa14 	bl	80079b4 <malloc>
 800958c:	4602      	mov	r2, r0
 800958e:	61e8      	str	r0, [r5, #28]
 8009590:	b920      	cbnz	r0, 800959c <_Bfree+0x20>
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <_Bfree+0x3c>)
 8009594:	4809      	ldr	r0, [pc, #36]	; (80095bc <_Bfree+0x40>)
 8009596:	218f      	movs	r1, #143	; 0x8f
 8009598:	f000 fd4c 	bl	800a034 <__assert_func>
 800959c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095a0:	6006      	str	r6, [r0, #0]
 80095a2:	60c6      	str	r6, [r0, #12]
 80095a4:	b13c      	cbz	r4, 80095b6 <_Bfree+0x3a>
 80095a6:	69eb      	ldr	r3, [r5, #28]
 80095a8:	6862      	ldr	r2, [r4, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095b0:	6021      	str	r1, [r4, #0]
 80095b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	0800b999 	.word	0x0800b999
 80095bc:	0800ba19 	.word	0x0800ba19

080095c0 <__multadd>:
 80095c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c4:	690d      	ldr	r5, [r1, #16]
 80095c6:	4607      	mov	r7, r0
 80095c8:	460c      	mov	r4, r1
 80095ca:	461e      	mov	r6, r3
 80095cc:	f101 0c14 	add.w	ip, r1, #20
 80095d0:	2000      	movs	r0, #0
 80095d2:	f8dc 3000 	ldr.w	r3, [ip]
 80095d6:	b299      	uxth	r1, r3
 80095d8:	fb02 6101 	mla	r1, r2, r1, r6
 80095dc:	0c1e      	lsrs	r6, r3, #16
 80095de:	0c0b      	lsrs	r3, r1, #16
 80095e0:	fb02 3306 	mla	r3, r2, r6, r3
 80095e4:	b289      	uxth	r1, r1
 80095e6:	3001      	adds	r0, #1
 80095e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095ec:	4285      	cmp	r5, r0
 80095ee:	f84c 1b04 	str.w	r1, [ip], #4
 80095f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095f6:	dcec      	bgt.n	80095d2 <__multadd+0x12>
 80095f8:	b30e      	cbz	r6, 800963e <__multadd+0x7e>
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	42ab      	cmp	r3, r5
 80095fe:	dc19      	bgt.n	8009634 <__multadd+0x74>
 8009600:	6861      	ldr	r1, [r4, #4]
 8009602:	4638      	mov	r0, r7
 8009604:	3101      	adds	r1, #1
 8009606:	f7ff ff79 	bl	80094fc <_Balloc>
 800960a:	4680      	mov	r8, r0
 800960c:	b928      	cbnz	r0, 800961a <__multadd+0x5a>
 800960e:	4602      	mov	r2, r0
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <__multadd+0x84>)
 8009612:	480d      	ldr	r0, [pc, #52]	; (8009648 <__multadd+0x88>)
 8009614:	21ba      	movs	r1, #186	; 0xba
 8009616:	f000 fd0d 	bl	800a034 <__assert_func>
 800961a:	6922      	ldr	r2, [r4, #16]
 800961c:	3202      	adds	r2, #2
 800961e:	f104 010c 	add.w	r1, r4, #12
 8009622:	0092      	lsls	r2, r2, #2
 8009624:	300c      	adds	r0, #12
 8009626:	f7ff f894 	bl	8008752 <memcpy>
 800962a:	4621      	mov	r1, r4
 800962c:	4638      	mov	r0, r7
 800962e:	f7ff ffa5 	bl	800957c <_Bfree>
 8009632:	4644      	mov	r4, r8
 8009634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009638:	3501      	adds	r5, #1
 800963a:	615e      	str	r6, [r3, #20]
 800963c:	6125      	str	r5, [r4, #16]
 800963e:	4620      	mov	r0, r4
 8009640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009644:	0800ba08 	.word	0x0800ba08
 8009648:	0800ba19 	.word	0x0800ba19

0800964c <__hi0bits>:
 800964c:	0c03      	lsrs	r3, r0, #16
 800964e:	041b      	lsls	r3, r3, #16
 8009650:	b9d3      	cbnz	r3, 8009688 <__hi0bits+0x3c>
 8009652:	0400      	lsls	r0, r0, #16
 8009654:	2310      	movs	r3, #16
 8009656:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800965a:	bf04      	itt	eq
 800965c:	0200      	lsleq	r0, r0, #8
 800965e:	3308      	addeq	r3, #8
 8009660:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009664:	bf04      	itt	eq
 8009666:	0100      	lsleq	r0, r0, #4
 8009668:	3304      	addeq	r3, #4
 800966a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800966e:	bf04      	itt	eq
 8009670:	0080      	lsleq	r0, r0, #2
 8009672:	3302      	addeq	r3, #2
 8009674:	2800      	cmp	r0, #0
 8009676:	db05      	blt.n	8009684 <__hi0bits+0x38>
 8009678:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800967c:	f103 0301 	add.w	r3, r3, #1
 8009680:	bf08      	it	eq
 8009682:	2320      	moveq	r3, #32
 8009684:	4618      	mov	r0, r3
 8009686:	4770      	bx	lr
 8009688:	2300      	movs	r3, #0
 800968a:	e7e4      	b.n	8009656 <__hi0bits+0xa>

0800968c <__lo0bits>:
 800968c:	6803      	ldr	r3, [r0, #0]
 800968e:	f013 0207 	ands.w	r2, r3, #7
 8009692:	d00c      	beq.n	80096ae <__lo0bits+0x22>
 8009694:	07d9      	lsls	r1, r3, #31
 8009696:	d422      	bmi.n	80096de <__lo0bits+0x52>
 8009698:	079a      	lsls	r2, r3, #30
 800969a:	bf49      	itett	mi
 800969c:	085b      	lsrmi	r3, r3, #1
 800969e:	089b      	lsrpl	r3, r3, #2
 80096a0:	6003      	strmi	r3, [r0, #0]
 80096a2:	2201      	movmi	r2, #1
 80096a4:	bf5c      	itt	pl
 80096a6:	6003      	strpl	r3, [r0, #0]
 80096a8:	2202      	movpl	r2, #2
 80096aa:	4610      	mov	r0, r2
 80096ac:	4770      	bx	lr
 80096ae:	b299      	uxth	r1, r3
 80096b0:	b909      	cbnz	r1, 80096b6 <__lo0bits+0x2a>
 80096b2:	0c1b      	lsrs	r3, r3, #16
 80096b4:	2210      	movs	r2, #16
 80096b6:	b2d9      	uxtb	r1, r3
 80096b8:	b909      	cbnz	r1, 80096be <__lo0bits+0x32>
 80096ba:	3208      	adds	r2, #8
 80096bc:	0a1b      	lsrs	r3, r3, #8
 80096be:	0719      	lsls	r1, r3, #28
 80096c0:	bf04      	itt	eq
 80096c2:	091b      	lsreq	r3, r3, #4
 80096c4:	3204      	addeq	r2, #4
 80096c6:	0799      	lsls	r1, r3, #30
 80096c8:	bf04      	itt	eq
 80096ca:	089b      	lsreq	r3, r3, #2
 80096cc:	3202      	addeq	r2, #2
 80096ce:	07d9      	lsls	r1, r3, #31
 80096d0:	d403      	bmi.n	80096da <__lo0bits+0x4e>
 80096d2:	085b      	lsrs	r3, r3, #1
 80096d4:	f102 0201 	add.w	r2, r2, #1
 80096d8:	d003      	beq.n	80096e2 <__lo0bits+0x56>
 80096da:	6003      	str	r3, [r0, #0]
 80096dc:	e7e5      	b.n	80096aa <__lo0bits+0x1e>
 80096de:	2200      	movs	r2, #0
 80096e0:	e7e3      	b.n	80096aa <__lo0bits+0x1e>
 80096e2:	2220      	movs	r2, #32
 80096e4:	e7e1      	b.n	80096aa <__lo0bits+0x1e>
	...

080096e8 <__i2b>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	2101      	movs	r1, #1
 80096ee:	f7ff ff05 	bl	80094fc <_Balloc>
 80096f2:	4602      	mov	r2, r0
 80096f4:	b928      	cbnz	r0, 8009702 <__i2b+0x1a>
 80096f6:	4b05      	ldr	r3, [pc, #20]	; (800970c <__i2b+0x24>)
 80096f8:	4805      	ldr	r0, [pc, #20]	; (8009710 <__i2b+0x28>)
 80096fa:	f240 1145 	movw	r1, #325	; 0x145
 80096fe:	f000 fc99 	bl	800a034 <__assert_func>
 8009702:	2301      	movs	r3, #1
 8009704:	6144      	str	r4, [r0, #20]
 8009706:	6103      	str	r3, [r0, #16]
 8009708:	bd10      	pop	{r4, pc}
 800970a:	bf00      	nop
 800970c:	0800ba08 	.word	0x0800ba08
 8009710:	0800ba19 	.word	0x0800ba19

08009714 <__multiply>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	4691      	mov	r9, r2
 800971a:	690a      	ldr	r2, [r1, #16]
 800971c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009720:	429a      	cmp	r2, r3
 8009722:	bfb8      	it	lt
 8009724:	460b      	movlt	r3, r1
 8009726:	460c      	mov	r4, r1
 8009728:	bfbc      	itt	lt
 800972a:	464c      	movlt	r4, r9
 800972c:	4699      	movlt	r9, r3
 800972e:	6927      	ldr	r7, [r4, #16]
 8009730:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	6861      	ldr	r1, [r4, #4]
 8009738:	eb07 060a 	add.w	r6, r7, sl
 800973c:	42b3      	cmp	r3, r6
 800973e:	b085      	sub	sp, #20
 8009740:	bfb8      	it	lt
 8009742:	3101      	addlt	r1, #1
 8009744:	f7ff feda 	bl	80094fc <_Balloc>
 8009748:	b930      	cbnz	r0, 8009758 <__multiply+0x44>
 800974a:	4602      	mov	r2, r0
 800974c:	4b44      	ldr	r3, [pc, #272]	; (8009860 <__multiply+0x14c>)
 800974e:	4845      	ldr	r0, [pc, #276]	; (8009864 <__multiply+0x150>)
 8009750:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009754:	f000 fc6e 	bl	800a034 <__assert_func>
 8009758:	f100 0514 	add.w	r5, r0, #20
 800975c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009760:	462b      	mov	r3, r5
 8009762:	2200      	movs	r2, #0
 8009764:	4543      	cmp	r3, r8
 8009766:	d321      	bcc.n	80097ac <__multiply+0x98>
 8009768:	f104 0314 	add.w	r3, r4, #20
 800976c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009770:	f109 0314 	add.w	r3, r9, #20
 8009774:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009778:	9202      	str	r2, [sp, #8]
 800977a:	1b3a      	subs	r2, r7, r4
 800977c:	3a15      	subs	r2, #21
 800977e:	f022 0203 	bic.w	r2, r2, #3
 8009782:	3204      	adds	r2, #4
 8009784:	f104 0115 	add.w	r1, r4, #21
 8009788:	428f      	cmp	r7, r1
 800978a:	bf38      	it	cc
 800978c:	2204      	movcc	r2, #4
 800978e:	9201      	str	r2, [sp, #4]
 8009790:	9a02      	ldr	r2, [sp, #8]
 8009792:	9303      	str	r3, [sp, #12]
 8009794:	429a      	cmp	r2, r3
 8009796:	d80c      	bhi.n	80097b2 <__multiply+0x9e>
 8009798:	2e00      	cmp	r6, #0
 800979a:	dd03      	ble.n	80097a4 <__multiply+0x90>
 800979c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d05b      	beq.n	800985c <__multiply+0x148>
 80097a4:	6106      	str	r6, [r0, #16]
 80097a6:	b005      	add	sp, #20
 80097a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ac:	f843 2b04 	str.w	r2, [r3], #4
 80097b0:	e7d8      	b.n	8009764 <__multiply+0x50>
 80097b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80097b6:	f1ba 0f00 	cmp.w	sl, #0
 80097ba:	d024      	beq.n	8009806 <__multiply+0xf2>
 80097bc:	f104 0e14 	add.w	lr, r4, #20
 80097c0:	46a9      	mov	r9, r5
 80097c2:	f04f 0c00 	mov.w	ip, #0
 80097c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097ca:	f8d9 1000 	ldr.w	r1, [r9]
 80097ce:	fa1f fb82 	uxth.w	fp, r2
 80097d2:	b289      	uxth	r1, r1
 80097d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80097d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80097dc:	f8d9 2000 	ldr.w	r2, [r9]
 80097e0:	4461      	add	r1, ip
 80097e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80097ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097ee:	b289      	uxth	r1, r1
 80097f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097f4:	4577      	cmp	r7, lr
 80097f6:	f849 1b04 	str.w	r1, [r9], #4
 80097fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097fe:	d8e2      	bhi.n	80097c6 <__multiply+0xb2>
 8009800:	9a01      	ldr	r2, [sp, #4]
 8009802:	f845 c002 	str.w	ip, [r5, r2]
 8009806:	9a03      	ldr	r2, [sp, #12]
 8009808:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800980c:	3304      	adds	r3, #4
 800980e:	f1b9 0f00 	cmp.w	r9, #0
 8009812:	d021      	beq.n	8009858 <__multiply+0x144>
 8009814:	6829      	ldr	r1, [r5, #0]
 8009816:	f104 0c14 	add.w	ip, r4, #20
 800981a:	46ae      	mov	lr, r5
 800981c:	f04f 0a00 	mov.w	sl, #0
 8009820:	f8bc b000 	ldrh.w	fp, [ip]
 8009824:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009828:	fb09 220b 	mla	r2, r9, fp, r2
 800982c:	4452      	add	r2, sl
 800982e:	b289      	uxth	r1, r1
 8009830:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009834:	f84e 1b04 	str.w	r1, [lr], #4
 8009838:	f85c 1b04 	ldr.w	r1, [ip], #4
 800983c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009840:	f8be 1000 	ldrh.w	r1, [lr]
 8009844:	fb09 110a 	mla	r1, r9, sl, r1
 8009848:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800984c:	4567      	cmp	r7, ip
 800984e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009852:	d8e5      	bhi.n	8009820 <__multiply+0x10c>
 8009854:	9a01      	ldr	r2, [sp, #4]
 8009856:	50a9      	str	r1, [r5, r2]
 8009858:	3504      	adds	r5, #4
 800985a:	e799      	b.n	8009790 <__multiply+0x7c>
 800985c:	3e01      	subs	r6, #1
 800985e:	e79b      	b.n	8009798 <__multiply+0x84>
 8009860:	0800ba08 	.word	0x0800ba08
 8009864:	0800ba19 	.word	0x0800ba19

08009868 <__pow5mult>:
 8009868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800986c:	4615      	mov	r5, r2
 800986e:	f012 0203 	ands.w	r2, r2, #3
 8009872:	4606      	mov	r6, r0
 8009874:	460f      	mov	r7, r1
 8009876:	d007      	beq.n	8009888 <__pow5mult+0x20>
 8009878:	4c25      	ldr	r4, [pc, #148]	; (8009910 <__pow5mult+0xa8>)
 800987a:	3a01      	subs	r2, #1
 800987c:	2300      	movs	r3, #0
 800987e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009882:	f7ff fe9d 	bl	80095c0 <__multadd>
 8009886:	4607      	mov	r7, r0
 8009888:	10ad      	asrs	r5, r5, #2
 800988a:	d03d      	beq.n	8009908 <__pow5mult+0xa0>
 800988c:	69f4      	ldr	r4, [r6, #28]
 800988e:	b97c      	cbnz	r4, 80098b0 <__pow5mult+0x48>
 8009890:	2010      	movs	r0, #16
 8009892:	f7fe f88f 	bl	80079b4 <malloc>
 8009896:	4602      	mov	r2, r0
 8009898:	61f0      	str	r0, [r6, #28]
 800989a:	b928      	cbnz	r0, 80098a8 <__pow5mult+0x40>
 800989c:	4b1d      	ldr	r3, [pc, #116]	; (8009914 <__pow5mult+0xac>)
 800989e:	481e      	ldr	r0, [pc, #120]	; (8009918 <__pow5mult+0xb0>)
 80098a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80098a4:	f000 fbc6 	bl	800a034 <__assert_func>
 80098a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098ac:	6004      	str	r4, [r0, #0]
 80098ae:	60c4      	str	r4, [r0, #12]
 80098b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80098b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098b8:	b94c      	cbnz	r4, 80098ce <__pow5mult+0x66>
 80098ba:	f240 2171 	movw	r1, #625	; 0x271
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff ff12 	bl	80096e8 <__i2b>
 80098c4:	2300      	movs	r3, #0
 80098c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80098ca:	4604      	mov	r4, r0
 80098cc:	6003      	str	r3, [r0, #0]
 80098ce:	f04f 0900 	mov.w	r9, #0
 80098d2:	07eb      	lsls	r3, r5, #31
 80098d4:	d50a      	bpl.n	80098ec <__pow5mult+0x84>
 80098d6:	4639      	mov	r1, r7
 80098d8:	4622      	mov	r2, r4
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ff1a 	bl	8009714 <__multiply>
 80098e0:	4639      	mov	r1, r7
 80098e2:	4680      	mov	r8, r0
 80098e4:	4630      	mov	r0, r6
 80098e6:	f7ff fe49 	bl	800957c <_Bfree>
 80098ea:	4647      	mov	r7, r8
 80098ec:	106d      	asrs	r5, r5, #1
 80098ee:	d00b      	beq.n	8009908 <__pow5mult+0xa0>
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	b938      	cbnz	r0, 8009904 <__pow5mult+0x9c>
 80098f4:	4622      	mov	r2, r4
 80098f6:	4621      	mov	r1, r4
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7ff ff0b 	bl	8009714 <__multiply>
 80098fe:	6020      	str	r0, [r4, #0]
 8009900:	f8c0 9000 	str.w	r9, [r0]
 8009904:	4604      	mov	r4, r0
 8009906:	e7e4      	b.n	80098d2 <__pow5mult+0x6a>
 8009908:	4638      	mov	r0, r7
 800990a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990e:	bf00      	nop
 8009910:	0800bb68 	.word	0x0800bb68
 8009914:	0800b999 	.word	0x0800b999
 8009918:	0800ba19 	.word	0x0800ba19

0800991c <__lshift>:
 800991c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009920:	460c      	mov	r4, r1
 8009922:	6849      	ldr	r1, [r1, #4]
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800992a:	68a3      	ldr	r3, [r4, #8]
 800992c:	4607      	mov	r7, r0
 800992e:	4691      	mov	r9, r2
 8009930:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009934:	f108 0601 	add.w	r6, r8, #1
 8009938:	42b3      	cmp	r3, r6
 800993a:	db0b      	blt.n	8009954 <__lshift+0x38>
 800993c:	4638      	mov	r0, r7
 800993e:	f7ff fddd 	bl	80094fc <_Balloc>
 8009942:	4605      	mov	r5, r0
 8009944:	b948      	cbnz	r0, 800995a <__lshift+0x3e>
 8009946:	4602      	mov	r2, r0
 8009948:	4b28      	ldr	r3, [pc, #160]	; (80099ec <__lshift+0xd0>)
 800994a:	4829      	ldr	r0, [pc, #164]	; (80099f0 <__lshift+0xd4>)
 800994c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009950:	f000 fb70 	bl	800a034 <__assert_func>
 8009954:	3101      	adds	r1, #1
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	e7ee      	b.n	8009938 <__lshift+0x1c>
 800995a:	2300      	movs	r3, #0
 800995c:	f100 0114 	add.w	r1, r0, #20
 8009960:	f100 0210 	add.w	r2, r0, #16
 8009964:	4618      	mov	r0, r3
 8009966:	4553      	cmp	r3, sl
 8009968:	db33      	blt.n	80099d2 <__lshift+0xb6>
 800996a:	6920      	ldr	r0, [r4, #16]
 800996c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009970:	f104 0314 	add.w	r3, r4, #20
 8009974:	f019 091f 	ands.w	r9, r9, #31
 8009978:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800997c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009980:	d02b      	beq.n	80099da <__lshift+0xbe>
 8009982:	f1c9 0e20 	rsb	lr, r9, #32
 8009986:	468a      	mov	sl, r1
 8009988:	2200      	movs	r2, #0
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	fa00 f009 	lsl.w	r0, r0, r9
 8009990:	4310      	orrs	r0, r2
 8009992:	f84a 0b04 	str.w	r0, [sl], #4
 8009996:	f853 2b04 	ldr.w	r2, [r3], #4
 800999a:	459c      	cmp	ip, r3
 800999c:	fa22 f20e 	lsr.w	r2, r2, lr
 80099a0:	d8f3      	bhi.n	800998a <__lshift+0x6e>
 80099a2:	ebac 0304 	sub.w	r3, ip, r4
 80099a6:	3b15      	subs	r3, #21
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	3304      	adds	r3, #4
 80099ae:	f104 0015 	add.w	r0, r4, #21
 80099b2:	4584      	cmp	ip, r0
 80099b4:	bf38      	it	cc
 80099b6:	2304      	movcc	r3, #4
 80099b8:	50ca      	str	r2, [r1, r3]
 80099ba:	b10a      	cbz	r2, 80099c0 <__lshift+0xa4>
 80099bc:	f108 0602 	add.w	r6, r8, #2
 80099c0:	3e01      	subs	r6, #1
 80099c2:	4638      	mov	r0, r7
 80099c4:	612e      	str	r6, [r5, #16]
 80099c6:	4621      	mov	r1, r4
 80099c8:	f7ff fdd8 	bl	800957c <_Bfree>
 80099cc:	4628      	mov	r0, r5
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80099d6:	3301      	adds	r3, #1
 80099d8:	e7c5      	b.n	8009966 <__lshift+0x4a>
 80099da:	3904      	subs	r1, #4
 80099dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80099e4:	459c      	cmp	ip, r3
 80099e6:	d8f9      	bhi.n	80099dc <__lshift+0xc0>
 80099e8:	e7ea      	b.n	80099c0 <__lshift+0xa4>
 80099ea:	bf00      	nop
 80099ec:	0800ba08 	.word	0x0800ba08
 80099f0:	0800ba19 	.word	0x0800ba19

080099f4 <__mcmp>:
 80099f4:	b530      	push	{r4, r5, lr}
 80099f6:	6902      	ldr	r2, [r0, #16]
 80099f8:	690c      	ldr	r4, [r1, #16]
 80099fa:	1b12      	subs	r2, r2, r4
 80099fc:	d10e      	bne.n	8009a1c <__mcmp+0x28>
 80099fe:	f100 0314 	add.w	r3, r0, #20
 8009a02:	3114      	adds	r1, #20
 8009a04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009a08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a14:	42a5      	cmp	r5, r4
 8009a16:	d003      	beq.n	8009a20 <__mcmp+0x2c>
 8009a18:	d305      	bcc.n	8009a26 <__mcmp+0x32>
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	bd30      	pop	{r4, r5, pc}
 8009a20:	4283      	cmp	r3, r0
 8009a22:	d3f3      	bcc.n	8009a0c <__mcmp+0x18>
 8009a24:	e7fa      	b.n	8009a1c <__mcmp+0x28>
 8009a26:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2a:	e7f7      	b.n	8009a1c <__mcmp+0x28>

08009a2c <__mdiff>:
 8009a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	460c      	mov	r4, r1
 8009a32:	4606      	mov	r6, r0
 8009a34:	4611      	mov	r1, r2
 8009a36:	4620      	mov	r0, r4
 8009a38:	4690      	mov	r8, r2
 8009a3a:	f7ff ffdb 	bl	80099f4 <__mcmp>
 8009a3e:	1e05      	subs	r5, r0, #0
 8009a40:	d110      	bne.n	8009a64 <__mdiff+0x38>
 8009a42:	4629      	mov	r1, r5
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fd59 	bl	80094fc <_Balloc>
 8009a4a:	b930      	cbnz	r0, 8009a5a <__mdiff+0x2e>
 8009a4c:	4b3a      	ldr	r3, [pc, #232]	; (8009b38 <__mdiff+0x10c>)
 8009a4e:	4602      	mov	r2, r0
 8009a50:	f240 2137 	movw	r1, #567	; 0x237
 8009a54:	4839      	ldr	r0, [pc, #228]	; (8009b3c <__mdiff+0x110>)
 8009a56:	f000 faed 	bl	800a034 <__assert_func>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	bfa4      	itt	ge
 8009a66:	4643      	movge	r3, r8
 8009a68:	46a0      	movge	r8, r4
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a70:	bfa6      	itte	ge
 8009a72:	461c      	movge	r4, r3
 8009a74:	2500      	movge	r5, #0
 8009a76:	2501      	movlt	r5, #1
 8009a78:	f7ff fd40 	bl	80094fc <_Balloc>
 8009a7c:	b920      	cbnz	r0, 8009a88 <__mdiff+0x5c>
 8009a7e:	4b2e      	ldr	r3, [pc, #184]	; (8009b38 <__mdiff+0x10c>)
 8009a80:	4602      	mov	r2, r0
 8009a82:	f240 2145 	movw	r1, #581	; 0x245
 8009a86:	e7e5      	b.n	8009a54 <__mdiff+0x28>
 8009a88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a8c:	6926      	ldr	r6, [r4, #16]
 8009a8e:	60c5      	str	r5, [r0, #12]
 8009a90:	f104 0914 	add.w	r9, r4, #20
 8009a94:	f108 0514 	add.w	r5, r8, #20
 8009a98:	f100 0e14 	add.w	lr, r0, #20
 8009a9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009aa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009aa4:	f108 0210 	add.w	r2, r8, #16
 8009aa8:	46f2      	mov	sl, lr
 8009aaa:	2100      	movs	r1, #0
 8009aac:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ab4:	fa11 f88b 	uxtah	r8, r1, fp
 8009ab8:	b299      	uxth	r1, r3
 8009aba:	0c1b      	lsrs	r3, r3, #16
 8009abc:	eba8 0801 	sub.w	r8, r8, r1
 8009ac0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ac4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ac8:	fa1f f888 	uxth.w	r8, r8
 8009acc:	1419      	asrs	r1, r3, #16
 8009ace:	454e      	cmp	r6, r9
 8009ad0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ad4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ad8:	d8e8      	bhi.n	8009aac <__mdiff+0x80>
 8009ada:	1b33      	subs	r3, r6, r4
 8009adc:	3b15      	subs	r3, #21
 8009ade:	f023 0303 	bic.w	r3, r3, #3
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	3415      	adds	r4, #21
 8009ae6:	42a6      	cmp	r6, r4
 8009ae8:	bf38      	it	cc
 8009aea:	2304      	movcc	r3, #4
 8009aec:	441d      	add	r5, r3
 8009aee:	4473      	add	r3, lr
 8009af0:	469e      	mov	lr, r3
 8009af2:	462e      	mov	r6, r5
 8009af4:	4566      	cmp	r6, ip
 8009af6:	d30e      	bcc.n	8009b16 <__mdiff+0xea>
 8009af8:	f10c 0203 	add.w	r2, ip, #3
 8009afc:	1b52      	subs	r2, r2, r5
 8009afe:	f022 0203 	bic.w	r2, r2, #3
 8009b02:	3d03      	subs	r5, #3
 8009b04:	45ac      	cmp	ip, r5
 8009b06:	bf38      	it	cc
 8009b08:	2200      	movcc	r2, #0
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b10:	b17a      	cbz	r2, 8009b32 <__mdiff+0x106>
 8009b12:	6107      	str	r7, [r0, #16]
 8009b14:	e7a4      	b.n	8009a60 <__mdiff+0x34>
 8009b16:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b1a:	fa11 f288 	uxtah	r2, r1, r8
 8009b1e:	1414      	asrs	r4, r2, #16
 8009b20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b24:	b292      	uxth	r2, r2
 8009b26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b2a:	f84e 2b04 	str.w	r2, [lr], #4
 8009b2e:	1421      	asrs	r1, r4, #16
 8009b30:	e7e0      	b.n	8009af4 <__mdiff+0xc8>
 8009b32:	3f01      	subs	r7, #1
 8009b34:	e7ea      	b.n	8009b0c <__mdiff+0xe0>
 8009b36:	bf00      	nop
 8009b38:	0800ba08 	.word	0x0800ba08
 8009b3c:	0800ba19 	.word	0x0800ba19

08009b40 <__d2b>:
 8009b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b44:	460f      	mov	r7, r1
 8009b46:	2101      	movs	r1, #1
 8009b48:	ec59 8b10 	vmov	r8, r9, d0
 8009b4c:	4616      	mov	r6, r2
 8009b4e:	f7ff fcd5 	bl	80094fc <_Balloc>
 8009b52:	4604      	mov	r4, r0
 8009b54:	b930      	cbnz	r0, 8009b64 <__d2b+0x24>
 8009b56:	4602      	mov	r2, r0
 8009b58:	4b24      	ldr	r3, [pc, #144]	; (8009bec <__d2b+0xac>)
 8009b5a:	4825      	ldr	r0, [pc, #148]	; (8009bf0 <__d2b+0xb0>)
 8009b5c:	f240 310f 	movw	r1, #783	; 0x30f
 8009b60:	f000 fa68 	bl	800a034 <__assert_func>
 8009b64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b6c:	bb2d      	cbnz	r5, 8009bba <__d2b+0x7a>
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	f1b8 0300 	subs.w	r3, r8, #0
 8009b74:	d026      	beq.n	8009bc4 <__d2b+0x84>
 8009b76:	4668      	mov	r0, sp
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	f7ff fd87 	bl	800968c <__lo0bits>
 8009b7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b82:	b1e8      	cbz	r0, 8009bc0 <__d2b+0x80>
 8009b84:	f1c0 0320 	rsb	r3, r0, #32
 8009b88:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	40c2      	lsrs	r2, r0
 8009b90:	6163      	str	r3, [r4, #20]
 8009b92:	9201      	str	r2, [sp, #4]
 8009b94:	9b01      	ldr	r3, [sp, #4]
 8009b96:	61a3      	str	r3, [r4, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bf14      	ite	ne
 8009b9c:	2202      	movne	r2, #2
 8009b9e:	2201      	moveq	r2, #1
 8009ba0:	6122      	str	r2, [r4, #16]
 8009ba2:	b1bd      	cbz	r5, 8009bd4 <__d2b+0x94>
 8009ba4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ba8:	4405      	add	r5, r0
 8009baa:	603d      	str	r5, [r7, #0]
 8009bac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bb0:	6030      	str	r0, [r6, #0]
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	b003      	add	sp, #12
 8009bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bbe:	e7d6      	b.n	8009b6e <__d2b+0x2e>
 8009bc0:	6161      	str	r1, [r4, #20]
 8009bc2:	e7e7      	b.n	8009b94 <__d2b+0x54>
 8009bc4:	a801      	add	r0, sp, #4
 8009bc6:	f7ff fd61 	bl	800968c <__lo0bits>
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	6163      	str	r3, [r4, #20]
 8009bce:	3020      	adds	r0, #32
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	e7e5      	b.n	8009ba0 <__d2b+0x60>
 8009bd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bdc:	6038      	str	r0, [r7, #0]
 8009bde:	6918      	ldr	r0, [r3, #16]
 8009be0:	f7ff fd34 	bl	800964c <__hi0bits>
 8009be4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009be8:	e7e2      	b.n	8009bb0 <__d2b+0x70>
 8009bea:	bf00      	nop
 8009bec:	0800ba08 	.word	0x0800ba08
 8009bf0:	0800ba19 	.word	0x0800ba19

08009bf4 <__ssputs_r>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	688e      	ldr	r6, [r1, #8]
 8009bfa:	461f      	mov	r7, r3
 8009bfc:	42be      	cmp	r6, r7
 8009bfe:	680b      	ldr	r3, [r1, #0]
 8009c00:	4682      	mov	sl, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	4690      	mov	r8, r2
 8009c06:	d82c      	bhi.n	8009c62 <__ssputs_r+0x6e>
 8009c08:	898a      	ldrh	r2, [r1, #12]
 8009c0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c0e:	d026      	beq.n	8009c5e <__ssputs_r+0x6a>
 8009c10:	6965      	ldr	r5, [r4, #20]
 8009c12:	6909      	ldr	r1, [r1, #16]
 8009c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c18:	eba3 0901 	sub.w	r9, r3, r1
 8009c1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c20:	1c7b      	adds	r3, r7, #1
 8009c22:	444b      	add	r3, r9
 8009c24:	106d      	asrs	r5, r5, #1
 8009c26:	429d      	cmp	r5, r3
 8009c28:	bf38      	it	cc
 8009c2a:	461d      	movcc	r5, r3
 8009c2c:	0553      	lsls	r3, r2, #21
 8009c2e:	d527      	bpl.n	8009c80 <__ssputs_r+0x8c>
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7fd fee7 	bl	8007a04 <_malloc_r>
 8009c36:	4606      	mov	r6, r0
 8009c38:	b360      	cbz	r0, 8009c94 <__ssputs_r+0xa0>
 8009c3a:	6921      	ldr	r1, [r4, #16]
 8009c3c:	464a      	mov	r2, r9
 8009c3e:	f7fe fd88 	bl	8008752 <memcpy>
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c4c:	81a3      	strh	r3, [r4, #12]
 8009c4e:	6126      	str	r6, [r4, #16]
 8009c50:	6165      	str	r5, [r4, #20]
 8009c52:	444e      	add	r6, r9
 8009c54:	eba5 0509 	sub.w	r5, r5, r9
 8009c58:	6026      	str	r6, [r4, #0]
 8009c5a:	60a5      	str	r5, [r4, #8]
 8009c5c:	463e      	mov	r6, r7
 8009c5e:	42be      	cmp	r6, r7
 8009c60:	d900      	bls.n	8009c64 <__ssputs_r+0x70>
 8009c62:	463e      	mov	r6, r7
 8009c64:	6820      	ldr	r0, [r4, #0]
 8009c66:	4632      	mov	r2, r6
 8009c68:	4641      	mov	r1, r8
 8009c6a:	f000 f9c9 	bl	800a000 <memmove>
 8009c6e:	68a3      	ldr	r3, [r4, #8]
 8009c70:	1b9b      	subs	r3, r3, r6
 8009c72:	60a3      	str	r3, [r4, #8]
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	4433      	add	r3, r6
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c80:	462a      	mov	r2, r5
 8009c82:	f000 fa1d 	bl	800a0c0 <_realloc_r>
 8009c86:	4606      	mov	r6, r0
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d1e0      	bne.n	8009c4e <__ssputs_r+0x5a>
 8009c8c:	6921      	ldr	r1, [r4, #16]
 8009c8e:	4650      	mov	r0, sl
 8009c90:	f7ff fbe8 	bl	8009464 <_free_r>
 8009c94:	230c      	movs	r3, #12
 8009c96:	f8ca 3000 	str.w	r3, [sl]
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca6:	e7e9      	b.n	8009c7c <__ssputs_r+0x88>

08009ca8 <_svfiprintf_r>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	4698      	mov	r8, r3
 8009cae:	898b      	ldrh	r3, [r1, #12]
 8009cb0:	061b      	lsls	r3, r3, #24
 8009cb2:	b09d      	sub	sp, #116	; 0x74
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	4614      	mov	r4, r2
 8009cba:	d50e      	bpl.n	8009cda <_svfiprintf_r+0x32>
 8009cbc:	690b      	ldr	r3, [r1, #16]
 8009cbe:	b963      	cbnz	r3, 8009cda <_svfiprintf_r+0x32>
 8009cc0:	2140      	movs	r1, #64	; 0x40
 8009cc2:	f7fd fe9f 	bl	8007a04 <_malloc_r>
 8009cc6:	6028      	str	r0, [r5, #0]
 8009cc8:	6128      	str	r0, [r5, #16]
 8009cca:	b920      	cbnz	r0, 8009cd6 <_svfiprintf_r+0x2e>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e0d0      	b.n	8009e78 <_svfiprintf_r+0x1d0>
 8009cd6:	2340      	movs	r3, #64	; 0x40
 8009cd8:	616b      	str	r3, [r5, #20]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cde:	2320      	movs	r3, #32
 8009ce0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ce4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce8:	2330      	movs	r3, #48	; 0x30
 8009cea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e90 <_svfiprintf_r+0x1e8>
 8009cee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cf2:	f04f 0901 	mov.w	r9, #1
 8009cf6:	4623      	mov	r3, r4
 8009cf8:	469a      	mov	sl, r3
 8009cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cfe:	b10a      	cbz	r2, 8009d04 <_svfiprintf_r+0x5c>
 8009d00:	2a25      	cmp	r2, #37	; 0x25
 8009d02:	d1f9      	bne.n	8009cf8 <_svfiprintf_r+0x50>
 8009d04:	ebba 0b04 	subs.w	fp, sl, r4
 8009d08:	d00b      	beq.n	8009d22 <_svfiprintf_r+0x7a>
 8009d0a:	465b      	mov	r3, fp
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4638      	mov	r0, r7
 8009d12:	f7ff ff6f 	bl	8009bf4 <__ssputs_r>
 8009d16:	3001      	adds	r0, #1
 8009d18:	f000 80a9 	beq.w	8009e6e <_svfiprintf_r+0x1c6>
 8009d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d1e:	445a      	add	r2, fp
 8009d20:	9209      	str	r2, [sp, #36]	; 0x24
 8009d22:	f89a 3000 	ldrb.w	r3, [sl]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 80a1 	beq.w	8009e6e <_svfiprintf_r+0x1c6>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d36:	f10a 0a01 	add.w	sl, sl, #1
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	9307      	str	r3, [sp, #28]
 8009d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d42:	931a      	str	r3, [sp, #104]	; 0x68
 8009d44:	4654      	mov	r4, sl
 8009d46:	2205      	movs	r2, #5
 8009d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d4c:	4850      	ldr	r0, [pc, #320]	; (8009e90 <_svfiprintf_r+0x1e8>)
 8009d4e:	f7f6 fa47 	bl	80001e0 <memchr>
 8009d52:	9a04      	ldr	r2, [sp, #16]
 8009d54:	b9d8      	cbnz	r0, 8009d8e <_svfiprintf_r+0xe6>
 8009d56:	06d0      	lsls	r0, r2, #27
 8009d58:	bf44      	itt	mi
 8009d5a:	2320      	movmi	r3, #32
 8009d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d60:	0711      	lsls	r1, r2, #28
 8009d62:	bf44      	itt	mi
 8009d64:	232b      	movmi	r3, #43	; 0x2b
 8009d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d70:	d015      	beq.n	8009d9e <_svfiprintf_r+0xf6>
 8009d72:	9a07      	ldr	r2, [sp, #28]
 8009d74:	4654      	mov	r4, sl
 8009d76:	2000      	movs	r0, #0
 8009d78:	f04f 0c0a 	mov.w	ip, #10
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d82:	3b30      	subs	r3, #48	; 0x30
 8009d84:	2b09      	cmp	r3, #9
 8009d86:	d94d      	bls.n	8009e24 <_svfiprintf_r+0x17c>
 8009d88:	b1b0      	cbz	r0, 8009db8 <_svfiprintf_r+0x110>
 8009d8a:	9207      	str	r2, [sp, #28]
 8009d8c:	e014      	b.n	8009db8 <_svfiprintf_r+0x110>
 8009d8e:	eba0 0308 	sub.w	r3, r0, r8
 8009d92:	fa09 f303 	lsl.w	r3, r9, r3
 8009d96:	4313      	orrs	r3, r2
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	46a2      	mov	sl, r4
 8009d9c:	e7d2      	b.n	8009d44 <_svfiprintf_r+0x9c>
 8009d9e:	9b03      	ldr	r3, [sp, #12]
 8009da0:	1d19      	adds	r1, r3, #4
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	9103      	str	r1, [sp, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bfbb      	ittet	lt
 8009daa:	425b      	neglt	r3, r3
 8009dac:	f042 0202 	orrlt.w	r2, r2, #2
 8009db0:	9307      	strge	r3, [sp, #28]
 8009db2:	9307      	strlt	r3, [sp, #28]
 8009db4:	bfb8      	it	lt
 8009db6:	9204      	strlt	r2, [sp, #16]
 8009db8:	7823      	ldrb	r3, [r4, #0]
 8009dba:	2b2e      	cmp	r3, #46	; 0x2e
 8009dbc:	d10c      	bne.n	8009dd8 <_svfiprintf_r+0x130>
 8009dbe:	7863      	ldrb	r3, [r4, #1]
 8009dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc2:	d134      	bne.n	8009e2e <_svfiprintf_r+0x186>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	1d1a      	adds	r2, r3, #4
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	9203      	str	r2, [sp, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	bfb8      	it	lt
 8009dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dd4:	3402      	adds	r4, #2
 8009dd6:	9305      	str	r3, [sp, #20]
 8009dd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ea0 <_svfiprintf_r+0x1f8>
 8009ddc:	7821      	ldrb	r1, [r4, #0]
 8009dde:	2203      	movs	r2, #3
 8009de0:	4650      	mov	r0, sl
 8009de2:	f7f6 f9fd 	bl	80001e0 <memchr>
 8009de6:	b138      	cbz	r0, 8009df8 <_svfiprintf_r+0x150>
 8009de8:	9b04      	ldr	r3, [sp, #16]
 8009dea:	eba0 000a 	sub.w	r0, r0, sl
 8009dee:	2240      	movs	r2, #64	; 0x40
 8009df0:	4082      	lsls	r2, r0
 8009df2:	4313      	orrs	r3, r2
 8009df4:	3401      	adds	r4, #1
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfc:	4825      	ldr	r0, [pc, #148]	; (8009e94 <_svfiprintf_r+0x1ec>)
 8009dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e02:	2206      	movs	r2, #6
 8009e04:	f7f6 f9ec 	bl	80001e0 <memchr>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d038      	beq.n	8009e7e <_svfiprintf_r+0x1d6>
 8009e0c:	4b22      	ldr	r3, [pc, #136]	; (8009e98 <_svfiprintf_r+0x1f0>)
 8009e0e:	bb1b      	cbnz	r3, 8009e58 <_svfiprintf_r+0x1b0>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	3307      	adds	r3, #7
 8009e14:	f023 0307 	bic.w	r3, r3, #7
 8009e18:	3308      	adds	r3, #8
 8009e1a:	9303      	str	r3, [sp, #12]
 8009e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1e:	4433      	add	r3, r6
 8009e20:	9309      	str	r3, [sp, #36]	; 0x24
 8009e22:	e768      	b.n	8009cf6 <_svfiprintf_r+0x4e>
 8009e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e28:	460c      	mov	r4, r1
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	e7a6      	b.n	8009d7c <_svfiprintf_r+0xd4>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	3401      	adds	r4, #1
 8009e32:	9305      	str	r3, [sp, #20]
 8009e34:	4619      	mov	r1, r3
 8009e36:	f04f 0c0a 	mov.w	ip, #10
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e40:	3a30      	subs	r2, #48	; 0x30
 8009e42:	2a09      	cmp	r2, #9
 8009e44:	d903      	bls.n	8009e4e <_svfiprintf_r+0x1a6>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0c6      	beq.n	8009dd8 <_svfiprintf_r+0x130>
 8009e4a:	9105      	str	r1, [sp, #20]
 8009e4c:	e7c4      	b.n	8009dd8 <_svfiprintf_r+0x130>
 8009e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e52:	4604      	mov	r4, r0
 8009e54:	2301      	movs	r3, #1
 8009e56:	e7f0      	b.n	8009e3a <_svfiprintf_r+0x192>
 8009e58:	ab03      	add	r3, sp, #12
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <_svfiprintf_r+0x1f4>)
 8009e60:	a904      	add	r1, sp, #16
 8009e62:	4638      	mov	r0, r7
 8009e64:	f7fd fefa 	bl	8007c5c <_printf_float>
 8009e68:	1c42      	adds	r2, r0, #1
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	d1d6      	bne.n	8009e1c <_svfiprintf_r+0x174>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	065b      	lsls	r3, r3, #25
 8009e72:	f53f af2d 	bmi.w	8009cd0 <_svfiprintf_r+0x28>
 8009e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e78:	b01d      	add	sp, #116	; 0x74
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	ab03      	add	r3, sp, #12
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <_svfiprintf_r+0x1f4>)
 8009e86:	a904      	add	r1, sp, #16
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7fe f98b 	bl	80081a4 <_printf_i>
 8009e8e:	e7eb      	b.n	8009e68 <_svfiprintf_r+0x1c0>
 8009e90:	0800bb74 	.word	0x0800bb74
 8009e94:	0800bb7e 	.word	0x0800bb7e
 8009e98:	08007c5d 	.word	0x08007c5d
 8009e9c:	08009bf5 	.word	0x08009bf5
 8009ea0:	0800bb7a 	.word	0x0800bb7a

08009ea4 <__sflush_r>:
 8009ea4:	898a      	ldrh	r2, [r1, #12]
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	4605      	mov	r5, r0
 8009eac:	0710      	lsls	r0, r2, #28
 8009eae:	460c      	mov	r4, r1
 8009eb0:	d458      	bmi.n	8009f64 <__sflush_r+0xc0>
 8009eb2:	684b      	ldr	r3, [r1, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dc05      	bgt.n	8009ec4 <__sflush_r+0x20>
 8009eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	dc02      	bgt.n	8009ec4 <__sflush_r+0x20>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	d0f9      	beq.n	8009ebe <__sflush_r+0x1a>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ed0:	682f      	ldr	r7, [r5, #0]
 8009ed2:	6a21      	ldr	r1, [r4, #32]
 8009ed4:	602b      	str	r3, [r5, #0]
 8009ed6:	d032      	beq.n	8009f3e <__sflush_r+0x9a>
 8009ed8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	075a      	lsls	r2, r3, #29
 8009ede:	d505      	bpl.n	8009eec <__sflush_r+0x48>
 8009ee0:	6863      	ldr	r3, [r4, #4]
 8009ee2:	1ac0      	subs	r0, r0, r3
 8009ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ee6:	b10b      	cbz	r3, 8009eec <__sflush_r+0x48>
 8009ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009eea:	1ac0      	subs	r0, r0, r3
 8009eec:	2300      	movs	r3, #0
 8009eee:	4602      	mov	r2, r0
 8009ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ef2:	6a21      	ldr	r1, [r4, #32]
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b0      	blx	r6
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	d106      	bne.n	8009f0c <__sflush_r+0x68>
 8009efe:	6829      	ldr	r1, [r5, #0]
 8009f00:	291d      	cmp	r1, #29
 8009f02:	d82b      	bhi.n	8009f5c <__sflush_r+0xb8>
 8009f04:	4a29      	ldr	r2, [pc, #164]	; (8009fac <__sflush_r+0x108>)
 8009f06:	410a      	asrs	r2, r1
 8009f08:	07d6      	lsls	r6, r2, #31
 8009f0a:	d427      	bmi.n	8009f5c <__sflush_r+0xb8>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	6062      	str	r2, [r4, #4]
 8009f10:	04d9      	lsls	r1, r3, #19
 8009f12:	6922      	ldr	r2, [r4, #16]
 8009f14:	6022      	str	r2, [r4, #0]
 8009f16:	d504      	bpl.n	8009f22 <__sflush_r+0x7e>
 8009f18:	1c42      	adds	r2, r0, #1
 8009f1a:	d101      	bne.n	8009f20 <__sflush_r+0x7c>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b903      	cbnz	r3, 8009f22 <__sflush_r+0x7e>
 8009f20:	6560      	str	r0, [r4, #84]	; 0x54
 8009f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f24:	602f      	str	r7, [r5, #0]
 8009f26:	2900      	cmp	r1, #0
 8009f28:	d0c9      	beq.n	8009ebe <__sflush_r+0x1a>
 8009f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f2e:	4299      	cmp	r1, r3
 8009f30:	d002      	beq.n	8009f38 <__sflush_r+0x94>
 8009f32:	4628      	mov	r0, r5
 8009f34:	f7ff fa96 	bl	8009464 <_free_r>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	6360      	str	r0, [r4, #52]	; 0x34
 8009f3c:	e7c0      	b.n	8009ec0 <__sflush_r+0x1c>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b0      	blx	r6
 8009f44:	1c41      	adds	r1, r0, #1
 8009f46:	d1c8      	bne.n	8009eda <__sflush_r+0x36>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0c5      	beq.n	8009eda <__sflush_r+0x36>
 8009f4e:	2b1d      	cmp	r3, #29
 8009f50:	d001      	beq.n	8009f56 <__sflush_r+0xb2>
 8009f52:	2b16      	cmp	r3, #22
 8009f54:	d101      	bne.n	8009f5a <__sflush_r+0xb6>
 8009f56:	602f      	str	r7, [r5, #0]
 8009f58:	e7b1      	b.n	8009ebe <__sflush_r+0x1a>
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	e7ad      	b.n	8009ec0 <__sflush_r+0x1c>
 8009f64:	690f      	ldr	r7, [r1, #16]
 8009f66:	2f00      	cmp	r7, #0
 8009f68:	d0a9      	beq.n	8009ebe <__sflush_r+0x1a>
 8009f6a:	0793      	lsls	r3, r2, #30
 8009f6c:	680e      	ldr	r6, [r1, #0]
 8009f6e:	bf08      	it	eq
 8009f70:	694b      	ldreq	r3, [r1, #20]
 8009f72:	600f      	str	r7, [r1, #0]
 8009f74:	bf18      	it	ne
 8009f76:	2300      	movne	r3, #0
 8009f78:	eba6 0807 	sub.w	r8, r6, r7
 8009f7c:	608b      	str	r3, [r1, #8]
 8009f7e:	f1b8 0f00 	cmp.w	r8, #0
 8009f82:	dd9c      	ble.n	8009ebe <__sflush_r+0x1a>
 8009f84:	6a21      	ldr	r1, [r4, #32]
 8009f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f88:	4643      	mov	r3, r8
 8009f8a:	463a      	mov	r2, r7
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b0      	blx	r6
 8009f90:	2800      	cmp	r0, #0
 8009f92:	dc06      	bgt.n	8009fa2 <__sflush_r+0xfe>
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e78e      	b.n	8009ec0 <__sflush_r+0x1c>
 8009fa2:	4407      	add	r7, r0
 8009fa4:	eba8 0800 	sub.w	r8, r8, r0
 8009fa8:	e7e9      	b.n	8009f7e <__sflush_r+0xda>
 8009faa:	bf00      	nop
 8009fac:	dfbffffe 	.word	0xdfbffffe

08009fb0 <_fflush_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	690b      	ldr	r3, [r1, #16]
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	b913      	cbnz	r3, 8009fc0 <_fflush_r+0x10>
 8009fba:	2500      	movs	r5, #0
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	b118      	cbz	r0, 8009fca <_fflush_r+0x1a>
 8009fc2:	6a03      	ldr	r3, [r0, #32]
 8009fc4:	b90b      	cbnz	r3, 8009fca <_fflush_r+0x1a>
 8009fc6:	f7fe fa9b 	bl	8008500 <__sinit>
 8009fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0f3      	beq.n	8009fba <_fflush_r+0xa>
 8009fd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fd4:	07d0      	lsls	r0, r2, #31
 8009fd6:	d404      	bmi.n	8009fe2 <_fflush_r+0x32>
 8009fd8:	0599      	lsls	r1, r3, #22
 8009fda:	d402      	bmi.n	8009fe2 <_fflush_r+0x32>
 8009fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fde:	f7fe fbb6 	bl	800874e <__retarget_lock_acquire_recursive>
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	f7ff ff5d 	bl	8009ea4 <__sflush_r>
 8009fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fec:	07da      	lsls	r2, r3, #31
 8009fee:	4605      	mov	r5, r0
 8009ff0:	d4e4      	bmi.n	8009fbc <_fflush_r+0xc>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	059b      	lsls	r3, r3, #22
 8009ff6:	d4e1      	bmi.n	8009fbc <_fflush_r+0xc>
 8009ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffa:	f7fe fba9 	bl	8008750 <__retarget_lock_release_recursive>
 8009ffe:	e7dd      	b.n	8009fbc <_fflush_r+0xc>

0800a000 <memmove>:
 800a000:	4288      	cmp	r0, r1
 800a002:	b510      	push	{r4, lr}
 800a004:	eb01 0402 	add.w	r4, r1, r2
 800a008:	d902      	bls.n	800a010 <memmove+0x10>
 800a00a:	4284      	cmp	r4, r0
 800a00c:	4623      	mov	r3, r4
 800a00e:	d807      	bhi.n	800a020 <memmove+0x20>
 800a010:	1e43      	subs	r3, r0, #1
 800a012:	42a1      	cmp	r1, r4
 800a014:	d008      	beq.n	800a028 <memmove+0x28>
 800a016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a01a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a01e:	e7f8      	b.n	800a012 <memmove+0x12>
 800a020:	4402      	add	r2, r0
 800a022:	4601      	mov	r1, r0
 800a024:	428a      	cmp	r2, r1
 800a026:	d100      	bne.n	800a02a <memmove+0x2a>
 800a028:	bd10      	pop	{r4, pc}
 800a02a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a02e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a032:	e7f7      	b.n	800a024 <memmove+0x24>

0800a034 <__assert_func>:
 800a034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a036:	4614      	mov	r4, r2
 800a038:	461a      	mov	r2, r3
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <__assert_func+0x2c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4605      	mov	r5, r0
 800a040:	68d8      	ldr	r0, [r3, #12]
 800a042:	b14c      	cbz	r4, 800a058 <__assert_func+0x24>
 800a044:	4b07      	ldr	r3, [pc, #28]	; (800a064 <__assert_func+0x30>)
 800a046:	9100      	str	r1, [sp, #0]
 800a048:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a04c:	4906      	ldr	r1, [pc, #24]	; (800a068 <__assert_func+0x34>)
 800a04e:	462b      	mov	r3, r5
 800a050:	f000 f872 	bl	800a138 <fiprintf>
 800a054:	f000 f882 	bl	800a15c <abort>
 800a058:	4b04      	ldr	r3, [pc, #16]	; (800a06c <__assert_func+0x38>)
 800a05a:	461c      	mov	r4, r3
 800a05c:	e7f3      	b.n	800a046 <__assert_func+0x12>
 800a05e:	bf00      	nop
 800a060:	200000d4 	.word	0x200000d4
 800a064:	0800bb8f 	.word	0x0800bb8f
 800a068:	0800bb9c 	.word	0x0800bb9c
 800a06c:	0800bbca 	.word	0x0800bbca

0800a070 <_calloc_r>:
 800a070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a072:	fba1 2402 	umull	r2, r4, r1, r2
 800a076:	b94c      	cbnz	r4, 800a08c <_calloc_r+0x1c>
 800a078:	4611      	mov	r1, r2
 800a07a:	9201      	str	r2, [sp, #4]
 800a07c:	f7fd fcc2 	bl	8007a04 <_malloc_r>
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	4605      	mov	r5, r0
 800a084:	b930      	cbnz	r0, 800a094 <_calloc_r+0x24>
 800a086:	4628      	mov	r0, r5
 800a088:	b003      	add	sp, #12
 800a08a:	bd30      	pop	{r4, r5, pc}
 800a08c:	220c      	movs	r2, #12
 800a08e:	6002      	str	r2, [r0, #0]
 800a090:	2500      	movs	r5, #0
 800a092:	e7f8      	b.n	800a086 <_calloc_r+0x16>
 800a094:	4621      	mov	r1, r4
 800a096:	f7fe facc 	bl	8008632 <memset>
 800a09a:	e7f4      	b.n	800a086 <_calloc_r+0x16>

0800a09c <__ascii_mbtowc>:
 800a09c:	b082      	sub	sp, #8
 800a09e:	b901      	cbnz	r1, 800a0a2 <__ascii_mbtowc+0x6>
 800a0a0:	a901      	add	r1, sp, #4
 800a0a2:	b142      	cbz	r2, 800a0b6 <__ascii_mbtowc+0x1a>
 800a0a4:	b14b      	cbz	r3, 800a0ba <__ascii_mbtowc+0x1e>
 800a0a6:	7813      	ldrb	r3, [r2, #0]
 800a0a8:	600b      	str	r3, [r1, #0]
 800a0aa:	7812      	ldrb	r2, [r2, #0]
 800a0ac:	1e10      	subs	r0, r2, #0
 800a0ae:	bf18      	it	ne
 800a0b0:	2001      	movne	r0, #1
 800a0b2:	b002      	add	sp, #8
 800a0b4:	4770      	bx	lr
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	e7fb      	b.n	800a0b2 <__ascii_mbtowc+0x16>
 800a0ba:	f06f 0001 	mvn.w	r0, #1
 800a0be:	e7f8      	b.n	800a0b2 <__ascii_mbtowc+0x16>

0800a0c0 <_realloc_r>:
 800a0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4614      	mov	r4, r2
 800a0c8:	460e      	mov	r6, r1
 800a0ca:	b921      	cbnz	r1, 800a0d6 <_realloc_r+0x16>
 800a0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	f7fd bc97 	b.w	8007a04 <_malloc_r>
 800a0d6:	b92a      	cbnz	r2, 800a0e4 <_realloc_r+0x24>
 800a0d8:	f7ff f9c4 	bl	8009464 <_free_r>
 800a0dc:	4625      	mov	r5, r4
 800a0de:	4628      	mov	r0, r5
 800a0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e4:	f000 f841 	bl	800a16a <_malloc_usable_size_r>
 800a0e8:	4284      	cmp	r4, r0
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	d802      	bhi.n	800a0f4 <_realloc_r+0x34>
 800a0ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0f2:	d812      	bhi.n	800a11a <_realloc_r+0x5a>
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f7fd fc84 	bl	8007a04 <_malloc_r>
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d0ed      	beq.n	800a0de <_realloc_r+0x1e>
 800a102:	42bc      	cmp	r4, r7
 800a104:	4622      	mov	r2, r4
 800a106:	4631      	mov	r1, r6
 800a108:	bf28      	it	cs
 800a10a:	463a      	movcs	r2, r7
 800a10c:	f7fe fb21 	bl	8008752 <memcpy>
 800a110:	4631      	mov	r1, r6
 800a112:	4640      	mov	r0, r8
 800a114:	f7ff f9a6 	bl	8009464 <_free_r>
 800a118:	e7e1      	b.n	800a0de <_realloc_r+0x1e>
 800a11a:	4635      	mov	r5, r6
 800a11c:	e7df      	b.n	800a0de <_realloc_r+0x1e>

0800a11e <__ascii_wctomb>:
 800a11e:	b149      	cbz	r1, 800a134 <__ascii_wctomb+0x16>
 800a120:	2aff      	cmp	r2, #255	; 0xff
 800a122:	bf85      	ittet	hi
 800a124:	238a      	movhi	r3, #138	; 0x8a
 800a126:	6003      	strhi	r3, [r0, #0]
 800a128:	700a      	strbls	r2, [r1, #0]
 800a12a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a12e:	bf98      	it	ls
 800a130:	2001      	movls	r0, #1
 800a132:	4770      	bx	lr
 800a134:	4608      	mov	r0, r1
 800a136:	4770      	bx	lr

0800a138 <fiprintf>:
 800a138:	b40e      	push	{r1, r2, r3}
 800a13a:	b503      	push	{r0, r1, lr}
 800a13c:	4601      	mov	r1, r0
 800a13e:	ab03      	add	r3, sp, #12
 800a140:	4805      	ldr	r0, [pc, #20]	; (800a158 <fiprintf+0x20>)
 800a142:	f853 2b04 	ldr.w	r2, [r3], #4
 800a146:	6800      	ldr	r0, [r0, #0]
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	f000 f83f 	bl	800a1cc <_vfiprintf_r>
 800a14e:	b002      	add	sp, #8
 800a150:	f85d eb04 	ldr.w	lr, [sp], #4
 800a154:	b003      	add	sp, #12
 800a156:	4770      	bx	lr
 800a158:	200000d4 	.word	0x200000d4

0800a15c <abort>:
 800a15c:	b508      	push	{r3, lr}
 800a15e:	2006      	movs	r0, #6
 800a160:	f000 fa0c 	bl	800a57c <raise>
 800a164:	2001      	movs	r0, #1
 800a166:	f7fa fce1 	bl	8004b2c <_exit>

0800a16a <_malloc_usable_size_r>:
 800a16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16e:	1f18      	subs	r0, r3, #4
 800a170:	2b00      	cmp	r3, #0
 800a172:	bfbc      	itt	lt
 800a174:	580b      	ldrlt	r3, [r1, r0]
 800a176:	18c0      	addlt	r0, r0, r3
 800a178:	4770      	bx	lr

0800a17a <__sfputc_r>:
 800a17a:	6893      	ldr	r3, [r2, #8]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	b410      	push	{r4}
 800a182:	6093      	str	r3, [r2, #8]
 800a184:	da08      	bge.n	800a198 <__sfputc_r+0x1e>
 800a186:	6994      	ldr	r4, [r2, #24]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	db01      	blt.n	800a190 <__sfputc_r+0x16>
 800a18c:	290a      	cmp	r1, #10
 800a18e:	d103      	bne.n	800a198 <__sfputc_r+0x1e>
 800a190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a194:	f000 b934 	b.w	800a400 <__swbuf_r>
 800a198:	6813      	ldr	r3, [r2, #0]
 800a19a:	1c58      	adds	r0, r3, #1
 800a19c:	6010      	str	r0, [r2, #0]
 800a19e:	7019      	strb	r1, [r3, #0]
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <__sfputs_r>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460f      	mov	r7, r1
 800a1ae:	4614      	mov	r4, r2
 800a1b0:	18d5      	adds	r5, r2, r3
 800a1b2:	42ac      	cmp	r4, r5
 800a1b4:	d101      	bne.n	800a1ba <__sfputs_r+0x12>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e007      	b.n	800a1ca <__sfputs_r+0x22>
 800a1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1be:	463a      	mov	r2, r7
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff ffda 	bl	800a17a <__sfputc_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d1f3      	bne.n	800a1b2 <__sfputs_r+0xa>
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1cc <_vfiprintf_r>:
 800a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	b09d      	sub	sp, #116	; 0x74
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	4698      	mov	r8, r3
 800a1d8:	4606      	mov	r6, r0
 800a1da:	b118      	cbz	r0, 800a1e4 <_vfiprintf_r+0x18>
 800a1dc:	6a03      	ldr	r3, [r0, #32]
 800a1de:	b90b      	cbnz	r3, 800a1e4 <_vfiprintf_r+0x18>
 800a1e0:	f7fe f98e 	bl	8008500 <__sinit>
 800a1e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e6:	07d9      	lsls	r1, r3, #31
 800a1e8:	d405      	bmi.n	800a1f6 <_vfiprintf_r+0x2a>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d402      	bmi.n	800a1f6 <_vfiprintf_r+0x2a>
 800a1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f2:	f7fe faac 	bl	800874e <__retarget_lock_acquire_recursive>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	071b      	lsls	r3, r3, #28
 800a1fa:	d501      	bpl.n	800a200 <_vfiprintf_r+0x34>
 800a1fc:	692b      	ldr	r3, [r5, #16]
 800a1fe:	b99b      	cbnz	r3, 800a228 <_vfiprintf_r+0x5c>
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f93a 	bl	800a47c <__swsetup_r>
 800a208:	b170      	cbz	r0, 800a228 <_vfiprintf_r+0x5c>
 800a20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a20c:	07dc      	lsls	r4, r3, #31
 800a20e:	d504      	bpl.n	800a21a <_vfiprintf_r+0x4e>
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	b01d      	add	sp, #116	; 0x74
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	89ab      	ldrh	r3, [r5, #12]
 800a21c:	0598      	lsls	r0, r3, #22
 800a21e:	d4f7      	bmi.n	800a210 <_vfiprintf_r+0x44>
 800a220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a222:	f7fe fa95 	bl	8008750 <__retarget_lock_release_recursive>
 800a226:	e7f3      	b.n	800a210 <_vfiprintf_r+0x44>
 800a228:	2300      	movs	r3, #0
 800a22a:	9309      	str	r3, [sp, #36]	; 0x24
 800a22c:	2320      	movs	r3, #32
 800a22e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a232:	f8cd 800c 	str.w	r8, [sp, #12]
 800a236:	2330      	movs	r3, #48	; 0x30
 800a238:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a3ec <_vfiprintf_r+0x220>
 800a23c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a240:	f04f 0901 	mov.w	r9, #1
 800a244:	4623      	mov	r3, r4
 800a246:	469a      	mov	sl, r3
 800a248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24c:	b10a      	cbz	r2, 800a252 <_vfiprintf_r+0x86>
 800a24e:	2a25      	cmp	r2, #37	; 0x25
 800a250:	d1f9      	bne.n	800a246 <_vfiprintf_r+0x7a>
 800a252:	ebba 0b04 	subs.w	fp, sl, r4
 800a256:	d00b      	beq.n	800a270 <_vfiprintf_r+0xa4>
 800a258:	465b      	mov	r3, fp
 800a25a:	4622      	mov	r2, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	4630      	mov	r0, r6
 800a260:	f7ff ffa2 	bl	800a1a8 <__sfputs_r>
 800a264:	3001      	adds	r0, #1
 800a266:	f000 80a9 	beq.w	800a3bc <_vfiprintf_r+0x1f0>
 800a26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a26c:	445a      	add	r2, fp
 800a26e:	9209      	str	r2, [sp, #36]	; 0x24
 800a270:	f89a 3000 	ldrb.w	r3, [sl]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 80a1 	beq.w	800a3bc <_vfiprintf_r+0x1f0>
 800a27a:	2300      	movs	r3, #0
 800a27c:	f04f 32ff 	mov.w	r2, #4294967295
 800a280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a284:	f10a 0a01 	add.w	sl, sl, #1
 800a288:	9304      	str	r3, [sp, #16]
 800a28a:	9307      	str	r3, [sp, #28]
 800a28c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a290:	931a      	str	r3, [sp, #104]	; 0x68
 800a292:	4654      	mov	r4, sl
 800a294:	2205      	movs	r2, #5
 800a296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29a:	4854      	ldr	r0, [pc, #336]	; (800a3ec <_vfiprintf_r+0x220>)
 800a29c:	f7f5 ffa0 	bl	80001e0 <memchr>
 800a2a0:	9a04      	ldr	r2, [sp, #16]
 800a2a2:	b9d8      	cbnz	r0, 800a2dc <_vfiprintf_r+0x110>
 800a2a4:	06d1      	lsls	r1, r2, #27
 800a2a6:	bf44      	itt	mi
 800a2a8:	2320      	movmi	r3, #32
 800a2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ae:	0713      	lsls	r3, r2, #28
 800a2b0:	bf44      	itt	mi
 800a2b2:	232b      	movmi	r3, #43	; 0x2b
 800a2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2be:	d015      	beq.n	800a2ec <_vfiprintf_r+0x120>
 800a2c0:	9a07      	ldr	r2, [sp, #28]
 800a2c2:	4654      	mov	r4, sl
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	f04f 0c0a 	mov.w	ip, #10
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2d0:	3b30      	subs	r3, #48	; 0x30
 800a2d2:	2b09      	cmp	r3, #9
 800a2d4:	d94d      	bls.n	800a372 <_vfiprintf_r+0x1a6>
 800a2d6:	b1b0      	cbz	r0, 800a306 <_vfiprintf_r+0x13a>
 800a2d8:	9207      	str	r2, [sp, #28]
 800a2da:	e014      	b.n	800a306 <_vfiprintf_r+0x13a>
 800a2dc:	eba0 0308 	sub.w	r3, r0, r8
 800a2e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	46a2      	mov	sl, r4
 800a2ea:	e7d2      	b.n	800a292 <_vfiprintf_r+0xc6>
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	1d19      	adds	r1, r3, #4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	9103      	str	r1, [sp, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	bfbb      	ittet	lt
 800a2f8:	425b      	neglt	r3, r3
 800a2fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a2fe:	9307      	strge	r3, [sp, #28]
 800a300:	9307      	strlt	r3, [sp, #28]
 800a302:	bfb8      	it	lt
 800a304:	9204      	strlt	r2, [sp, #16]
 800a306:	7823      	ldrb	r3, [r4, #0]
 800a308:	2b2e      	cmp	r3, #46	; 0x2e
 800a30a:	d10c      	bne.n	800a326 <_vfiprintf_r+0x15a>
 800a30c:	7863      	ldrb	r3, [r4, #1]
 800a30e:	2b2a      	cmp	r3, #42	; 0x2a
 800a310:	d134      	bne.n	800a37c <_vfiprintf_r+0x1b0>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	1d1a      	adds	r2, r3, #4
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	9203      	str	r2, [sp, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	bfb8      	it	lt
 800a31e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a322:	3402      	adds	r4, #2
 800a324:	9305      	str	r3, [sp, #20]
 800a326:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a3fc <_vfiprintf_r+0x230>
 800a32a:	7821      	ldrb	r1, [r4, #0]
 800a32c:	2203      	movs	r2, #3
 800a32e:	4650      	mov	r0, sl
 800a330:	f7f5 ff56 	bl	80001e0 <memchr>
 800a334:	b138      	cbz	r0, 800a346 <_vfiprintf_r+0x17a>
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	eba0 000a 	sub.w	r0, r0, sl
 800a33c:	2240      	movs	r2, #64	; 0x40
 800a33e:	4082      	lsls	r2, r0
 800a340:	4313      	orrs	r3, r2
 800a342:	3401      	adds	r4, #1
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a34a:	4829      	ldr	r0, [pc, #164]	; (800a3f0 <_vfiprintf_r+0x224>)
 800a34c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a350:	2206      	movs	r2, #6
 800a352:	f7f5 ff45 	bl	80001e0 <memchr>
 800a356:	2800      	cmp	r0, #0
 800a358:	d03f      	beq.n	800a3da <_vfiprintf_r+0x20e>
 800a35a:	4b26      	ldr	r3, [pc, #152]	; (800a3f4 <_vfiprintf_r+0x228>)
 800a35c:	bb1b      	cbnz	r3, 800a3a6 <_vfiprintf_r+0x1da>
 800a35e:	9b03      	ldr	r3, [sp, #12]
 800a360:	3307      	adds	r3, #7
 800a362:	f023 0307 	bic.w	r3, r3, #7
 800a366:	3308      	adds	r3, #8
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	443b      	add	r3, r7
 800a36e:	9309      	str	r3, [sp, #36]	; 0x24
 800a370:	e768      	b.n	800a244 <_vfiprintf_r+0x78>
 800a372:	fb0c 3202 	mla	r2, ip, r2, r3
 800a376:	460c      	mov	r4, r1
 800a378:	2001      	movs	r0, #1
 800a37a:	e7a6      	b.n	800a2ca <_vfiprintf_r+0xfe>
 800a37c:	2300      	movs	r3, #0
 800a37e:	3401      	adds	r4, #1
 800a380:	9305      	str	r3, [sp, #20]
 800a382:	4619      	mov	r1, r3
 800a384:	f04f 0c0a 	mov.w	ip, #10
 800a388:	4620      	mov	r0, r4
 800a38a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38e:	3a30      	subs	r2, #48	; 0x30
 800a390:	2a09      	cmp	r2, #9
 800a392:	d903      	bls.n	800a39c <_vfiprintf_r+0x1d0>
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0c6      	beq.n	800a326 <_vfiprintf_r+0x15a>
 800a398:	9105      	str	r1, [sp, #20]
 800a39a:	e7c4      	b.n	800a326 <_vfiprintf_r+0x15a>
 800a39c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e7f0      	b.n	800a388 <_vfiprintf_r+0x1bc>
 800a3a6:	ab03      	add	r3, sp, #12
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	462a      	mov	r2, r5
 800a3ac:	4b12      	ldr	r3, [pc, #72]	; (800a3f8 <_vfiprintf_r+0x22c>)
 800a3ae:	a904      	add	r1, sp, #16
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7fd fc53 	bl	8007c5c <_printf_float>
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	1c78      	adds	r0, r7, #1
 800a3ba:	d1d6      	bne.n	800a36a <_vfiprintf_r+0x19e>
 800a3bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3be:	07d9      	lsls	r1, r3, #31
 800a3c0:	d405      	bmi.n	800a3ce <_vfiprintf_r+0x202>
 800a3c2:	89ab      	ldrh	r3, [r5, #12]
 800a3c4:	059a      	lsls	r2, r3, #22
 800a3c6:	d402      	bmi.n	800a3ce <_vfiprintf_r+0x202>
 800a3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ca:	f7fe f9c1 	bl	8008750 <__retarget_lock_release_recursive>
 800a3ce:	89ab      	ldrh	r3, [r5, #12]
 800a3d0:	065b      	lsls	r3, r3, #25
 800a3d2:	f53f af1d 	bmi.w	800a210 <_vfiprintf_r+0x44>
 800a3d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3d8:	e71c      	b.n	800a214 <_vfiprintf_r+0x48>
 800a3da:	ab03      	add	r3, sp, #12
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <_vfiprintf_r+0x22c>)
 800a3e2:	a904      	add	r1, sp, #16
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7fd fedd 	bl	80081a4 <_printf_i>
 800a3ea:	e7e4      	b.n	800a3b6 <_vfiprintf_r+0x1ea>
 800a3ec:	0800bb74 	.word	0x0800bb74
 800a3f0:	0800bb7e 	.word	0x0800bb7e
 800a3f4:	08007c5d 	.word	0x08007c5d
 800a3f8:	0800a1a9 	.word	0x0800a1a9
 800a3fc:	0800bb7a 	.word	0x0800bb7a

0800a400 <__swbuf_r>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	460e      	mov	r6, r1
 800a404:	4614      	mov	r4, r2
 800a406:	4605      	mov	r5, r0
 800a408:	b118      	cbz	r0, 800a412 <__swbuf_r+0x12>
 800a40a:	6a03      	ldr	r3, [r0, #32]
 800a40c:	b90b      	cbnz	r3, 800a412 <__swbuf_r+0x12>
 800a40e:	f7fe f877 	bl	8008500 <__sinit>
 800a412:	69a3      	ldr	r3, [r4, #24]
 800a414:	60a3      	str	r3, [r4, #8]
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	071a      	lsls	r2, r3, #28
 800a41a:	d525      	bpl.n	800a468 <__swbuf_r+0x68>
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	b31b      	cbz	r3, 800a468 <__swbuf_r+0x68>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	6922      	ldr	r2, [r4, #16]
 800a424:	1a98      	subs	r0, r3, r2
 800a426:	6963      	ldr	r3, [r4, #20]
 800a428:	b2f6      	uxtb	r6, r6
 800a42a:	4283      	cmp	r3, r0
 800a42c:	4637      	mov	r7, r6
 800a42e:	dc04      	bgt.n	800a43a <__swbuf_r+0x3a>
 800a430:	4621      	mov	r1, r4
 800a432:	4628      	mov	r0, r5
 800a434:	f7ff fdbc 	bl	8009fb0 <_fflush_r>
 800a438:	b9e0      	cbnz	r0, 800a474 <__swbuf_r+0x74>
 800a43a:	68a3      	ldr	r3, [r4, #8]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	60a3      	str	r3, [r4, #8]
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	701e      	strb	r6, [r3, #0]
 800a448:	6962      	ldr	r2, [r4, #20]
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d004      	beq.n	800a45a <__swbuf_r+0x5a>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	07db      	lsls	r3, r3, #31
 800a454:	d506      	bpl.n	800a464 <__swbuf_r+0x64>
 800a456:	2e0a      	cmp	r6, #10
 800a458:	d104      	bne.n	800a464 <__swbuf_r+0x64>
 800a45a:	4621      	mov	r1, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	f7ff fda7 	bl	8009fb0 <_fflush_r>
 800a462:	b938      	cbnz	r0, 800a474 <__swbuf_r+0x74>
 800a464:	4638      	mov	r0, r7
 800a466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a468:	4621      	mov	r1, r4
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 f806 	bl	800a47c <__swsetup_r>
 800a470:	2800      	cmp	r0, #0
 800a472:	d0d5      	beq.n	800a420 <__swbuf_r+0x20>
 800a474:	f04f 37ff 	mov.w	r7, #4294967295
 800a478:	e7f4      	b.n	800a464 <__swbuf_r+0x64>
	...

0800a47c <__swsetup_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4b2a      	ldr	r3, [pc, #168]	; (800a528 <__swsetup_r+0xac>)
 800a480:	4605      	mov	r5, r0
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	460c      	mov	r4, r1
 800a486:	b118      	cbz	r0, 800a490 <__swsetup_r+0x14>
 800a488:	6a03      	ldr	r3, [r0, #32]
 800a48a:	b90b      	cbnz	r3, 800a490 <__swsetup_r+0x14>
 800a48c:	f7fe f838 	bl	8008500 <__sinit>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a496:	0718      	lsls	r0, r3, #28
 800a498:	d422      	bmi.n	800a4e0 <__swsetup_r+0x64>
 800a49a:	06d9      	lsls	r1, r3, #27
 800a49c:	d407      	bmi.n	800a4ae <__swsetup_r+0x32>
 800a49e:	2309      	movs	r3, #9
 800a4a0:	602b      	str	r3, [r5, #0]
 800a4a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e034      	b.n	800a518 <__swsetup_r+0x9c>
 800a4ae:	0758      	lsls	r0, r3, #29
 800a4b0:	d512      	bpl.n	800a4d8 <__swsetup_r+0x5c>
 800a4b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4b4:	b141      	cbz	r1, 800a4c8 <__swsetup_r+0x4c>
 800a4b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ba:	4299      	cmp	r1, r3
 800a4bc:	d002      	beq.n	800a4c4 <__swsetup_r+0x48>
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f7fe ffd0 	bl	8009464 <_free_r>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	6363      	str	r3, [r4, #52]	; 0x34
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6063      	str	r3, [r4, #4]
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f043 0308 	orr.w	r3, r3, #8
 800a4de:	81a3      	strh	r3, [r4, #12]
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	b94b      	cbnz	r3, 800a4f8 <__swsetup_r+0x7c>
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ee:	d003      	beq.n	800a4f8 <__swsetup_r+0x7c>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 f884 	bl	800a600 <__smakebuf_r>
 800a4f8:	89a0      	ldrh	r0, [r4, #12]
 800a4fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4fe:	f010 0301 	ands.w	r3, r0, #1
 800a502:	d00a      	beq.n	800a51a <__swsetup_r+0x9e>
 800a504:	2300      	movs	r3, #0
 800a506:	60a3      	str	r3, [r4, #8]
 800a508:	6963      	ldr	r3, [r4, #20]
 800a50a:	425b      	negs	r3, r3
 800a50c:	61a3      	str	r3, [r4, #24]
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	b943      	cbnz	r3, 800a524 <__swsetup_r+0xa8>
 800a512:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a516:	d1c4      	bne.n	800a4a2 <__swsetup_r+0x26>
 800a518:	bd38      	pop	{r3, r4, r5, pc}
 800a51a:	0781      	lsls	r1, r0, #30
 800a51c:	bf58      	it	pl
 800a51e:	6963      	ldrpl	r3, [r4, #20]
 800a520:	60a3      	str	r3, [r4, #8]
 800a522:	e7f4      	b.n	800a50e <__swsetup_r+0x92>
 800a524:	2000      	movs	r0, #0
 800a526:	e7f7      	b.n	800a518 <__swsetup_r+0x9c>
 800a528:	200000d4 	.word	0x200000d4

0800a52c <_raise_r>:
 800a52c:	291f      	cmp	r1, #31
 800a52e:	b538      	push	{r3, r4, r5, lr}
 800a530:	4604      	mov	r4, r0
 800a532:	460d      	mov	r5, r1
 800a534:	d904      	bls.n	800a540 <_raise_r+0x14>
 800a536:	2316      	movs	r3, #22
 800a538:	6003      	str	r3, [r0, #0]
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a542:	b112      	cbz	r2, 800a54a <_raise_r+0x1e>
 800a544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a548:	b94b      	cbnz	r3, 800a55e <_raise_r+0x32>
 800a54a:	4620      	mov	r0, r4
 800a54c:	f000 f830 	bl	800a5b0 <_getpid_r>
 800a550:	462a      	mov	r2, r5
 800a552:	4601      	mov	r1, r0
 800a554:	4620      	mov	r0, r4
 800a556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a55a:	f000 b817 	b.w	800a58c <_kill_r>
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d00a      	beq.n	800a578 <_raise_r+0x4c>
 800a562:	1c59      	adds	r1, r3, #1
 800a564:	d103      	bne.n	800a56e <_raise_r+0x42>
 800a566:	2316      	movs	r3, #22
 800a568:	6003      	str	r3, [r0, #0]
 800a56a:	2001      	movs	r0, #1
 800a56c:	e7e7      	b.n	800a53e <_raise_r+0x12>
 800a56e:	2400      	movs	r4, #0
 800a570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a574:	4628      	mov	r0, r5
 800a576:	4798      	blx	r3
 800a578:	2000      	movs	r0, #0
 800a57a:	e7e0      	b.n	800a53e <_raise_r+0x12>

0800a57c <raise>:
 800a57c:	4b02      	ldr	r3, [pc, #8]	; (800a588 <raise+0xc>)
 800a57e:	4601      	mov	r1, r0
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	f7ff bfd3 	b.w	800a52c <_raise_r>
 800a586:	bf00      	nop
 800a588:	200000d4 	.word	0x200000d4

0800a58c <_kill_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d07      	ldr	r5, [pc, #28]	; (800a5ac <_kill_r+0x20>)
 800a590:	2300      	movs	r3, #0
 800a592:	4604      	mov	r4, r0
 800a594:	4608      	mov	r0, r1
 800a596:	4611      	mov	r1, r2
 800a598:	602b      	str	r3, [r5, #0]
 800a59a:	f7fa fab7 	bl	8004b0c <_kill>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	d102      	bne.n	800a5a8 <_kill_r+0x1c>
 800a5a2:	682b      	ldr	r3, [r5, #0]
 800a5a4:	b103      	cbz	r3, 800a5a8 <_kill_r+0x1c>
 800a5a6:	6023      	str	r3, [r4, #0]
 800a5a8:	bd38      	pop	{r3, r4, r5, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20000900 	.word	0x20000900

0800a5b0 <_getpid_r>:
 800a5b0:	f7fa baa4 	b.w	8004afc <_getpid>

0800a5b4 <__swhatbuf_r>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5bc:	2900      	cmp	r1, #0
 800a5be:	b096      	sub	sp, #88	; 0x58
 800a5c0:	4615      	mov	r5, r2
 800a5c2:	461e      	mov	r6, r3
 800a5c4:	da0d      	bge.n	800a5e2 <__swhatbuf_r+0x2e>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a5cc:	f04f 0100 	mov.w	r1, #0
 800a5d0:	bf0c      	ite	eq
 800a5d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a5d6:	2340      	movne	r3, #64	; 0x40
 800a5d8:	2000      	movs	r0, #0
 800a5da:	6031      	str	r1, [r6, #0]
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	b016      	add	sp, #88	; 0x58
 800a5e0:	bd70      	pop	{r4, r5, r6, pc}
 800a5e2:	466a      	mov	r2, sp
 800a5e4:	f000 f848 	bl	800a678 <_fstat_r>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	dbec      	blt.n	800a5c6 <__swhatbuf_r+0x12>
 800a5ec:	9901      	ldr	r1, [sp, #4]
 800a5ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a5f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a5f6:	4259      	negs	r1, r3
 800a5f8:	4159      	adcs	r1, r3
 800a5fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5fe:	e7eb      	b.n	800a5d8 <__swhatbuf_r+0x24>

0800a600 <__smakebuf_r>:
 800a600:	898b      	ldrh	r3, [r1, #12]
 800a602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a604:	079d      	lsls	r5, r3, #30
 800a606:	4606      	mov	r6, r0
 800a608:	460c      	mov	r4, r1
 800a60a:	d507      	bpl.n	800a61c <__smakebuf_r+0x1c>
 800a60c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	2301      	movs	r3, #1
 800a616:	6163      	str	r3, [r4, #20]
 800a618:	b002      	add	sp, #8
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	ab01      	add	r3, sp, #4
 800a61e:	466a      	mov	r2, sp
 800a620:	f7ff ffc8 	bl	800a5b4 <__swhatbuf_r>
 800a624:	9900      	ldr	r1, [sp, #0]
 800a626:	4605      	mov	r5, r0
 800a628:	4630      	mov	r0, r6
 800a62a:	f7fd f9eb 	bl	8007a04 <_malloc_r>
 800a62e:	b948      	cbnz	r0, 800a644 <__smakebuf_r+0x44>
 800a630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a634:	059a      	lsls	r2, r3, #22
 800a636:	d4ef      	bmi.n	800a618 <__smakebuf_r+0x18>
 800a638:	f023 0303 	bic.w	r3, r3, #3
 800a63c:	f043 0302 	orr.w	r3, r3, #2
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	e7e3      	b.n	800a60c <__smakebuf_r+0xc>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	6020      	str	r0, [r4, #0]
 800a648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	6163      	str	r3, [r4, #20]
 800a652:	9b01      	ldr	r3, [sp, #4]
 800a654:	6120      	str	r0, [r4, #16]
 800a656:	b15b      	cbz	r3, 800a670 <__smakebuf_r+0x70>
 800a658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a65c:	4630      	mov	r0, r6
 800a65e:	f000 f81d 	bl	800a69c <_isatty_r>
 800a662:	b128      	cbz	r0, 800a670 <__smakebuf_r+0x70>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f023 0303 	bic.w	r3, r3, #3
 800a66a:	f043 0301 	orr.w	r3, r3, #1
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	431d      	orrs	r5, r3
 800a674:	81a5      	strh	r5, [r4, #12]
 800a676:	e7cf      	b.n	800a618 <__smakebuf_r+0x18>

0800a678 <_fstat_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d07      	ldr	r5, [pc, #28]	; (800a698 <_fstat_r+0x20>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	4611      	mov	r1, r2
 800a684:	602b      	str	r3, [r5, #0]
 800a686:	f7fa faa0 	bl	8004bca <_fstat>
 800a68a:	1c43      	adds	r3, r0, #1
 800a68c:	d102      	bne.n	800a694 <_fstat_r+0x1c>
 800a68e:	682b      	ldr	r3, [r5, #0]
 800a690:	b103      	cbz	r3, 800a694 <_fstat_r+0x1c>
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	bd38      	pop	{r3, r4, r5, pc}
 800a696:	bf00      	nop
 800a698:	20000900 	.word	0x20000900

0800a69c <_isatty_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d06      	ldr	r5, [pc, #24]	; (800a6b8 <_isatty_r+0x1c>)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	602b      	str	r3, [r5, #0]
 800a6a8:	f7fa fa9f 	bl	8004bea <_isatty>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_isatty_r+0x1a>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_isatty_r+0x1a>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	20000900 	.word	0x20000900

0800a6bc <_init>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	bf00      	nop
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr

0800a6c8 <_fini>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	bf00      	nop
 800a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ce:	bc08      	pop	{r3}
 800a6d0:	469e      	mov	lr, r3
 800a6d2:	4770      	bx	lr
